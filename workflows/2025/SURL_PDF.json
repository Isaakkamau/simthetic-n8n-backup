{
  "active": true,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        []
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "Respond to Webhook7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out7": {
      "main": [
        [
          {
            "node": "Edit Fields16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "Aggregate6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields16": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Wire Transfer1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Bank_Statement1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invoice(Goods)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Expenses Sub-Ledger1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Disbursement Listing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "invoices_services1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Purchase Contract",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shipping Document (Sending)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shipping Document (Receiving)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Order Document1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File18": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Convert to File19": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Convert to File20": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Convert to File21": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Convert to File22": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Convert to File23": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "Convert to File24": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 9
          }
        ]
      ]
    },
    "Aggregate6": {
      "main": [
        [
          {
            "node": "Compression2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table5": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Edit Fields29",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields17": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wire Transfer1": {
      "main": [
        [
          {
            "node": "Edit Fields20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bank_Statement1": {
      "main": [
        [
          {
            "node": "Edit Fields19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Invoice(Goods)1": {
      "main": [
        [
          {
            "node": "Edit Fields21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expenses Sub-Ledger1": {
      "main": [
        [
          {
            "node": "Edit Fields22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Disbursement Listing1": {
      "main": [
        [
          {
            "node": "Edit Fields23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "invoices_services1": {
      "main": [
        [
          {
            "node": "Edit Fields24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shipping Document (Sending)1": {
      "main": [
        [
          {
            "node": "Edit Fields26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shipping Document (Receiving)1": {
      "main": [
        [
          {
            "node": "Edit Fields27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order Document1": {
      "main": [
        [
          {
            "node": "Edit Fields28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial1": {
      "main": [
        [
          {
            "node": "Select rows from a table5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Aggregate4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook6": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields18": {
      "main": [
        [
          {
            "node": "Select rows from a table6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table6": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Initial1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Initial1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File25": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields19": {
      "main": [
        [
          {
            "node": "Convert to File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields20": {
      "main": [
        [
          {
            "node": "Convert to File16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File16": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields21": {
      "main": [
        [
          {
            "node": "Convert to File15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File15": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Edit Fields22": {
      "main": [
        [
          {
            "node": "Convert to File18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields23": {
      "main": [
        [
          {
            "node": "Convert to File19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields24": {
      "main": [
        [
          {
            "node": "Convert to File20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields25": {
      "main": [
        [
          {
            "node": "Convert to File21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields26": {
      "main": [
        [
          {
            "node": "Convert to File22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields27": {
      "main": [
        [
          {
            "node": "Convert to File23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields28": {
      "main": [
        [
          {
            "node": "Convert to File24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields29": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Split Out7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out8": {
      "main": [
        [
          {
            "node": "Edit Fields16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression2": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate4": {
      "main": [
        [
          {
            "node": "Update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File17": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Respond to Webhook7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Purchase Contract": {
      "main": [
        [
          {
            "node": "Edit Fields25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Edit Fields18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-16T19:15:56.514Z",
  "id": "EA6E4NnZXJ2wTsym",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "SURL_PDF",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -6144,
        2688
      ],
      "id": "782b5a22-b82f-49f9-9886-2cd165e54ad6",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3248,
        2448
      ],
      "id": "5fd967db-a5db-435a-83eb-0387c80bf31d",
      "name": "Loop Over Items3",
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "enhancedsimulation",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2400,
        2544
      ],
      "id": "00549c51-67b0-4997-b5af-c91f036ab2cf",
      "name": "Split Out7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://34.59.1.191:8000/html-pdf-converter",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "orientation",
              "value": "portrait"
            },
            {
              "name": "fit_to_page",
              "value": "true"
            },
            {
              "name": "filename",
              "value": "={{ $binary.data.fileName.split('.').slice(0, -1).join('.') }}.pdf"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1664,
        3120
      ],
      "id": "db4c1cd2-b430-48a6-b623-e9c7f2656993",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "jsCode": "const item = items[0].json;\n\nconst keys = Object.keys(item);\n\nconst result = [];\n\nkeys.forEach((key) => {\n  result.push({\n    json: {\n      column: key,\n      value: item[key],\n    },\n  });\n});\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2336,
        2880
      ],
      "id": "809f91bd-2029-4745-a3da-243bf13ad5f2",
      "name": "Code10"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e4c2e8e-27b7-48a9-b524-5753b45e20e9",
              "name": "column",
              "value": "={{ $json.docType }}",
              "type": "string"
            },
            {
              "id": "3fd4f590-689a-498b-bfcf-c9d350b3b150",
              "name": "value",
              "value": "={{ $json.data }}",
              "type": "array"
            },
            {
              "id": "901707af-fae4-4a06-81e7-dd3dd94ece8b",
              "name": "companyProfile",
              "value": "={{ $('Initial1').item.json.companyprofile }}",
              "type": "object"
            },
            {
              "id": "67ff2370-0714-4433-8573-cbd8d9a34124",
              "name": "runindex",
              "value": "={{ $runIndex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1904,
        2560
      ],
      "id": "15b9c47d-3271-443e-ac34-67c8cd2b657a",
      "name": "Edit Fields16"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "wire",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "146344cf-50b7-4cff-959d-0415ebcd83ce"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ad0f8eb7-2b1e-420f-8d5a-caa9a837467a",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "bank",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5db1bd82-c9a4-4126-87f8-6f8af18d1394",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Invoice (Goods)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3fdb2e47-5c26-4020-a180-528ff4f36e3f",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "expenses",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "66b17d40-652b-44d9-85e7-69cea52454d2",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "disbursement",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fc94af0-bbe9-43a8-bd68-f8e1249b4b71",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Invoices (for Services)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d8268b87-f26c-45ba-9a14-f56b82e043a7",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Purchase Contract Snippet",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6312c7b0-5402-4ba2-9329-25471c68ed1c",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Shipping Document (Sending)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "51e5a37c-7a3d-4cfe-be8a-1aa924e893e6",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Shipping Document (Receiving)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0b5e2650-269b-439e-9072-f50ac59aaca1",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Order Document",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1616,
        2432
      ],
      "id": "e23aba25-45d9-4552-848c-3374dd41221f",
      "name": "Switch3"
    },
    {
      "parameters": {
        "numberInputs": 10
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1088,
        2320
      ],
      "id": "10494f2b-de06-4946-b5ee-13355eefde79",
      "name": "Merge3"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Expense_sub_Ledger_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        128,
        2112
      ],
      "id": "8e753709-0193-498f-9b07-b927bbe4c071",
      "name": "Convert to File18"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Disbursment_listing_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        224,
        2304
      ],
      "id": "5ad33414-71c7-46b6-a880-602ec588e548",
      "name": "Convert to File19"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Invoice_Services_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        240,
        2512
      ],
      "id": "c447b7bb-6864-4059-9889-6ba49fd05bde",
      "name": "Convert to File20"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Purchase_Contract_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        320,
        2688
      ],
      "id": "92d772c8-552c-4272-91be-15335b9168eb",
      "name": "Convert to File21"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Shipping_Document_Sending_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        320,
        2864
      ],
      "id": "44fdbcc9-8d7a-438f-8d99-bb2044178d0e",
      "name": "Convert to File22"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Shipping_Document_Recieving_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        368,
        3088
      ],
      "id": "a43f38d0-2b9a-48f4-9982-17dd711beb94",
      "name": "Convert to File23"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Order_Document_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        400,
        3328
      ],
      "id": "1481da9c-cb62-4181-876d-07161e775a22",
      "name": "Convert to File24"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2208,
        3440
      ],
      "id": "372a81ac-6539-44e9-b1a3-363cf075fdae",
      "name": "Aggregate6"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.project_simulation_id }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4144,
        2608
      ],
      "id": "b180798d-0666-4f17-a9a0-ce1ac04e7ff1",
      "name": "Select rows from a table5",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "project_simulation_id",
              "field2": "id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3904,
        2464
      ],
      "id": "c5537475-f059-48cf-a6dc-0704c243622c",
      "name": "Merge4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ce60c50a-df6d-4908-9630-f920aad9c86f",
              "name": "enhancedsimulation",
              "value": "={{\n(() => {\n  const root = $json.enhancedsimulation.processedRuns[0].processedDocuments ?? {};\n  if (Array.isArray(root)) return root; // already good\n\n  // root looks like: { \"Wire Transfer\": [ { docId?, data? , ... }, ... ], \"Invoice\": [ ... ] }\n  return Object.entries(root).reduce((acc, [docType, docs]) => {\n    const list = Array.isArray(docs) ? docs : [docs];\n    list.filter(Boolean).forEach((doc, idx) => {\n      const { data, docId, ...rest } = doc ?? {};\n      acc.push({\n        docType,\n        docId: docId ?? `${docType}_${idx + 1}`,\n        ...rest,\n        data: Array.isArray(data) ? data : (data ? [data] : []), // force array\n      });\n    });\n    return acc;\n  }, []);\n})()\n}}",
              "type": "array"
            },
            {
              "id": "94d0b360-b005-4dac-82e9-4f31fad3d382",
              "name": "company",
              "value": "={{ $json.input_config.stage1.companies[0] }}",
              "type": "object"
            },
            {
              "id": "a6908ae3-3525-4b62-9d64-5b200fed01d7",
              "name": "company_profile",
              "value": "={{ $json.companyprofile }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3696,
        2560
      ],
      "id": "31ecf0ab-6c72-4cd6-baa2-e7c422cfb4c4",
      "name": "Edit Fields17",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"wireTransferSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"styling\": {\n        \"background_color\": \"<<background_color>>\",\n        \"text_color\": \"<<text_color>>\",\n        \"transfer_background\": \"<<transfer_background>>\",\n        \"border_color\": \"<<border_color>>\",\n        \"primary_color\": \"<<primary_color>>\",\n        \"title_background\": \"<<title_background>>\",\n        \"title_text_color\": \"<<title_text_color>>\",\n        \"account_info_background\": \"<<account_info_background>>\",\n        \"detail_border_color\": \"<<detail_border_color>>\",\n        \"details_background\": \"<<details_background>>\",\n        \"accent_color\": \"<<accent_color>>\",\n        \"table_header_background\": \"<<table_header_background>>\",\n        \"table_border_color\": \"<<table_border_color>>\",\n        \"confirmation_background\": \"<<confirmation_background>>\",\n        \"confirmation_border_color\": \"<<confirmation_border_color>>\"\n      },\n      \"logo\": {\n        \"logo_url\": \"<<logo_url>>\",\n        \"logo_width\": \"<<logo_width>>\",\n        \"logo_height\": \"<<logo_height>>\",\n        \"logo_background\": \"<<logo_background>>\",\n        \"logo_text_color\": \"<<logo_text_color>>\",\n        \"logo_text\": \"<<logo_text>>\"\n      },\n      \"bank_info\": {\n        \"bank_name\": \"<<bank_name>>\",\n        \"bank_address\": \"<<bank_address>>\"\n      },\n      \"requestor\": {\n        \"requestor\": \"<<requestor_name>>\",\n        \"requestor_account_number\": \"<<requestor_account_number>>\",\n        \"requestor_routing_number\": \"<<requestor_routing_number>>\",\n        \"requestor_bank_name\": \"<<requestor_bank_name>>\",\n        \"requestor_address\": \"<<requestor_address>>\"\n      },\n      \"recipient\": {\n        \"recipient\": \"<<recipient_name>>\",\n        \"recipient_account_number\": \"<<recipient_account_number>>\",\n        \"recipient_routing_number\": \"<<recipient_routing_number>>\",\n        \"recipient_bank_name\": \"<<recipient_bank_name>>\",\n        \"recipient_address\": \"<<recipient_address>>\"\n      },\n      \"transaction\": {\n        \"transaction_type\": \"<<transaction_type>>\",\n        \"amount\": \"<<amount>>\",\n        \"currency\": \"<<currency>>\",\n        \"wire_date\": \"<<wire_date>>\",\n        \"transaction_number\": \"<<transaction_number>>\",\n        \"memo_reference\": \"<<memo_reference>>\"\n      },\n      \"confirmation\": {\n        \"confirmation_number\": \"<<confirmation_number>>\",\n        \"confirmation_message\": \"<<confirmation_message>>\"\n      },\n      \"footer\": {\n        \"footer_text\": \"<<footer_text>>\"\n      }\n    }\n  }\n}",
              "type": "string"
            },
            {
              "id": "deed7af2-d464-46a0-a5ff-941739da4d01",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -720,
        1504
      ],
      "id": "b2d8d3c3-39a1-4f58-9f3a-6d1f71589a40",
      "name": "Wire Transfer1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "4cf173b8-2b0e-4333-a7f8-d997418deea0",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -704,
        1680
      ],
      "id": "914c01f2-f83b-43c3-9b0f-a1b3549098df",
      "name": "Bank_Statement1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"invoice\": {\n    \"document_type\": \"<<document_type>>\",\n    \"logo_url\": \"<<logo_url>>\",\n    \"currency\": \"<<currency>>\",\n    \"company\": {\n      \"name\": \"<<company_name>>\",\n      \"address\": \"<<company_address>>\",\n      \"contact\": \"<<company_contact>>\",\n      \"details\": \"<<company_details>>\"\n    },\n    \"meta\": {\n      \"invoice_number\": \"<<invoice_number>>\",\n      \"invoice_date\": \"<<invoice_date>>\",\n      \"due_date\": \"<<due_date>>\",\n      \"po_number\": \"<<po_number>>\",\n      \"delivery_date\": \"<<delivery_date>>\",\n      \"currency_unit\": \"<<currency_unit>>\",\n      \"shipping_terms\": \"<<shipping_terms>>\",\n      \"payment_terms\": \"<<payment_terms>>\"\n    },\n    \"recipient\": {\n      \"label\": \"<<recipient_label>>\",\n      \"name\": \"<<recipient_name>>\",\n      \"customer_number\": \"<<customer_number>>\",\n      \"account_number\": \"<<account_number>>\",\n      \"address\": \"<<recipient_address>>\"\n    },\n    \"items\": [\n      {\n        \"product_code\": \"<<product_code>>\",\n        \"description\": \"<<item_description>>\",\n        \"uom\": \"<<unit_of_measurement>>\",\n        \"quantity\": \"<<quantity>>\",\n        \"unit_price\": \"<<unit_price>>\",\n        \"line_total\": \"<<line_total>>\"\n      }\n    ],\n    \"totals\": {\n      \"subtotal\": \"<<subtotal>>\",\n      \"discount\": \"<<discount>>\",\n      \"freight_charges\": \"<<freight_charges>>\",\n      \"tax_details\": \"<<tax_details>>\",\n      \"tax_amount\": \"<<tax_amount>>\",\n      \"total_due\": \"<<total_due>>\"\n    },\n    \"notes\": [\n      \"<<note_1>>\",\n      \"<<note_2>>\"\n    ]\n  }\n}",
              "type": "string"
            },
            {
              "id": "3ecc8651-4c0b-4153-a07b-b1643bc30335",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -688,
        1904
      ],
      "id": "40918161-ef9e-4d28-a342-e5e55b4fed17",
      "name": "Invoice(Goods)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "d9ed6ffd-fd66-467d-b2c1-2df0b603e15a",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -640,
        2112
      ],
      "id": "f35360ed-328f-4054-80da-934faca4596e",
      "name": "Expenses Sub-Ledger1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "ee7794c6-872b-4558-8bef-a67f3c3c5acc",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -640,
        2304
      ],
      "id": "21e0078e-7bae-428e-85bf-cf80774f9840",
      "name": "Disbursement Listing1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"document_type\": \"<<document_type>>\",\n  \"currency_symbol\": \"<<currency_symbol>>\",\n  \"branding\": {\n    \"logo_url\": \"<<logo_url>>\"\n  },\n  \"theme\": {\n    \"primary_color\": \"<<primary_color>>\",\n    \"secondary_color\": \"<<secondary_color>>\",\n    \"accent_color\": \"<<accent_color>>\",\n    \"background_color\": \"<<background_color>>\",\n    \"text_color\": \"<<text_color>>\"\n  },\n  \"invoice\": {\n    \"header\": {\n      \"invoice_number\": \"<<invoice_number>>\",\n      \"invoice_date\": \"<<invoice_date>>\",\n      \"due_date\": \"<<due_date>>\",\n      \"po_number\": \"<<po_number>>\",\n      \"so_or_wo_number\": \"<<so_or_wo_number>>\",\n      \"delivery_or_completion_date\": \"<<delivery_or_completion_date>>\",\n      \"currency_unit\": \"<<currency_unit>>\",\n      \"shipping_or_delivery_terms\": \"<<shipping_or_delivery_terms>>\",\n      \"transfer_of_rights_indication\": \"<<transfer_of_rights_indication>>\",\n      \"payment_terms\": \"<<payment_terms>>\"\n    },\n    \"supplier\": {\n      \"supplier_name\": \"<<supplier_name>>\",\n      \"supplier_number\": \"<<supplier_number>>\",\n      \"supplier_address\": \"<<supplier_address>>\",\n      \"supplier_email\": \"<<supplier_email>>\",\n      \"supplier_phone\": \"<<supplier_phone>>\"\n    },\n    \"customer\": {\n      \"customer_name\": \"<<customer_name>>\",\n      \"customer_number\": \"<<customer_number>>\",\n      \"customer_account_number\": \"<<customer_account_number>>\",\n      \"customer_address\": \"<<customer_address>>\",\n      \"customer_email\": \"<<customer_email>>\",\n      \"customer_phone\": \"<<customer_phone>>\"\n    },\n    \"items\": [\n      {\n        \"product_code\": \"<<product_code>>\",\n        \"description\": \"<<item_description>>\",\n        \"uom\": \"<<unit_of_measure>>\",\n        \"quantity\": \"<<quantity>>\",\n        \"unit_price\": \"<<unit_price>>\",\n        \"line_total\": \"<<line_total>>\"\n      }\n    ],\n    \"totals\": {\n      \"subtotal\": \"<<subtotal>>\",\n      \"discount\": \"<<discount>>\",\n      \"freight_charges\": \"<<freight_charges>>\",\n      \"selling_costs\": \"<<selling_costs>>\",\n      \"tax_details\": \"<<tax_details>>\",\n      \"tax_amount\": \"<<tax_amount>>\",\n      \"total_amount_due\": \"<<total_amount_due>>\"\n    }\n  },\n  \"notes\": \"<<notes>>\",\n  \"footer\": \"<<footer>>\"\n}",
              "type": "string"
            },
            {
              "id": "94213780-385c-42e9-83d3-592efce6b80e",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        2512
      ],
      "id": "94ae7f34-168d-486c-b3fd-15e5fcf1ae16",
      "name": "invoices_services1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "eccee5da-3b59-4a05-962c-551f42e9a543",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        2864
      ],
      "id": "2463d741-5291-4ac3-a925-4c569b71afac",
      "name": "Shipping Document (Sending)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "1ce2eeb7-6c01-47e2-a216-c11feb020951",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        3088
      ],
      "id": "b3c7b2a9-eee3-4ea7-a26f-08667aa53714",
      "name": "Shipping Document (Receiving)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "d95f3151-b525-4d31-906e-b0594c8421e1",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        3328
      ],
      "id": "f8cf06b5-4b18-4588-becf-f579123edd54",
      "name": "Order Document1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Edit Fields18').first().json.fileid }}",
            "files": "={{ $json.data[1] }}",
            "doc_type": "pdf",
            "cleanpdffiles": "={{ $json.data[0] }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "project_simulation_id",
              "displayName": "project_simulation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "simulation_run_id",
              "displayName": "simulation_run_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "document_data",
              "displayName": "document_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "doc_type",
              "displayName": "doc_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "files",
              "displayName": "files",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cleanpdffiles",
              "displayName": "cleanpdffiles",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "cleansimulation",
              "displayName": "cleansimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2064,
        2304
      ],
      "id": "d2aa31f5-5c0e-4da2-b9ce-25601d3a8a51",
      "name": "Update rows in a table1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "document_data",
              "condition": "IS NOT NULL"
            },
            {
              "column": "id",
              "value": "={{ $('Edit Fields18').first().json.fileid }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4384,
        2448
      ],
      "id": "f5c017bd-971c-4a6f-8d6b-f85ff372b1e2",
      "name": "Initial1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2496,
        2304
      ],
      "id": "2c19718b-efd7-4900-b50e-ae89214f7b14",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "path": "get_pdf",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5984,
        2432
      ],
      "id": "143c9ff8-c7f5-45cd-815f-f9bc03bdfe5d",
      "name": "Webhook6",
      "webhookId": "f9ec5df8-6329-4dcd-a2ca-e8ac53971f38"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20eb691c-d5f4-4270-8dbb-4652177bc419",
              "name": "fileid_tmp",
              "value": "={{ $json.id }}",
              "type": "number"
            },
            {
              "id": "912895ba-a55f-47d8-9757-b7e2b9eca299",
              "name": "fileid",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5456,
        2432
      ],
      "id": "6505f801-85de-4fcf-9491-9deab723eafa",
      "name": "Edit Fields18"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 10,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.fileid }}"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "files",
            "cleanpdffiles",
            "file_name"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -5248,
        2432
      ],
      "id": "998fb6d8-8d2e-4701-a7f2-b86309ac839a",
      "name": "Select rows from a table6",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "03ce2801-589f-46d4-93b7-09dcce417d46",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "d2c6b351-7769-4a81-ab16-9b535b06ae33",
              "leftValue": "={{ $json.cleanpdffiles }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5024,
        2432
      ],
      "id": "668a1fac-348b-4f73-8962-0bcee2f3029d",
      "name": "If5"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "files",
        "options": {
          "fileName": "={{ $json.file_name+'.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4464,
        1904
      ],
      "id": "388bae76-98c0-446c-8495-da3ee72e2d5d",
      "name": "Convert to File25"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2144,
        1952
      ],
      "id": "7545eb9c-7e4c-48bc-a232-5e66668947d3",
      "name": "Respond to Webhook7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Bank Statement Generator</title>\n</head>\n<body>\n  <div id=\"statement-container\"></div>\n  <div id=\"controls\" style=\"margin: 20px; text-align: center;\">\n  </div>\n\n  <script>\n    // TRANSACTION DATA - Replace with your actual transaction data\n    const TRANSACTION_DATA = {{ $json.value.toJsonString() }};\n\n    // COMPANY/BANK DATA - Replace with your actual company/bank data\n    const COMPANY_DATA ={{ $json.companyProfile.toJsonString() }} ;\n\n    // Helper function to format currency\n    function formatCurrency(amount) {\n      const num = parseFloat(amount || 0);\n      return num >= 0 ? `$${num.toFixed(2)}` : `-$${Math.abs(num).toFixed(2)}`;\n    }\n\n    // Helper function to determine if transaction is debit/credit\n    function getTransactionType(transaction) {\n      const debitAmount = parseFloat(transaction.Withdrawal_or_Debit_Totals || 0);\n      const creditAmount = parseFloat(transaction.Deposit_or_Credit_Totals || 0);\n      \n      return {\n        is_debit: debitAmount > 0,\n        is_credit: creditAmount > 0,\n        debit_amount: debitAmount > 0 ? formatCurrency(debitAmount) : '',\n        credit_amount: creditAmount > 0 ? formatCurrency(creditAmount) : ''\n      };\n    }\n\n    // Function to generate transaction rows\n    function generateTransactionRows(transactions) {\n      return transactions.map(transaction => {\n        const transactionType = getTransactionType(transaction);\n        const debitClass = transactionType.is_debit ? ' withdrawal' : '';\n        const creditClass = transactionType.is_credit ? ' deposit' : '';\n        \n        return `\n        <tr>\n          <td>${transaction.Date_of_transaction}</td>\n          <td>${transaction.Transaction_Number}</td>\n          <td>${transaction.Transactional_Details}</td>\n          <td class=\"amount${debitClass}\">${transactionType.debit_amount}</td>\n          <td class=\"amount${creditClass}\">${transactionType.credit_amount}</td>\n          <td class=\"amount\">$0.00</td>\n          <td class=\"amount\">$0.00</td>\n          <td class=\"amount balance\">${formatCurrency(transaction.Balance)}</td>\n        </tr>`;\n      }).join('');\n    }\n\n    // Function to calculate summary data from transactions\n    function calculateSummary(transactions) {\n      if (!transactions.length) return {};\n      \n      const firstTransaction = transactions[0];\n      const lastTransaction = transactions[transactions.length - 1];\n      \n      let totalDebits = 0;\n      let totalCredits = 0;\n      \n      transactions.forEach(transaction => {\n        totalDebits += parseFloat(transaction.Withdrawal_or_Debit_Totals || 0);\n        totalCredits += parseFloat(transaction.Deposit_or_Credit_Totals || 0);\n      });\n      \n      return {\n        opening_balance: formatCurrency(firstTransaction.Opening_or_Beginning_or_Previous_Balance),\n        closing_balance: formatCurrency(lastTransaction.Closing_or_Ending_Balance),\n        withdrawal_totals: formatCurrency(totalDebits),\n        deposit_totals: formatCurrency(totalCredits),\n        fees_total: '$0.00',\n        interest_earned: '$0.00',\n        interest_paid: '$0.00'\n      };\n    }\n\n    // Function to get statement period from transactions\n    function getStatementPeriod(transactions) {\n      if (!transactions.length) return { from: '', to: '' };\n      \n      const periods = transactions.map(t => t.Statement_Period);\n      const uniquePeriods = [...new Set(periods)];\n      \n      if (uniquePeriods.length === 1) {\n        const [from, to] = uniquePeriods[0].split(' to ');\n        return { from, to };\n      }\n      \n      // If multiple periods, find the earliest and latest dates\n      const dates = transactions.map(t => new Date(t.Date_of_transaction));\n      const earliest = new Date(Math.min(...dates));\n      const latest = new Date(Math.max(...dates));\n      \n      return {\n        from: earliest.toISOString().split('T')[0],\n        to: latest.toISOString().split('T')[0]\n      };\n    }\n\n    // Function to get bank info\n    function getBankInfo(companyData, bankName) {\n      const bank = companyData.banks.find(b => b.name === bankName) || companyData.banks[0];\n      return bank || {\n        name: bankName,\n        address: \"123 Main St, City, State\",\n        branding: {\n          logo_url: \"\",\n          primary_color: \"#334155\",\n          secondary_color: \"#0F172A\"\n        }\n      };\n    }\n\n    // Function to generate complete HTML\n    function generateBankStatement(transactionData, companyData) {\n      if (!transactionData.length) return '<p>No transaction data available</p>';\n      \n      const bankName = transactionData[0].Bank_name;\n      const bankInfo = getBankInfo(companyData, bankName);\n      const accountNumber = transactionData[0].Account_Number;\n      const summary = calculateSummary(transactionData);\n      const statementPeriod = getStatementPeriod(transactionData);\n      const transactionRows = generateTransactionRows(transactionData);\n      \n      const primaryColor = bankInfo.branding?.primary_color || '#334155';\n      const secondaryColor = bankInfo.branding?.secondary_color || '#0F172A';\n      \n      return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Bank Statement - ${bankInfo.name}</title>\n  <style>\n    :root{\n      --background: #ffffff;\n      --text: #1e293b;\n      --primary: ${primaryColor};\n      --border: #e2e8f0;\n      --muted: #64748b;\n      --header-text: ${secondaryColor};\n      --table-head: ${primaryColor};\n      --table-head-text: #ffffff;\n      --row-alt: #f8fafc;\n      --statement-bg: #ffffff;\n      --account-info-bg: #f1f5f9;\n      --withdrawal: #dc2626;\n      --deposit: #16a34a;\n      --balance: ${secondaryColor};\n      --footer-text: #64748b;\n      --logo-bg: ${primaryColor};\n    }\n\n    body{ font-family: ${bankInfo.branding?.font_family || 'Arial'}, sans-serif; max-width: 900px; margin:0 auto; padding:20px; background:var(--background); color:var(--text); }\n    .statement{ background:var(--statement-bg); padding:30px; border:1px solid var(--border); box-shadow:0 2px 5px rgba(0,0,0,.1); }\n\n    .header{ display:flex; align-items:center; margin-bottom:24px; border-bottom:2px solid var(--primary); padding-bottom:16px; }\n    .logo{ width: 60px; height: 60px; background:var(--logo-bg); border-radius:6px; margin-right:16px; display:flex; align-items:center; justify-content:center; color:white; font-weight:bold; font-size:18px;\n      background-image:url('${bankInfo.branding?.logo_url || ''}'); background-size:cover; background-position:center; }\n    .bank-info h1{ margin:0; font-size:24px; color:var(--header-text); }\n    .bank-info p{ margin:6px 0 0; color:var(--muted); font-size:13px; }\n\n    .account-info{ display:flex; justify-content:space-between; gap:16px; margin:18px 0; background:var(--account-info-bg); padding:14px; border-radius:6px; }\n    .account-details h3{ margin:0 0 8px; color:var(--header-text);}\n    .account-details p{ margin:4px 0; }\n    .statement-period{ text-align:right; font-size:14px; }\n    .statement-period p{ margin:4px 0; }\n\n    .summary{ display:grid; grid-template-columns: repeat(2,1fr); gap:12px; border:1px solid var(--border); border-radius:6px; padding:12px; margin:18px 0 6px; }\n    .summary h4{ grid-column:1/-1; margin:0 0 8px; color:var(--header-text);}\n    .kv{ display:flex; justify-content:space-between; border-bottom:1px dashed var(--border); padding:6px 0; }\n    .kv:last-child{ border-bottom:none; }\n\n    .transactions-table{ width:100%; border-collapse:collapse; margin:18px 0; font-size:14px; }\n    .transactions-table th{ background:var(--table-head); color:var(--table-head-text); border:1px solid var(--border); padding:10px; text-align:left; }\n    .transactions-table td{ border:1px solid var(--border); padding:10px; vertical-align:top; }\n    .transactions-table tr:nth-child(even){ background:var(--row-alt); }\n    .amount{ text-align:right; font-family:monospace; }\n    .withdrawal{ color:var(--withdrawal); }\n    .deposit{ color:var(--deposit); }\n    .balance{ font-weight:bold; color:var(--balance); }\n\n    .notes{ margin-top:16px; padding:12px; border:1px solid var(--border); border-radius:6px; }\n    .notes h4{ margin:0 0 8px; color:var(--header-text); }\n\n    .footer{ margin-top:24px; padding-top:12px; border-top:1px solid var(--border); color:var(--footer-text); font-size:12px; }\n  </style>\n</head>\n<body>\n  <div class=\"statement\">\n\n    <!-- HEADER -->\n    <div class=\"header\">\n      <div class=\"logo\">${bankInfo.branding?.logo_url ? '' : bankInfo.name.charAt(0)}</div>\n      <div class=\"bank-info\">\n        <h1>${bankInfo.name}</h1>\n        <p>${bankInfo.address}</p>\n      </div>\n    </div>\n\n    <!-- ACCOUNT + PERIOD -->\n    <div class=\"account-info\">\n      <div class=\"account-details\">\n        <h3>${companyData.company_name || 'Account Holder'}</h3>\n        <p>${companyData.region || 'Address not available'}</p>\n        <p><strong>Account Number:</strong> ${accountNumber}</p>\n        <p><strong>Account Type:</strong> Business Checking</p>\n      </div>\n      <div class=\"statement-period\">\n        <p><strong>Statement Period:</strong></p>\n        <p><strong>${statementPeriod.from} through ${statementPeriod.to}</strong></p>\n      </div>\n    </div>\n\n    <!-- SUMMARY -->\n    <div class=\"summary\">\n      <h4>Statement Summary</h4>\n      <div class=\"kv\"><span>Opening / Beginning / Previous Balance</span><span class=\"amount\">${summary.opening_balance}</span></div>\n      <div class=\"kv\"><span>Closing / Ending Balance</span><span class=\"amount balance\">${summary.closing_balance}</span></div>\n      <div class=\"kv\"><span>Deposit / Credit Totals</span><span class=\"amount deposit\">${summary.deposit_totals}</span></div>\n      <div class=\"kv\"><span>Withdrawal / Debit Totals</span><span class=\"amount withdrawal\">${summary.withdrawal_totals}</span></div>\n      <div class=\"kv\"><span>Fees Charged (Total)</span><span class=\"amount\">${summary.fees_total}</span></div>\n      <div class=\"kv\"><span>Interest Earned (Total)</span><span class=\"amount\">${summary.interest_earned}</span></div>\n      <div class=\"kv\"><span>Interest Paid (Total)</span><span class=\"amount\">${summary.interest_paid}</span></div>\n    </div>\n\n    <!-- TRANSACTIONS -->\n    <table class=\"transactions-table\">\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Transaction No.</th>\n          <th>Description</th>\n          <th>Debit</th>\n          <th>Credit</th>\n          <th>Fees</th>\n          <th>Interest</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        ${transactionRows}\n      </tbody>\n    </table>\n\n    <!-- NOTES -->\n    <div class=\"notes\">\n      <h4>Important Information</h4>\n      <p>This statement reflects all transactions for the specified period. Please review all transactions and report any discrepancies within 30 days.</p>\n      <h4>Contact Information</h4>\n      <p>For questions about your account, please contact ${bankInfo.name} customer service.</p>\n    </div>\n\n    <div class=\"footer\">\n      <p>Generated on ${new Date().toLocaleDateString()} | ${bankInfo.name} | Member FDIC</p>\n    </div>\n  </div>\n</body>\n</html>`;\n    }\n\n    // Generate and display the bank statement\n    function renderStatement() {\n      const container = document.getElementById('statement-container');\n      const generatedHTML = generateBankStatement(TRANSACTION_DATA, COMPANY_DATA);\n      \n      // Create a new document with the generated HTML\n      const newDoc = document.implementation.createHTMLDocument('Bank Statement');\n      newDoc.documentElement.innerHTML = generatedHTML.replace('<!DOCTYPE html><html lang=\"en\">', '').replace('</html>', '');\n      \n      // Replace current document content\n      container.innerHTML = generatedHTML;\n    }\n\n    // Download function\n    window.downloadStatement = function() {\n      const html = generateBankStatement(TRANSACTION_DATA, COMPANY_DATA);\n      const blob = new Blob([html], { type: 'text/html' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `bank_statement_${TRANSACTION_DATA[0]?.Account_Number || 'download'}.html`;\n      a.click();\n      URL.revokeObjectURL(url);\n    };\n\n    // Expose functions for external use\n    window.generateBankStatementHTML = generateBankStatement;\n    window.setTransactionData = function(newTransactionData) {\n      TRANSACTION_DATA.length = 0;\n      TRANSACTION_DATA.push(...newTransactionData);\n      renderStatement();\n    };\n    window.setCompanyData = function(newCompanyData) {\n      Object.assign(COMPANY_DATA, newCompanyData);\n      renderStatement();\n    };\n\n    // Generate statement when page loads\n    document.addEventListener('DOMContentLoaded', renderStatement);\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -80,
        1680
      ],
      "id": "ffbe5cfe-6a63-4323-919d-200b15b3529a",
      "name": "Edit Fields19"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Bank_statement_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        144,
        1680
      ],
      "id": "1101303f-a4cc-48eb-b3dd-2829a7ae04ad",
      "name": "Convert to File3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Wire Transfer</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: #f9fafb;\n      color: #1e293b;\n    }\n    .wire-transfer {\n      background: #ffffff;\n      border: 1px solid #cbd5e1;\n      padding: 30px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      border-radius: 8px;\n    }\n    .header {\n      display: flex;\n      align-items: center;\n      margin-bottom: 30px;\n      border-bottom: 2px solid #334155;\n      padding-bottom: 20px;\n      gap: 15px;\n    }\n    .logo {\n      width: 80px;\n      height: 40px;\n      background: #f1f5f9;\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #334155;\n      font-weight: bold;\n      background-size: cover;\n      background-position: center;\n      flex: 0 0 auto;\n    }\n    .bank-info h1 {\n      margin: 0;\n      font-size: 24px;\n      color: #0f172a;\n    }\n    .bank-info p {\n      margin: 5px 0 0 0;\n      color: #64748b;\n      font-size: 14px;\n    }\n    .transfer-title {\n      text-align: center;\n      background: #334155;\n      color: #ffffff;\n      padding: 15px;\n      margin: 20px 0;\n      border-radius: 5px;\n      font-size: 22px;\n      font-weight: bold;\n      letter-spacing: 1px;\n    }\n\n    .parties {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      margin: 20px 0;\n    }\n    .panel {\n      background: #f8fafc;\n      padding: 16px;\n      border-radius: 8px;\n      border: 1px solid #e2e8f0;\n    }\n    .panel h3 {\n      margin: 0 0 12px 0;\n      color: #0f172a;\n      font-size: 16px;\n    }\n    .row {\n      display: flex;\n      justify-content: space-between;\n      gap: 16px;\n      padding: 6px 0;\n      border-bottom: 1px dotted #e2e8f0;\n    }\n    .row:last-child { border-bottom: none; }\n    .label { font-weight: bold; color: #374151; }\n    .value { color: #1f2937; font-family: monospace; }\n\n    .summary-section {\n      background: #f8fafc;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 20px 0;\n      border-left: 4px solid #3b82f6;\n    }\n    .summary-section h3 {\n      margin: 0 0 12px 0;\n      color: #0f172a;\n    }\n    .summary-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 20px;\n      margin-top: 15px;\n    }\n    .summary-item {\n      text-align: center;\n      padding: 10px;\n      background: #ffffff;\n      border-radius: 6px;\n      border: 1px solid #e2e8f0;\n    }\n    .summary-item .label {\n      font-size: 14px;\n      color: #64748b;\n      margin-bottom: 5px;\n    }\n    .summary-item .value {\n      font-size: 18px;\n      font-weight: bold;\n      color: #059669;\n    }\n\n    .transaction-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 20px 0;\n      background: #ffffff;\n    }\n    .transaction-table th {\n      background: #f1f5f9;\n      border: 1px solid #d1d5db;\n      padding: 12px 8px;\n      text-align: left;\n      font-weight: bold;\n      color: #374151;\n      font-size: 14px;\n    }\n    .transaction-table td {\n      border: 1px solid #d1d5db;\n      padding: 12px 8px;\n      color: #1f2937;\n      font-size: 13px;\n    }\n    .transaction-table tr:nth-child(even) {\n      background: #f9fafb;\n    }\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n      color: #059669;\n    }\n\n    .confirmation {\n      background: #ecfdf5;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 30px 0;\n      text-align: center;\n      border: 2px solid #10b981;\n    }\n    .confirmation h3 {\n      margin: 0 0 10px 0;\n      color: #065f46;\n    }\n\n    .footer {\n      margin-top: 30px;\n      padding-top: 15px;\n      border-top: 1px solid #e5e7eb;\n      color: #6b7280;\n      font-size: 12px;\n      text-align: center;\n    }\n\n    @media print {\n      body { max-width: none; background-color: white; }\n      .wire-transfer { box-shadow: none; }\n    }\n\n    @media (max-width: 768px) {\n      .parties {\n        grid-template-columns: 1fr;\n      }\n      .transaction-table {\n        font-size: 12px;\n      }\n      .transaction-table th,\n      .transaction-table td {\n        padding: 8px 4px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wire-transfer\">\n    <div class=\"header\">\n      <div class=\"logo\">BANK</div>\n      <div class=\"bank-info\">\n        <h1>Wire Transfer Report</h1>\n        <p>Transaction Summary and Details</p>\n      </div>\n    </div>\n\n    <div class=\"transfer-title\">\n      WIRE TRANSFER SUMMARY\n    </div>\n\n    <div class=\"parties\">\n      <div class=\"panel\">\n        <h3>Requestor Information</h3>\n        <div class=\"row\"><span class=\"label\">Name</span><span class=\"value\" id=\"requestor_name\"></span></div>\n        <div class=\"row\"><span class=\"label\">Account Number</span><span class=\"value\" id=\"requestor_account\"></span></div>\n      </div>\n\n      <div class=\"panel\">\n        <h3>Recipient Information</h3>\n        <div class=\"row\"><span class=\"label\">Name</span><span class=\"value\" id=\"recipient_name\"></span></div>\n        <div class=\"row\"><span class=\"label\">Account Number</span><span class=\"value\" id=\"recipient_account\"></span></div>\n      </div>\n    </div>\n\n    <div class=\"summary-section\">\n      <h3>Transaction Summary</h3>\n      <div class=\"summary-grid\">\n        <div class=\"summary-item\">\n          <div class=\"label\">Total Transactions</div>\n          <div class=\"value\" id=\"total_transactions\">0</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"label\">Total Amount</div>\n          <div class=\"value\" id=\"total_amount\">$0.00</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"label\">Currency</div>\n          <div class=\"value\" id=\"currency_type\">USD</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"label\">Date Range</div>\n          <div class=\"value\" id=\"date_range\">-</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"summary-section\">\n      <h3>Transaction Details</h3>\n      <table class=\"transaction-table\" id=\"transactions_table\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Reference Number</th>\n            <th>Type/Category</th>\n            <th>Requestor</th>\n            <th>Recipient</th>\n            <th>Amount</th>\n            <th>Currency</th>\n            <th>Source</th>\n          </tr>\n        </thead>\n        <tbody id=\"transactions_body\">\n          <!-- Transaction rows will be populated here -->\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"confirmation\">\n      <h3>Transfer Processing Complete</h3>\n      <p>All wire transfer transactions have been processed successfully.</p>\n    </div>\n\n    <div class=\"footer\">\n      <p>This document was generated automatically. For questions, please contact your banking representative.</p>\n    </div>\n  </div>\n\n  <script>\n    // Sample data structure - Replace with your actual JSON data\n    const transactionData = {{ $json.value.toJsonString() }};\n\n    const companyProfile = {{ $json.companyProfile.toJsonString() }};\n\n    // Function to format currency\n    function formatCurrency(amount, currency = 'USD') {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency\n      }).format(parseFloat(amount));\n    }\n\n    // Function to format date\n    function formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n\n    // Function to get date range\n    function getDateRange(transactions) {\n      if (!transactions || transactions.length === 0) return '-';\n      \n      const dates = transactions.map(t => new Date(t.Wire_Date));\n      const minDate = new Date(Math.min(...dates));\n      const maxDate = new Date(Math.max(...dates));\n      \n      if (minDate.getTime() === maxDate.getTime()) {\n        return formatDate(minDate);\n      }\n      \n      return `${formatDate(minDate)} - ${formatDate(maxDate)}`;\n    }\n\n    // Function to populate summary information\n    function populateSummary(data) {\n      if (!data || data.length === 0) return;\n\n      // Get first transaction for basic info\n      const firstTransaction = data[0];\n      \n      // Populate requestor and recipient info\n      document.getElementById('requestor_name').textContent = firstTransaction.Requestor || '';\n      document.getElementById('requestor_account').textContent = firstTransaction.Requestor_Account_Number || '';\n      document.getElementById('recipient_name').textContent = firstTransaction.Recipient || '';\n      document.getElementById('recipient_account').textContent = firstTransaction.Recipient_Account_Number || '';\n\n      // Calculate totals\n      const totalTransactions = data.length;\n      const totalAmount = data.reduce((sum, transaction) => {\n        return sum + parseFloat(transaction['Amount_(or_Total)'] || 0);\n      }, 0);\n      \n      const currency = firstTransaction.Currency || 'USD';\n      \n      // Update summary display\n      document.getElementById('total_transactions').textContent = totalTransactions;\n      document.getElementById('total_amount').textContent = formatCurrency(totalAmount, currency);\n      document.getElementById('currency_type').textContent = currency;\n      document.getElementById('date_range').textContent = getDateRange(data);\n    }\n\n    // Function to populate transactions table\n    function populateTransactionsTable(data) {\n      const tbody = document.getElementById('transactions_body');\n      tbody.innerHTML = '';\n\n      if (!data || data.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"8\" style=\"text-align: center; color: #64748b;\">No transactions found</td></tr>';\n        return;\n      }\n\n      data.forEach(transaction => {\n        const row = document.createElement('tr');\n        \n        row.innerHTML = `\n          <td>${formatDate(transaction.Wire_Date || '')}</td>\n          <td style=\"font-family: monospace;\">${transaction['Transaction_(or_Reference)_Number'] || ''}</td>\n          <td>${transaction['Transaction_Type_(or_Category)'] || ''}</td>\n          <td>${transaction.Requestor || ''}</td>\n          <td>${transaction.Recipient || ''}</td>\n          <td class=\"amount\">${formatCurrency(transaction['Amount_(or_Total)'] || 0, transaction.Currency)}</td>\n          <td>${transaction.Currency || ''}</td>\n          <td>${transaction.Source || ''}</td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n    }\n\n    // Function to populate the template with JSON data\n    function populateTemplate() {\n      // Use transactionData for the main data, companyProfile could be used for additional company info\n      const dataToUse = transactionData.length > 0 ? transactionData : companyProfile;\n      \n      populateSummary(dataToUse);\n      populateTransactionsTable(dataToUse);\n    }\n\n    // Function to update data externally (for when you replace the sample data)\n    function updateWithNewData(newTransactionData, newCompanyProfile = null) {\n      // Update global variables\n      transactionData.length = 0;\n      transactionData.push(...newTransactionData);\n      \n      if (newCompanyProfile) {\n        companyProfile.length = 0;\n        companyProfile.push(...newCompanyProfile);\n      }\n      \n      // Repopulate template\n      populateTemplate();\n    }\n\n    // Populate the template when page loads\n    document.addEventListener('DOMContentLoaded', populateTemplate);\n\n    // Make updateWithNewData available globally for external use\n    window.updateWireTransferData = updateWithNewData;\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        1504
      ],
      "id": "3393fd9d-0e98-4a1d-9d7d-14a67d95e26f",
      "name": "Edit Fields20"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Wire_Transfer_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        32,
        1504
      ],
      "id": "d69321c2-a0af-4aa7-a9a3-9dbfa2244263",
      "name": "Convert to File16"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice (Goods)</title>\n  <style>\n    body { \n      font-family: Arial, sans-serif; \n      max-width: 800px; \n      margin: 0 auto; \n      padding: 20px; \n      background: #ffffff;\n      color: #333;\n      line-height: 1.4;\n    }\n    @media print {\n      body { background: white; }\n    }\n    .document-header { \n      text-align: center; \n      font-size: 28px; \n      font-weight: bold; \n      margin-bottom: 30px; \n      color: #2c3e50;\n      text-transform: uppercase;\n    }\n    .logo { \n      max-height: 80px; \n      display: block; \n      margin: 0 auto 30px auto;\n      object-fit: contain;\n    }\n    .company-info { \n      margin-bottom: 25px; \n      padding: 15px;\n      background: #f8f9fa;\n      border-left: 4px solid #3498db;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: #2c3e50;\n      font-size: 22px;\n    }\n    .company-info p {\n      margin: 5px 0;\n      color: #555;\n    }\n    .meta-grid { \n      display: grid; \n      grid-template-columns: 1fr 1fr; \n      gap: 20px; \n      margin-bottom: 25px; \n      background: #f8f9fa;\n      padding: 20px;\n      border-radius: 5px;\n    }\n    .meta-section h3 {\n      margin: 0 0 15px 0;\n      color: #2c3e50;\n      border-bottom: 2px solid #3498db;\n      padding-bottom: 5px;\n    }\n    .meta-section p {\n      margin: 8px 0;\n      display: flex;\n      justify-content: space-between;\n    }\n    .meta-section strong {\n      color: #2c3e50;\n      min-width: 140px;\n    }\n    .customer-section {\n      margin-bottom: 25px;\n      padding: 15px;\n      background: #f8f9fa;\n      border-left: 4px solid #e74c3c;\n    }\n    .customer-section h3 {\n      margin: 0 0 15px 0;\n      color: #2c3e50;\n    }\n    .items-table { \n      width: 100%; \n      border-collapse: collapse; \n      margin-bottom: 25px; \n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    }\n    .items-table th, .items-table td { \n      border: 1px solid #ddd; \n      padding: 12px; \n      text-align: left; \n    }\n    .items-table th { \n      background: #34495e; \n      color: white;\n      font-weight: bold;\n      text-transform: uppercase;\n      font-size: 12px;\n    }\n    .items-table tr:nth-child(even) {\n      background: #f8f9fa;\n    }\n    .items-table tr:hover {\n      background: #e8f4fd;\n    }\n    .total-section { \n      text-align: right; \n      margin-top: 30px;\n      padding: 20px;\n      background: #f8f9fa;\n      border-radius: 5px;\n    }\n    .total-section p {\n      margin: 8px 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .total-section strong {\n      color: #2c3e50;\n      min-width: 150px;\n      text-align: left;\n    }\n    .final-total { \n      font-size: 20px; \n      font-weight: bold; \n      margin-top: 15px;\n      padding-top: 15px;\n      border-top: 2px solid #3498db;\n      color: #2c3e50;\n    }\n    .currency {\n      font-weight: bold;\n      color: #27ae60;\n    }\n    .notes-section {\n      margin-top: 30px;\n      padding: 15px;\n      background: #fff3cd;\n      border-left: 4px solid #ffc107;\n    }\n    .notes-section h4 {\n      margin: 0 0 10px 0;\n      color: #856404;\n    }\n  </style>\n</head>\n<body>\n  <!-- Logo placeholder -->\n  <img src=\"\" alt=\"Company Logo\" class=\"logo\" id=\"company_logo\" style=\"display: none;\" />\n  \n  <div class=\"document\">\n    <div class=\"document-header\" id=\"document_header\">INVOICE (GOODS)</div>\n\n    <!-- Company/Supplier Info -->\n    <div class=\"company-info\" id=\"company_section\">\n      <h2 id=\"company_name\"></h2>\n      <p id=\"company_address\"></p>\n      <p id=\"company_contact\"></p>\n      <p id=\"company_details\"></p>\n    </div>\n\n    <!-- Document Meta Information -->\n    <div class=\"meta-grid\" id=\"meta_section\">\n      <div class=\"meta-section\">\n        <h3>Document Details</h3>\n        <div id=\"document_meta\"></div>\n      </div>\n      <div class=\"meta-section\">\n        <h3>Additional Information</h3>\n        <div id=\"additional_meta\"></div>\n      </div>\n    </div>\n\n    <!-- Recipient/Customer Info -->\n    <div class=\"customer-section\" id=\"recipient_section\">\n      <h3 id=\"recipient_label\">Bill To:</h3>\n      <div id=\"recipient_details\"></div>\n    </div>\n\n    <!-- Items/Transactions Table -->\n    <table class=\"items-table\" id=\"items_table\" style=\"display: none;\">\n      <thead id=\"table_header\"></thead>\n      <tbody id=\"table_body\"></tbody>\n    </table>\n\n    <!-- Totals/Summary -->\n    <div class=\"total-section\" id=\"totals_section\" style=\"display: none;\">\n      <div id=\"totals_content\"></div>\n    </div>\n\n    <!-- Notes/Additional Information -->\n    <div class=\"notes-section\" id=\"notes_section\" style=\"display: none;\">\n      <h4>Notes:</h4>\n      <div id=\"notes_content\"></div>\n    </div>\n  </div>\n\n  <script>\n    // Sample data for testing - replace with your actual data\n    const INVOICE_DATA ={{ $json.value.toJsonString() }} ;\n\n    const COMPANY_DATA = {{ $json.companyProfile.toJsonString() }};\n    \n    function formatCurrency(amount, currency = 'USD') {\n      if (amount === null || amount === undefined || amount === '') return '';\n      \n      const numAmount = parseFloat(amount);\n      if (isNaN(numAmount)) return amount;\n      \n      if (currency === 'USD' || currency === '$' || !currency) {\n        return '$' + numAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n      }\n      \n      return currency + ' ' + numAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n    }\n    \n    function formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('en-US');\n    }\n\n    function findVendorByName(companyData, vendorName) {\n      if (!companyData.vendors) return null;\n      return companyData.vendors.find(vendor => \n        vendor.name.toLowerCase() === vendorName.toLowerCase()\n      );\n    }\n    \n    function populateTemplate(invoiceData, companyData) {\n      if (!invoiceData || !Array.isArray(invoiceData) || invoiceData.length === 0) {\n        console.error('Invalid invoice data provided');\n        return;\n      }\n\n      if (!companyData) {\n        console.error('No company data provided');\n        return;\n      }\n\n      const invoice = invoiceData[0]; // Take the first invoice item\n      \n      // Set company logo\n      if (companyData.branding && companyData.branding.logo_url) {\n        const logo = document.getElementById('company_logo');\n        logo.src = companyData.branding.logo_url;\n        logo.style.display = 'block';\n      }\n      \n      // Populate company info (Bill From)\n      document.getElementById('company_name').textContent = companyData.company_name || '';\n      \n      // Find the vendor that matches the supplier name\n      const vendor = findVendorByName(companyData, invoice.Supplier_Name);\n      if (vendor) {\n        document.getElementById('company_address').textContent = vendor.address || '';\n        document.getElementById('company_contact').textContent = vendor.name || '';\n        document.getElementById('company_details').textContent = `Industry: ${vendor.industry || 'N/A'}`;\n      }\n      \n      // Populate document meta information\n      const docMeta = document.getElementById('document_meta');\n      const addMeta = document.getElementById('additional_meta');\n      \n      docMeta.innerHTML = '';\n      addMeta.innerHTML = '';\n      \n      // Document details (left column)\n      const docDetails = [\n        { label: 'Invoice Number', value: invoice.Invoice_Number },\n        { label: 'Invoice Date', value: formatDate(invoice.Date_of_Invoice) },\n        { label: 'Purchase Order', value: invoice.Purchase_Order_Number }\n      ];\n\n      docDetails.forEach(detail => {\n        if (detail.value) {\n          const p = document.createElement('p');\n          p.innerHTML = `<strong>${detail.label}:</strong> <span>${detail.value}</span>`;\n          docMeta.appendChild(p);\n        }\n      });\n\n      // Additional information (right column)\n      const addDetails = [\n        { label: 'Delivery Date', value: formatDate(invoice['Delivery_/_Completion_Date']) },\n        { label: 'Currency', value: invoice.Currency_Unit },\n        { label: 'Source', value: invoice.Source }\n      ];\n\n      addDetails.forEach(detail => {\n        if (detail.value) {\n          const p = document.createElement('p');\n          p.innerHTML = `<strong>${detail.label}:</strong> <span>${detail.value}</span>`;\n          addMeta.appendChild(p);\n        }\n      });\n      \n      // Populate recipient info (Bill To - Company receiving the invoice)\n      const recipientDetails = document.getElementById('recipient_details');\n      recipientDetails.innerHTML = '';\n      \n      const companyInfo = document.createElement('p');\n      companyInfo.innerHTML = `<strong>${companyData.company_name}</strong>`;\n      recipientDetails.appendChild(companyInfo);\n\n      if (companyData.business_context && companyData.business_context.description) {\n        const desc = document.createElement('p');\n        desc.textContent = companyData.business_context.description;\n        recipientDetails.appendChild(desc);\n      }\n\n      const region = document.createElement('p');\n      region.innerHTML = `<strong>Region:</strong> ${companyData.region || 'N/A'}`;\n      recipientDetails.appendChild(region);\n      \n      // Create items table\n      const table = document.getElementById('items_table');\n      const header = document.getElementById('table_header');\n      const body = document.getElementById('table_body');\n      \n      header.innerHTML = '';\n      body.innerHTML = '';\n      table.style.display = 'table';\n      \n      // Create header row\n      const headerRow = document.createElement('tr');\n      const headers = ['Description', 'Quantity', 'Unit Price', 'Total Amount'];\n      headers.forEach(headerText => {\n        const th = document.createElement('th');\n        th.textContent = headerText;\n        headerRow.appendChild(th);\n      });\n      header.appendChild(headerRow);\n      \n      // Create data row\n      const row = document.createElement('tr');\n      \n      // Description\n      const descTd = document.createElement('td');\n      descTd.textContent = invoice.Product_Description || '';\n      row.appendChild(descTd);\n      \n      // Quantity\n      const qtyTd = document.createElement('td');\n      qtyTd.textContent = invoice.Item_Quantity || '';\n      row.appendChild(qtyTd);\n      \n      // Unit Price\n      const priceTd = document.createElement('td');\n      priceTd.innerHTML = `<span class=\"currency\">${formatCurrency(invoice.Item_Price, invoice.Currency_Unit)}</span>`;\n      row.appendChild(priceTd);\n      \n      // Total Amount\n      const totalTd = document.createElement('td');\n      const lineTotal = parseFloat(invoice.Item_Price) * parseFloat(invoice.Item_Quantity);\n      totalTd.innerHTML = `<span class=\"currency\">${formatCurrency(lineTotal, invoice.Currency_Unit)}</span>`;\n      row.appendChild(totalTd);\n      \n      body.appendChild(row);\n      \n      // Handle totals\n      const totalsSection = document.getElementById('totals_section');\n      const totalsContent = document.getElementById('totals_content');\n      \n      totalsContent.innerHTML = '';\n      totalsSection.style.display = 'block';\n      \n      // Subtotal\n      const subtotalP = document.createElement('p');\n      subtotalP.innerHTML = `<strong>Subtotal:</strong> <span class=\"currency\">${formatCurrency(lineTotal, invoice.Currency_Unit)}</span>`;\n      totalsContent.appendChild(subtotalP);\n      \n      // Total Amount Due\n      const totalP = document.createElement('p');\n      totalP.className = 'final-total';\n      totalP.innerHTML = `<strong>Total Amount Due:</strong> <span class=\"currency\">${formatCurrency(invoice.Total_Amount_Due, invoice.Currency_Unit)}</span>`;\n      totalsContent.appendChild(totalP);\n      \n      // Add notes section with vendor information\n      const notesSection = document.getElementById('notes_section');\n      const notesContent = document.getElementById('notes_content');\n      \n      if (vendor) {\n        notesSection.style.display = 'block';\n        notesContent.innerHTML = '';\n        \n        const vendorNote = document.createElement('p');\n        vendorNote.textContent = `Vendor Tags: ${vendor.tags.join(', ')}`;\n        notesContent.appendChild(vendorNote);\n        \n        const industryNote = document.createElement('p');\n        industryNote.textContent = `Vendor Industry: ${vendor.industry}`;\n        notesContent.appendChild(industryNote);\n      }\n    }\n    \n    // Initialize template with data\n    populateTemplate(INVOICE_DATA, COMPANY_DATA);\n    \n    // Function to update template with new data (for external use)\n    window.updateTemplate = function(invoiceData, companyData) {\n      populateTemplate(invoiceData, companyData);\n    };\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -64,
        1904
      ],
      "id": "5b233eb4-4278-4b8a-bda1-9bd1ddb2fcb9",
      "name": "Edit Fields21"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Invoice_Goods_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        144,
        1904
      ],
      "id": "6b0d37d7-3d84-4c84-8917-a77a90ddb859",
      "name": "Convert to File15"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Expenses Sub-Ledger</title>\n  <style>\n    /* Force landscape on print/PDF */\n    @page { size: A4 landscape; margin: 14mm; }\n    @media print { \n      body { -webkit-print-color-adjust: exact; }\n    }\n\n    *, *::before, *::after { box-sizing: border-box; }\n\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 100%;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: #ffffff;\n      color: #000000;\n      font-size: 12px;\n    }\n\n    .ledger {\n      background: #ffffff;\n      border: 2px solid #000000;\n      padding: 0;\n    }\n\n    .ledger-header {\n      background: #ffffff;\n      color: #000000;\n      padding: 15px;\n      text-align: center;\n      font-size: 18px;\n      font-weight: bold;\n      border-bottom: 2px solid #000000;\n    }\n\n    .company-section {\n      padding: 15px;\n      border-bottom: 2px solid #000000;\n    }\n\n    .company-info {\n      display: flex;\n      align-items: flex-start;\n      gap: 20px;\n      margin-bottom: 15px;\n    }\n\n    .company-info h2 {\n      margin: 0 0 5px 0;\n      color: #000000;\n      font-size: 16px;\n      font-weight: bold;\n    }\n\n    .company-info p { \n      margin: 2px 0; \n      color: #000000;\n      font-size: 11px;\n    }\n\n    .logo {\n      width: 80px;\n      height: 35px;\n      background: transparent;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border: 1px solid #000000;\n      font-weight: bold;\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n      flex-shrink: 0;\n    }\n\n    .customer-info {\n      margin-top: 20px;\n    }\n\n    .customer-info p {\n      margin: 8px 0;\n      font-weight: bold;\n      color: #000000;\n    }\n\n    /* Main Transaction Table */\n    .transaction-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 0;\n      font-size: 11px;\n    }\n\n    .transaction-table th,\n    .transaction-table td {\n      border: 1px solid #000000;\n      padding: 8px 6px;\n      text-align: left;\n      vertical-align: top;\n    }\n\n    .transaction-table th {\n      background: #ffffff;\n      color: #000000;\n      font-weight: bold;\n      text-align: center;\n    }\n\n    .transaction-table td {\n      background: #ffffff;\n      color: #000000;\n    }\n\n    .amount-cell {\n      text-align: right;\n      font-family: monospace;\n    }\n\n    .center-cell {\n      text-align: center;\n    }\n\n    /* Summary sections */\n    .summary-section {\n      padding: 15px;\n      border-top: 2px solid #000000;\n    }\n\n    .summary-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 10px 0;\n      font-size: 11px;\n    }\n\n    .summary-table th,\n    .summary-table td {\n      border: 1px solid #000000;\n      padding: 6px;\n      text-align: left;\n    }\n\n    .summary-table th {\n      background: #ffffff;\n      font-weight: bold;\n    }\n\n    .summary-title {\n      font-weight: bold;\n      font-size: 14px;\n      margin: 15px 0 5px 0;\n      color: #000000;\n    }\n\n    .totals-section {\n      margin-top: 20px;\n      padding: 10px;\n      border: 1px solid #000000;\n    }\n\n    .total-row {\n      display: flex;\n      justify-content: space-between;\n      margin: 5px 0;\n      font-size: 12px;\n    }\n\n    .final-total {\n      font-weight: bold;\n      font-size: 14px;\n      border-top: 1px solid #000000;\n      padding-top: 5px;\n      margin-top: 10px;\n    }\n\n    .notes-section {\n      margin-top: 15px;\n      padding: 10px;\n      border: 1px solid #000000;\n      background: #f9f9f9;\n    }\n  </style>\n  <script>\n    // Sample data - replace these with your actual JSON data\n    const transactionData = {{ $json.value.toJsonString() }};\n\n    const companyData = {{ $json.companyProfile.toJsonString() }};\n    \n    function populateTemplate() {\n      // Helper function to safely get value or return empty string/default\n      function safeValue(value, defaultValue = '') {\n        return (value !== null && value !== undefined && value !== '') ? value : defaultValue;\n      }\n\n      // Helper function to format currency\n      function formatCurrency(amount) {\n        if (!amount || amount === '') return 'USD 0.00';\n        const num = parseFloat(amount);\n        return isNaN(num) ? 'USD 0.00' : `USD ${num.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n      }\n\n      // Helper function to format date\n      function formatDate(dateStr) {\n        if (!dateStr) return '';\n        const date = new Date(dateStr);\n        return date.toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n      }\n\n      // Populate company info\n      document.getElementById('company-name').textContent = safeValue(companyData.company_name);\n      document.getElementById('company-address').textContent = safeValue(companyData.region);\n      document.getElementById('company-phone').textContent = safeValue(companyData.business_context?.regulatory_environment);\n      document.getElementById('company-email').textContent = safeValue(companyData.industry);\n\n      // Handle logo URL\n      const logoElement = document.querySelector('.logo');\n      if (logoElement && companyData.branding?.logo_url) {\n        logoElement.style.backgroundImage = `url('${companyData.branding.logo_url}')`;\n      }\n\n      // Populate customer info (using company data)\n      document.getElementById('customer-name').textContent = safeValue(companyData.company_name);\n      document.getElementById('customer-address').textContent = safeValue(companyData.region);\n      document.getElementById('customer-city').textContent = safeValue(companyData.business_context?.geographic_footprint?.[0]);\n      document.getElementById('customer-phone').textContent = 'Not Available';\n      document.getElementById('customer-email').textContent = safeValue(companyData.industry + '@' + companyData.company_name?.toLowerCase().replace(/\\s+/g, '') + '.com');\n\n      // Populate main transaction table\n      let transactionRows = '';\n      let runningBalance = 0;\n      \n      transactionData.forEach(item => {\n        const amount = parseFloat(item.Transaction_Amount) || 0;\n        runningBalance += amount;\n        \n        transactionRows += `\n          <tr>\n            <td>${formatDate(item.Date_of_Transaction)}</td>\n            <td class=\"center-cell\">${safeValue(item.Transaction_Number)}</td>\n            <td class=\"amount-cell\">${formatCurrency(item.Transaction_Amount)}</td>\n            <td class=\"amount-cell\"></td>\n            <td class=\"center-cell\">${safeValue(item.GL_Account_Number)}</td>\n            <td class=\"amount-cell\">${formatCurrency(runningBalance)}</td>\n          </tr>\n          <tr>\n            <td colspan=\"6\" style=\"padding-left: 20px; font-style: italic; border-top: none;\">\n              ${safeValue(item.Supplier_Name)} - ${safeValue(item.Goods_or_Services_Description)}\n            </td>\n          </tr>`;\n      });\n\n      // Add empty rows for spacing\n      for (let i = 0; i < 3; i++) {\n        transactionRows += `\n          <tr>\n            <td>&nbsp;</td>\n            <td class=\"center-cell\">&nbsp;</td>\n            <td class=\"amount-cell\">&nbsp;</td>\n            <td class=\"amount-cell\">&nbsp;</td>\n            <td class=\"center-cell\">&nbsp;</td>\n            <td class=\"amount-cell\">&nbsp;</td>\n          </tr>`;\n      }\n\n      document.querySelector('.transaction-table tbody').innerHTML = transactionRows;\n\n      // Populate category summary\n      const categoryMap = new Map();\n      transactionData.forEach(item => {\n        const category = item.GL_Account_Name || 'Other';\n        const amount = parseFloat(item.Transaction_Amount) || 0;\n        if (categoryMap.has(category)) {\n          categoryMap.set(category, categoryMap.get(category) + amount);\n        } else {\n          categoryMap.set(category, amount);\n        }\n      });\n\n      let categoryRows = '';\n      categoryMap.forEach((amount, category) => {\n        categoryRows += `\n          <tr>\n            <td>${category}</td>\n            <td class=\"amount-cell\">${formatCurrency(amount)}</td>\n            <td class=\"amount-cell\">USD 0.00</td>\n            <td class=\"amount-cell\">${formatCurrency(amount)}</td>\n          </tr>`;\n      });\n      document.querySelector('#category-summary tbody').innerHTML = categoryRows;\n\n      // Populate account summary\n      const accountMap = new Map();\n      transactionData.forEach(item => {\n        const accountNum = item.GL_Account_Number || 'N/A';\n        const accountName = item.GL_Account_Name || 'Unknown';\n        const amount = parseFloat(item.Transaction_Amount) || 0;\n        \n        if (accountMap.has(accountNum)) {\n          const existing = accountMap.get(accountNum);\n          existing.total += amount;\n        } else {\n          accountMap.set(accountNum, {\n            account_name: accountName,\n            total: amount\n          });\n        }\n      });\n\n      let accountRows = '';\n      accountMap.forEach((data, accountNum) => {\n        accountRows += `\n          <tr>\n            <td class=\"center-cell\">${accountNum}</td>\n            <td>${data.account_name}</td>\n            <td class=\"amount-cell\">${formatCurrency(data.total)}</td>\n          </tr>`;\n      });\n      document.querySelector('#account-summary tbody').innerHTML = accountRows;\n\n      // Calculate and populate totals\n      const totalAmount = transactionData.reduce((sum, item) => sum + (parseFloat(item.Transaction_Amount) || 0), 0);\n      document.getElementById('subtotal').textContent = formatCurrency(totalAmount);\n      document.getElementById('tax-total').textContent = 'USD 0.00';\n      document.getElementById('gross-total').textContent = formatCurrency(totalAmount);\n      document.getElementById('net-payable').textContent = formatCurrency(totalAmount);\n\n      // Populate notes\n      const businessModel = companyData.business_context?.business_model || '';\n      if (businessModel) {\n        document.querySelector('.notes-section').innerHTML = `<strong>Business Notes:</strong> ${businessModel}`;\n      }\n    }\n    \n    // Auto-populate when page loads\n    window.addEventListener('DOMContentLoaded', populateTemplate);\n  </script>\n</head>\n<body>\n  <div class=\"ledger\">\n    <div class=\"ledger-header\">EXPENSES SUB-LEDGER</div>\n\n    <!-- Company Section -->\n    <div class=\"company-section\">\n      <div class=\"company-info\">\n        <div class=\"logo\">LOGO</div>\n        <div>\n          <h2 id=\"company-name\"></h2>\n          <p id=\"company-address\"></p>\n          <p id=\"company-phone\"></p>\n          <p id=\"company-email\"></p>\n        </div>\n      </div>\n\n      <div class=\"customer-info\">\n        <p><strong>Customer Name:</strong> <span id=\"customer-name\"></span></p>\n        <p><strong>Customer Address:</strong> <span id=\"customer-address\"></span></p>\n        <p><strong>Customer City/State:</strong> <span id=\"customer-city\"></span></p>\n        <p><strong>Customer Telephone Number:</strong> <span id=\"customer-phone\"></span></p>\n        <p><strong>Customer email address:</strong> <span id=\"customer-email\"></span></p>\n      </div>\n    </div>\n\n    <!-- Main Transaction Table -->\n    <table class=\"transaction-table\">\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Transaction Number</th>\n          <th>Expense Amount</th>\n          <th>Payment Amount</th>\n          <th>GL Account Reference</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        <!-- Transaction rows will be populated by JavaScript -->\n      </tbody>\n    </table>\n\n    <!-- Summary Section -->\n    <div class=\"summary-section\">\n      <div class=\"summary-title\">Category Summary</div>\n      <table class=\"summary-table\" id=\"category-summary\">\n        <thead>\n          <tr>\n            <th>Category</th>\n            <th>Pre-Tax Amount</th>\n            <th>Tax Amount</th>\n            <th>Total Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          <!-- Category rows will be populated by JavaScript -->\n        </tbody>\n      </table>\n\n      <div class=\"summary-title\">Account Summary</div>\n      <table class=\"summary-table\" id=\"account-summary\">\n        <thead>\n          <tr>\n            <th>GL Account Number</th>\n            <th>Account Name</th>\n            <th>Total Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          <!-- Account rows will be populated by JavaScript -->\n        </tbody>\n      </table>\n\n      <div class=\"totals-section\">\n        <div class=\"total-row\">\n          <span><strong>Subtotal (Pre-Tax):</strong></span>\n          <span id=\"subtotal\"></span>\n        </div>\n        <div class=\"total-row\">\n          <span><strong>Total Tax:</strong></span>\n          <span id=\"tax-total\"></span>\n        </div>\n        <div class=\"total-row final-total\">\n          <span><strong>Gross Total:</strong></span>\n          <span id=\"gross-total\"></span>\n        </div>\n        <div class=\"total-row final-total\">\n          <span><strong>Net Payable:</strong></span>\n          <span id=\"net-payable\"></span>\n        </div>\n      </div>\n\n      <div class=\"notes-section\">\n        <!-- Notes will be populated by JavaScript -->\n      </div>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -144,
        2112
      ],
      "id": "9f2e4e15-dbfc-45a7-91be-fba1a2e05c53",
      "name": "Edit Fields22"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Disbursement Listing</title>\n  <style>\n    @page {\n      size: A4 portrait;\n      margin: 20mm;\n    }\n    @media print {\n      body { background: #fff !important; }\n      .no-print { display: none !important; }\n    }\n\n    body {\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 20px;\n      background-color: white;\n      color: black;\n      font-size: 11px;\n    }\n\n    .report {\n      max-width: 100%;\n      margin: 0 auto;\n    }\n\n    .company-name {\n      text-align: center;\n      font-size: 14px;\n      font-weight: bold;\n      margin-bottom: 5px;\n    }\n\n    .report-title {\n      text-align: center;\n      font-size: 12px;\n      margin-bottom: 3px;\n    }\n\n    .report-subtitle {\n      text-align: center;\n      font-size: 11px;\n      margin-bottom: 20px;\n    }\n\n    .main-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-bottom: 10px;\n    }\n\n    .main-table th,\n    .main-table td {\n      border: 1px solid #000;\n      padding: 3px 5px;\n      font-size: 10px;\n      vertical-align: top;\n    }\n\n    .main-table th {\n      background-color: #f0f0f0;\n      font-weight: bold;\n      text-align: center;\n    }\n\n    .date-col { width: 70px; }\n    .type-col { width: 120px; }\n    .num-col { width: 40px; }\n    .name-col { width: 150px; }\n    .memo-col { width: 120px; }\n    .split-col { width: 150px; }\n    .amount-col { width: 80px; text-align: right; }\n    .balance-col { width: 80px; text-align: right; }\n\n    .section-header {\n      background-color: #e0e0e0;\n      font-weight: bold;\n      text-align: left;\n    }\n\n    .total-row {\n      font-weight: bold;\n      background-color: #f5f5f5;\n    }\n\n    .amount-positive {\n      color: black;\n    }\n\n    .amount-negative {\n      color: red;\n    }\n\n    .right-align {\n      text-align: right;\n    }\n\n    .center-align {\n      text-align: center;\n    }\n\n    .controls {\n      margin-bottom: 20px;\n      text-align: center;\n    }\n    \n    .controls button {\n      background: #333;\n      color: white;\n      border: none;\n      padding: 8px 16px;\n      margin: 0 5px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 12px;\n    }\n    \n    .controls button:hover {\n      opacity: 0.8;\n    }\n  </style>\n</head>\n<body>\n\n  <div class=\"report\">\n    <div class=\"company-name\" id=\"companyName\">Company Name</div>\n    <div class=\"report-title\">Disbursement Listing</div>\n    <div class=\"report-subtitle\">Transaction Detail by Account</div>\n    <div class=\"report-subtitle\">All Dates</div>\n\n    <table class=\"main-table\">\n      <thead>\n        <tr>\n          <th class=\"date-col\">DATE</th>\n          <th class=\"type-col\">TRANSACTION TYPE</th>\n          <th class=\"num-col\">NUM</th>\n          <th class=\"name-col\">NAME</th>\n          <th class=\"memo-col\">MEMO/DESCRIPTION</th>\n          <th class=\"split-col\">SPLIT</th>\n          <th class=\"amount-col\">AMOUNT</th>\n          <th class=\"balance-col\">BALANCE</th>\n        </tr>\n      </thead>\n      <tbody id=\"transactionTableBody\">\n        <!-- Transaction rows will be populated here -->\n      </tbody>\n    </table>\n  </div>\n\n  <script>\n    // Sample data - replace these with your actual JSON inputs\n    const transactionsData ={{ $json.value.toJsonString() }};\n\n    const companyData = {{ $json.companyProfile.toJsonString() }};\n\n    function formatCurrency(amount, showNegative = true) {\n      const num = parseFloat(amount) || 0;\n      const absNum = Math.abs(num);\n      const formatted = absNum.toLocaleString('en-US', { \n        minimumFractionDigits: 2, \n        maximumFractionDigits: 2 \n      });\n      \n      if (showNegative && num < 0) {\n        return `-${formatted}`;\n      }\n      return formatted;\n    }\n\n    function formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', { \n        month: '2-digit',\n        day: '2-digit', \n        year: 'numeric'\n      });\n    }\n\n    function getTransactionType(transaction) {\n      // Map your transaction data to appropriate types\n      if (transaction['Transaction Description'].toLowerCase().includes('payment')) {\n        return 'Bill Payment (Check)';\n      }\n      return 'Check';\n    }\n\n    function getSplitAccount(transaction) {\n      // Map to appropriate split accounts based on description\n      if (transaction['Transaction Description'].toLowerCase().includes('goods')) {\n        return 'Accounts Payable (A/P)';\n      } else if (transaction['Transaction Description'].toLowerCase().includes('service')) {\n        return 'Professional Services';\n      }\n      return 'Accounts Payable (A/P)';\n    }\n\n    function populateCompanyInfo(companyData) {\n      document.getElementById('companyName').textContent = companyData.company_name || 'Company Name';\n    }\n\n    function populateTransactions(transactions) {\n      const tbody = document.getElementById('transactionTableBody');\n      tbody.innerHTML = '';\n      \n      let runningBalance = 0;\n      let totalAmount = 0;\n\n      // Add section header for Checking account\n      const sectionRow = document.createElement('tr');\n      sectionRow.innerHTML = `\n        <td colspan=\"8\" class=\"section-header\">Checking</td>\n      `;\n      tbody.appendChild(sectionRow);\n\n      // Sort transactions by date\n      const sortedTransactions = [...transactions].sort((a, b) => \n        new Date(a.Date_of_transaction) - new Date(b.Date_of_transaction)\n      );\n\n      sortedTransactions.forEach((transaction, index) => {\n        const row = document.createElement('tr');\n        const amount = -parseFloat(transaction.Transaction_Amount) || 0; // Negative for disbursements\n        runningBalance += amount;\n        totalAmount += Math.abs(amount);\n        \n        const amountClass = amount < 0 ? 'amount-negative' : 'amount-positive';\n        const balanceClass = runningBalance < 0 ? 'amount-negative' : 'amount-positive';\n        \n        row.innerHTML = `\n          <td>${formatDate(transaction.Date_of_transaction)}</td>\n          <td>${getTransactionType(transaction)}</td>\n          <td class=\"center-align\">${transaction['Vendor Number'].split('-')[1] || (index + 1)}</td>\n          <td>${transaction['Vendor Name']}</td>\n          <td>${transaction['Transaction Description']}</td>\n          <td>${getSplitAccount(transaction)}</td>\n          <td class=\"right-align ${amountClass}\">${formatCurrency(amount)}</td>\n          <td class=\"right-align ${balanceClass}\">${formatCurrency(runningBalance)}</td>\n        `;\n        tbody.appendChild(row);\n      });\n\n      // Add total row for checking\n      const totalRow = document.createElement('tr');\n      totalRow.classList.add('total-row');\n      totalRow.innerHTML = `\n        <td colspan=\"6\"><strong>Total for Checking</strong></td>\n        <td class=\"right-align\"><strong>${formatCurrency(-totalAmount)}</strong></td>\n        <td></td>\n      `;\n      tbody.appendChild(totalRow);\n\n      // Add some spacing\n      const spacerRow = document.createElement('tr');\n      spacerRow.innerHTML = '<td colspan=\"8\" style=\"border: none; padding: 10px;\"></td>';\n      tbody.appendChild(spacerRow);\n\n      // You can add other account sections here (like Mastercard) if needed\n      // For now, just add a placeholder section\n      const mastercardRow = document.createElement('tr');\n      mastercardRow.innerHTML = `\n        <td colspan=\"8\" class=\"section-header\">Mastercard</td>\n      `;\n      tbody.appendChild(mastercardRow);\n\n      const mastercardTotalRow = document.createElement('tr');\n      mastercardTotalRow.classList.add('total-row');\n      mastercardTotalRow.innerHTML = `\n        <td colspan=\"6\"><strong>Total for Mastercard</strong></td>\n        <td class=\"right-align\"><strong>0.00</strong></td>\n        <td></td>\n      `;\n      tbody.appendChild(mastercardTotalRow);\n    }\n\n    function generateReport() {\n      // Populate company information\n      populateCompanyInfo(companyData);\n      \n      // Populate transactions\n      populateTransactions(transactionsData);\n    }\n\n    // Auto-generate report on page load\n    document.addEventListener('DOMContentLoaded', function() {\n      generateReport();\n    });\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        2304
      ],
      "id": "17be14fa-561a-4ff2-83e0-2913138b55e4",
      "name": "Edit Fields23"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice Template</title>\n  <style>\n    body { \n      font-family: Arial, sans-serif; \n      max-width: 800px; \n      margin: 0 auto; \n      padding: 20px; \n      background: #ffffff; \n      color: #000000; \n    }\n    .header-section {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 30px;\n      border-bottom: 2px solid #000;\n      padding-bottom: 20px;\n    }\n    .logo-section img {\n      max-height: 80px;\n      max-width: 200px;\n    }\n    .invoice-header { \n      text-align: right;\n      font-size: 28px; \n      font-weight: bold; \n    }\n    .company-info { \n      margin-bottom: 20px; \n      background: #f9f9f9;\n      padding: 15px;\n      border-left: 4px solid #000;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: #000;\n    }\n    .meta-grid { \n      display: grid; \n      grid-template-columns: 1fr 1fr; \n      gap: 20px; \n      margin-bottom: 20px; \n      background: #f5f5f5;\n      padding: 15px;\n    }\n    .customer-section {\n      background: #f9f9f9;\n      padding: 15px;\n      margin-bottom: 20px;\n      border: 1px solid #ddd;\n    }\n    .customer-section h3 {\n      margin: 0 0 10px 0;\n      color: #000;\n      border-bottom: 1px solid #ccc;\n      padding-bottom: 5px;\n    }\n    .items-table { \n      width: 100%; \n      border-collapse: collapse; \n      margin-bottom: 20px; \n    }\n    .items-table th, .items-table td { \n      border: 1px solid #000; \n      padding: 12px 8px; \n      text-align: left; \n    }\n    .items-table th { \n      background: #e0e0e0; \n      font-weight: bold;\n    }\n    .items-table tr:nth-child(even) {\n      background: #f9f9f9;\n    }\n    .total-section { \n      text-align: right; \n      margin-top: 20px; \n      background: #f5f5f5;\n      padding: 20px;\n      border: 1px solid #ddd;\n    }\n    .total-line {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 8px;\n      padding: 5px 0;\n    }\n    .final-total { \n      font-size: 20px; \n      font-weight: bold; \n      margin-top: 15px;\n      padding-top: 15px;\n      border-top: 2px solid #000;\n    }\n    .notes-section {\n      margin-top: 30px;\n      padding: 15px;\n      background: #f9f9f9;\n      border-left: 4px solid #000;\n    }\n    .footer-section {\n      margin-top: 30px;\n      text-align: center;\n      font-size: 12px;\n      color: #666;\n      border-top: 1px solid #ccc;\n      padding-top: 15px;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    // Sample data - replace these with your actual JSON data\n    const invoiceData = {{ $json.value.toJsonString() }};\n\n    const companyConfig = {{ $json.companyProfile.toJsonString() }};\n  </script>\n\n  <div class=\"invoice\">\n    <!-- Header with Logo and Title -->\n    <div class=\"header-section\">\n      <div class=\"logo-section\">\n        <img id=\"company_logo\" src=\"\" alt=\"Company Logo\" style=\"display: none;\" onerror=\"this.style.display='none'\" />\n      </div>\n      <div class=\"invoice-header\">INVOICE</div>\n    </div>\n\n    <!-- Company Information (Bill From) -->\n    <div class=\"company-info\">\n      <h2 id=\"company_name\">Company Name</h2>\n      <p id=\"company_address\">Company Address</p>\n      <p id=\"company_details\">Company Details</p>\n    </div>\n\n    <!-- Invoice Meta Information -->\n    <div class=\"meta-grid\">\n      <div>\n        <p><strong>Invoice #:</strong> <span id=\"invoice_number\">-</span></p>\n        <p><strong>Invoice Date:</strong> <span id=\"invoice_date\">-</span></p>\n        <p><strong>Service Date:</strong> <span id=\"service_date\">-</span></p>\n        <p><strong>Currency:</strong> <span id=\"currency_unit\">-</span></p>\n      </div>\n      <div>\n        <p><strong>Source:</strong> <span id=\"source\">-</span></p>\n        <p><strong>Payment Terms:</strong> <span id=\"payment_terms\">Net 30</span></p>\n        <p><strong>Due Date:</strong> <span id=\"due_date\">-</span></p>\n      </div>\n    </div>\n\n    <!-- Vendor/Supplier Information (Bill To) -->\n    <div class=\"customer-section\">\n      <h3>Bill To:</h3>\n      <p><strong><span id=\"supplier_name\">Supplier Name</span></strong></p>\n      <p id=\"supplier_address\">Supplier Address</p>\n      <p id=\"supplier_details\">Supplier Details</p>\n    </div>\n\n    <!-- Items Table -->\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Description</th>\n          <th>Service Date</th>\n          <th>Currency</th>\n          <th>Amount</th>\n        </tr>\n      </thead>\n      <tbody id=\"invoice_items\">\n        <tr>\n          <td colspan=\"4\" style=\"text-align: center; font-style: italic; color: #666;\">Loading invoice items...</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Totals Section -->\n    <div class=\"total-section\">\n      <div class=\"total-line final-total\">\n        <span><strong>Total Amount Due:</strong></span>\n        <span id=\"total_amount_due\">$0.00</span>\n      </div>\n    </div>\n\n    <!-- Notes Section -->\n    <div class=\"notes-section\">\n      <h4>Notes:</h4>\n      <p id=\"notes_content\">Thank you for your business!</p>\n    </div>\n\n    <!-- Footer -->\n    <div class=\"footer-section\">\n      <p>Invoice generated for <span id=\"footer_company\"></span></p>\n      <p>Region: <span id=\"footer_region\"></span></p>\n    </div>\n  </div>\n\n  <script>\n    function getCurrencySymbol(currencyCode) {\n      const currencyMap = {\n        'USD': '$',\n        'EUR': '€',\n        'GBP': '£',\n        'JPY': '¥',\n        'CAD': 'C$',\n        'AUD': 'A$'\n      };\n      return currencyMap[currencyCode] || currencyCode + ' ';\n    }\n\n    function formatCurrency(amount, currencyCode) {\n      const symbol = getCurrencySymbol(currencyCode);\n      const numAmount = parseFloat(amount) || 0;\n      return symbol + numAmount.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    }\n\n    function calculateDueDate(invoiceDate, paymentTerms = 'Net 30') {\n      const date = new Date(invoiceDate);\n      const daysToAdd = paymentTerms.includes('30') ? 30 : \n                       paymentTerms.includes('15') ? 15 : \n                       paymentTerms.includes('60') ? 60 : 30;\n      date.setDate(date.getDate() + daysToAdd);\n      return date.toISOString().split('T')[0];\n    }\n\n    function findVendorByName(vendors, name) {\n      return vendors.find(vendor => \n        vendor.name.toLowerCase().includes(name.toLowerCase()) || \n        name.toLowerCase().includes(vendor.name.toLowerCase())\n      );\n    }\n\n    function applyBranding(branding) {\n      if (!branding) return;\n\n      // Apply primary color\n      if (branding.primary_color) {\n        document.querySelectorAll('.header-section, .company-info, .notes-section').forEach(el => {\n          el.style.borderColor = branding.primary_color;\n        });\n        document.querySelectorAll('.company-info h2, .customer-section h3').forEach(el => {\n          el.style.color = branding.primary_color;\n        });\n        document.querySelectorAll('.final-total').forEach(el => {\n          el.style.borderTopColor = branding.primary_color;\n        });\n      }\n\n      // Apply secondary color (ensure it's light for readability)\n      if (branding.secondary_color) {\n        const lightSecondaryColor = branding.secondary_color === '#0F172A' ? '#f8fafc' : branding.secondary_color;\n        document.querySelectorAll('.company-info, .meta-grid, .customer-section, .total-section, .notes-section').forEach(el => {\n          el.style.backgroundColor = lightSecondaryColor;\n        });\n      }\n\n      // Apply font family\n      if (branding.font_family) {\n        document.body.style.fontFamily = `${branding.font_family}, Arial, sans-serif`;\n      }\n    }\n\n    function populateInvoice(invoiceData, companyConfig) {\n      // Use the first invoice item (assuming single invoice)\n      const invoice = invoiceData[0];\n      \n      // Apply company branding\n      applyBranding(companyConfig.branding);\n      \n      // Set company logo\n      if (companyConfig.branding && companyConfig.branding.logo_url) {\n        const logoImg = document.getElementById('company_logo');\n        logoImg.src = companyConfig.branding.logo_url;\n        logoImg.style.display = 'block';\n      }\n\n      // Company information\n      document.getElementById('company_name').textContent = companyConfig.company_name || 'Company Name';\n      document.getElementById('company_address').textContent = companyConfig.business_context?.geographic_footprint?.[0] || 'Company Address';\n      document.getElementById('company_details').textContent = `Industry: ${companyConfig.industry} | Revenue Model: ${companyConfig.revenue_model}`;\n\n      // Invoice meta information\n      document.getElementById('invoice_number').textContent = invoice.Invoice_Number || '-';\n      document.getElementById('invoice_date').textContent = invoice.Date_of_Invoice || '-';\n      document.getElementById('service_date').textContent = invoice.Service_Date || '-';\n      document.getElementById('currency_unit').textContent = invoice.Currency_Unit || '-';\n      document.getElementById('source').textContent = invoice.Source || '-';\n\n      // Calculate and set due date\n      const dueDate = calculateDueDate(invoice.Date_of_Invoice);\n      document.getElementById('due_date').textContent = dueDate;\n\n      // Find vendor information\n      const vendor = findVendorByName(companyConfig.vendors, invoice.Supplier_Name);\n      document.getElementById('supplier_name').textContent = invoice.Supplier_Name || 'Supplier Name';\n      \n      if (vendor) {\n        document.getElementById('supplier_address').textContent = vendor.address || 'Supplier Address';\n        document.getElementById('supplier_details').textContent = `Industry: ${vendor.industry} | Tags: ${vendor.tags.join(', ')}`;\n        \n        // Apply vendor branding if different from company branding\n        if (vendor.branding) {\n          // You could apply vendor-specific styling here if needed\n        }\n      } else {\n        document.getElementById('supplier_address').textContent = 'Supplier Address';\n        document.getElementById('supplier_details').textContent = 'Supplier Details';\n      }\n\n      // Payment terms\n      if (vendor && vendor.tags.includes('net30')) {\n        document.getElementById('payment_terms').textContent = 'Net 30';\n      }\n\n      // Populate items table\n      const tbody = document.getElementById('invoice_items');\n      tbody.innerHTML = ''; // Clear existing content\n      \n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td>${invoice.Product_Description || 'Service Description'}</td>\n        <td>${invoice.Service_Date || '-'}</td>\n        <td>${invoice.Currency_Unit || 'USD'}</td>\n        <td style=\"text-align: right;\">${formatCurrency(invoice.Total_Amount_Due, invoice.Currency_Unit)}</td>\n      `;\n      tbody.appendChild(row);\n\n      // Set total amount\n      document.getElementById('total_amount_due').textContent = formatCurrency(invoice.Total_Amount_Due, invoice.Currency_Unit);\n\n      // Footer information\n      document.getElementById('footer_company').textContent = companyConfig.company_name;\n      document.getElementById('footer_region').textContent = companyConfig.region;\n\n      // Notes section\n      let notes = `Payment Terms: ${vendor?.tags.includes('net30') ? 'Net 30 Days' : 'As per agreement'}`;\n      if (companyConfig.business_context?.description) {\n        notes += `\\n\\nAbout ${companyConfig.company_name}: ${companyConfig.business_context.description.substring(0, 200)}...`;\n      }\n      document.getElementById('notes_content').textContent = notes;\n    }\n\n    // Auto-populate when page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      populateInvoice(invoiceData, companyConfig);\n    });\n\n    // Function to update with new data (call this function with your actual data)\n    function updateInvoiceData(newInvoiceData, newCompanyConfig) {\n      populateInvoice(newInvoiceData, newCompanyConfig);\n    }\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        2512
      ],
      "id": "dc09e913-289b-4d2d-9470-0c943c41c8fa",
      "name": "Edit Fields24"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Purchase Contract Snippet</title>\n  <style>\n    body { \n      font-family: 'Times New Roman', serif; \n      max-width: 900px; \n      margin: 0 auto; \n      padding: 30px; \n      background: #ffffff; \n      color: #000000; \n      line-height: 1.6;\n    }\n    .contract-header {\n      text-align: center;\n      margin-bottom: 40px;\n      border-bottom: 3px solid #000;\n      padding-bottom: 20px;\n    }\n    .contract-title {\n      font-size: 24px;\n      font-weight: bold;\n      margin: 0 0 10px 0;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n    }\n    .contract-subtitle {\n      font-size: 16px;\n      color: #666;\n      margin: 0;\n    }\n    .logo-section {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .logo-section img {\n      max-height: 60px;\n      max-width: 200px;\n    }\n    .parties-section {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 30px;\n      margin-bottom: 30px;\n      background: #f9f9f9;\n      padding: 20px;\n      border: 1px solid #ddd;\n    }\n    .party-info {\n      border-left: 4px solid #000;\n      padding-left: 15px;\n    }\n    .party-info h3 {\n      margin: 0 0 10px 0;\n      font-size: 18px;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n    .party-info .company-name {\n      font-weight: bold;\n      font-size: 16px;\n      margin-bottom: 5px;\n    }\n    .contract-details {\n      background: #f5f5f5;\n      padding: 20px;\n      margin-bottom: 30px;\n      border: 1px solid #ccc;\n    }\n    .contract-details h3 {\n      margin: 0 0 15px 0;\n      font-size: 18px;\n      text-transform: uppercase;\n      border-bottom: 2px solid #000;\n      padding-bottom: 5px;\n    }\n    .detail-grid {\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr;\n      gap: 15px;\n    }\n    .detail-item {\n      background: white;\n      padding: 10px;\n      border-left: 3px solid #000;\n    }\n    .detail-item strong {\n      display: block;\n      font-size: 12px;\n      text-transform: uppercase;\n      color: #666;\n      margin-bottom: 5px;\n    }\n    .items-section {\n      margin-bottom: 30px;\n    }\n    .items-section h3 {\n      font-size: 18px;\n      text-transform: uppercase;\n      margin: 0 0 15px 0;\n      border-bottom: 2px solid #000;\n      padding-bottom: 5px;\n    }\n    .items-table { \n      width: 100%; \n      border-collapse: collapse; \n      margin-bottom: 20px;\n      font-family: 'Times New Roman', serif;\n    }\n    .items-table th, .items-table td { \n      border: 1px solid #000; \n      padding: 12px 8px; \n      text-align: left; \n      font-size: 14px;\n    }\n    .items-table th { \n      background: #e8e8e8; \n      font-weight: bold;\n      text-transform: uppercase;\n      font-size: 12px;\n      letter-spacing: 0.5px;\n    }\n    .items-table tr:nth-child(even) {\n      background: #f9f9f9;\n    }\n    .items-table td.amount {\n      text-align: right;\n      font-weight: bold;\n    }\n    .financial-summary {\n      background: #f5f5f5;\n      padding: 20px;\n      border: 2px solid #000;\n      margin-bottom: 30px;\n    }\n    .financial-summary h3 {\n      margin: 0 0 15px 0;\n      font-size: 18px;\n      text-transform: uppercase;\n      text-align: center;\n    }\n    .total-line {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 8px;\n      padding: 8px 0;\n      border-bottom: 1px dotted #999;\n    }\n    .final-total { \n      font-size: 18px; \n      font-weight: bold; \n      margin-top: 15px;\n      padding-top: 15px;\n      border-top: 2px solid #000;\n      background: #e8e8e8;\n      padding: 15px;\n      text-align: center;\n    }\n    .terms-section {\n      margin-bottom: 30px;\n      background: #f9f9f9;\n      padding: 20px;\n      border-left: 4px solid #000;\n    }\n    .terms-section h3 {\n      margin: 0 0 15px 0;\n      font-size: 18px;\n      text-transform: uppercase;\n    }\n    .terms-list {\n      counter-reset: term-counter;\n      list-style: none;\n      padding: 0;\n    }\n    .terms-list li {\n      counter-increment: term-counter;\n      margin-bottom: 12px;\n      padding-left: 30px;\n      position: relative;\n    }\n    .terms-list li::before {\n      content: counter(term-counter, decimal) \".\";\n      position: absolute;\n      left: 0;\n      font-weight: bold;\n    }\n    .signature-section {\n      margin-top: 40px;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 40px;\n      border-top: 2px solid #000;\n      padding-top: 30px;\n    }\n    .signature-block {\n      text-align: center;\n      padding: 20px;\n      border: 1px solid #ccc;\n      background: #f9f9f9;\n    }\n    .signature-block h4 {\n      margin: 0 0 30px 0;\n      font-size: 16px;\n      text-transform: uppercase;\n      border-bottom: 1px solid #999;\n      padding-bottom: 10px;\n    }\n    .signature-line {\n      border-bottom: 2px solid #000;\n      height: 40px;\n      margin-bottom: 10px;\n    }\n    .date-line {\n      border-bottom: 1px solid #000;\n      height: 25px;\n      margin: 10px auto;\n      width: 150px;\n    }\n    .footer-section {\n      margin-top: 40px;\n      text-align: center;\n      font-size: 11px;\n      color: #666;\n      border-top: 1px solid #ccc;\n      padding-top: 20px;\n      font-style: italic;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"contract\">\n    <!-- Logo Section -->\n    <div class=\"logo-section\">\n      <img id=\"company_logo\" src=\"\" alt=\"Company Logo\" style=\"display: none;\" onerror=\"this.style.display='none'\" />\n    </div>\n\n    <!-- Contract Header -->\n    <div class=\"contract-header\">\n      <h1 class=\"contract-title\">Purchase Contract Snippet</h1>\n      <p class=\"contract-subtitle\">Agreement for Goods and Services</p>\n    </div>\n\n    <!-- Parties Section -->\n    <div class=\"parties-section\">\n      <div class=\"party-info\">\n        <h3>Purchaser</h3>\n        <div class=\"company-name\" id=\"company_name\">Your Company Name</div>\n        <p id=\"company_address\">123 Business Street<br>City, State 12345</p>\n        <p><strong>Industry:</strong> <span id=\"company_industry\">-</span></p>\n        <p><strong>Entity Type:</strong> Corporation</p>\n      </div>\n      <div class=\"party-info\">\n        <h3>Vendor</h3>\n        <div class=\"company-name\" id=\"vendor_name\">Vendor Name</div>\n        <p id=\"vendor_address\">Vendor Address<br>City, State 12345</p>\n        <p><strong>Industry:</strong> <span id=\"vendor_industry\">-</span></p>\n        <p><strong>Tags:</strong> <span id=\"vendor_tags\">-</span></p>\n      </div>\n    </div>\n\n    <!-- Contract Details -->\n    <div class=\"contract-details\">\n      <h3>Contract Details</h3>\n      <div class=\"detail-grid\">\n        <div class=\"detail-item\">\n          <strong>Contract Date</strong>\n          <span id=\"contract_date\">-</span>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Total Items</strong>\n          <span id=\"total_items\">0</span>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Contract Value</strong>\n          <span id=\"contract_value\">$0.00</span>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Service Period</strong>\n          <span id=\"service_period\">-</span>\n        </div>\n        <div class=\"detail-item\">\n          <strong>File Types</strong>\n          <span id=\"file_types\">-</span>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Sources</strong>\n          <span id=\"sources\">-</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Items Section -->\n    <div class=\"items-section\">\n      <h3>Schedule of Goods and Services</h3>\n      <table class=\"items-table\">\n        <thead>\n          <tr>\n            <th>Transaction Reference</th>\n            <th>Service Period</th>\n            <th>Source</th>\n            <th>Documentation</th>\n            <th>Contract Value</th>\n          </tr>\n        </thead>\n        <tbody id=\"contract_items\">\n          <!-- Items will be populated dynamically -->\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Financial Summary -->\n    <div class=\"financial-summary\">\n      <h3>Financial Summary</h3>\n      <div class=\"total-line\">\n        <span><strong>Subtotal:</strong></span>\n        <span id=\"subtotal\">$0.00</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Applicable Taxes:</strong></span>\n        <span id=\"tax_amount\">To be determined</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Additional Fees:</strong></span>\n        <span id=\"additional_fees\">$0.00</span>\n      </div>\n      <div class=\"final-total\">\n        <strong>TOTAL CONTRACT VALUE: <span id=\"total_contract_value\">$0.00</span></strong>\n      </div>\n    </div>\n\n    <!-- Terms and Conditions -->\n    <div class=\"terms-section\">\n      <h3>Terms and Conditions</h3>\n      <ol class=\"terms-list\">\n        <li><strong>Payment Terms:</strong> Payment shall be due within thirty (30) days of invoice date unless otherwise specified in the service agreement.</li>\n        <li><strong>Delivery:</strong> All goods and services shall be delivered according to the schedule outlined in the service periods specified above.</li>\n        <li><strong>Quality Standards:</strong> All deliverables must meet industry standards and any specific requirements outlined in the technical specifications.</li>\n        <li><strong>Governing Law:</strong> This contract shall be governed by the laws of the jurisdiction where the Purchaser is located.</li>\n        <li><strong>Dispute Resolution:</strong> Any disputes arising from this contract shall be resolved through binding arbitration in accordance with commercial arbitration rules.</li>\n        <li><strong>Force Majeure:</strong> Neither party shall be liable for delays or failures in performance resulting from acts beyond their reasonable control.</li>\n        <li><strong>Confidentiality:</strong> Both parties agree to maintain confidentiality of any proprietary information disclosed during the execution of this contract.</li>\n        <li><strong>Termination:</strong> This contract may be terminated by either party with thirty (30) days written notice, subject to completion of ongoing obligations.</li>\n      </ol>\n    </div>\n\n    <!-- Signature Section -->\n    <div class=\"signature-section\">\n      <div class=\"signature-block\">\n        <h4>Purchaser Signature</h4>\n        <div class=\"signature-line\"></div>\n        <p><strong id=\"purchaser_signatory\">Authorized Representative</strong></p>\n        <p>Title: Chief Procurement Officer</p>\n        <p>Date: <span class=\"date-line\"></span></p>\n      </div>\n      <div class=\"signature-block\">\n        <h4>Vendor Signature</h4>\n        <div class=\"signature-line\"></div>\n        <p><strong id=\"vendor_signatory\">Authorized Representative</strong></p>\n        <p>Title: Sales Director</p>\n        <p>Date: <span class=\"date-line\"></span></p>\n      </div>\n    </div>\n\n    <!-- Footer -->\n    <div class=\"footer-section\">\n      <p>This contract snippet represents a summary of key terms. Full contract documentation available upon request.</p>\n      <p>Contract Generated: <span id=\"generation_date\"></span></p>\n    </div>\n  </div>\n\n  <script>\n    // Sample data - replace with your actual data\n    const contractItems = {{ $json.value.toJsonString() }};\n\n    const companyData = {{ $json.companyProfile.toJsonString() }};\n\n    function formatCurrency(amount) {\n      const numValue = parseFloat(amount);\n      if (isNaN(numValue)) return '$0.00';\n      return '$' + numValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\n    }\n\n    function applyBranding(branding) {\n      if (!branding) return;\n\n      // Apply logo\n      if (branding.logo_url) {\n        const logoImg = document.getElementById('company_logo');\n        if (logoImg) {\n          logoImg.src = branding.logo_url;\n          logoImg.style.display = 'block';\n        }\n      }\n      \n      // Apply font family (but keep Times New Roman for legal document feel)\n      if (branding.font_family && branding.document_style !== 'formal') {\n        document.body.style.fontFamily = branding.font_family + \", 'Times New Roman', serif\";\n      }\n\n      // Apply primary color\n      if (branding.primary_color) {\n        const primaryColor = branding.primary_color;\n        \n        document.querySelectorAll('.contract-header, .final-total').forEach(el => {\n          el.style.borderColor = primaryColor;\n        });\n        document.querySelectorAll('.party-info, .detail-item, .terms-section').forEach(el => {\n          el.style.borderLeftColor = primaryColor;\n        });\n        document.querySelectorAll('.items-section h3, .contract-details h3, .terms-section h3').forEach(el => {\n          el.style.borderBottomColor = primaryColor;\n        });\n        document.querySelectorAll('.signature-section').forEach(el => {\n          el.style.borderTopColor = primaryColor;\n        });\n      }\n    }\n\n    function getServicePeriodRange(items) {\n      const dates = items.map(item => {\n        const dateStr = item.Service_dates;\n        if (dateStr.includes(' to ')) {\n          return dateStr.split(' to ').map(d => d.trim());\n        }\n        return [dateStr, dateStr];\n      }).flat();\n      \n      const sortedDates = dates.sort();\n      return `${sortedDates[0]} to ${sortedDates[sortedDates.length - 1]}`;\n    }\n\n    function populateContract(items, company) {\n      // Apply branding\n      applyBranding(company.branding);\n\n      // Set company information\n      document.getElementById('company_name').textContent = company.company_name || 'Your Company Name';\n      document.getElementById('company_industry').textContent = company.industry || '-';\n\n      // Set vendor information (using first vendor if available)\n      if (company.vendors && company.vendors.length > 0) {\n        const vendor = company.vendors[0];\n        document.getElementById('vendor_name').textContent = vendor.name;\n        document.getElementById('vendor_address').innerHTML = vendor.address.replace(', ', '<br>');\n        document.getElementById('vendor_industry').textContent = vendor.industry;\n        document.getElementById('vendor_tags').textContent = vendor.tags.join(', ');\n        document.getElementById('vendor_signatory').textContent = `${vendor.name} Representative`;\n      }\n\n      // Set contract details\n      const currentDate = new Date().toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n      document.getElementById('contract_date').textContent = currentDate;\n      document.getElementById('generation_date').textContent = currentDate;\n\n      // Set meta information\n      document.getElementById('total_items').textContent = items.length;\n      \n      const fileTypes = [...new Set(items.map(item => item.File_Type))].join(', ');\n      const sources = [...new Set(items.map(item => item.Source))].join(', ');\n      const servicePeriod = getServicePeriodRange(items);\n      \n      document.getElementById('file_types').textContent = fileTypes;\n      document.getElementById('sources').textContent = sources;\n      document.getElementById('service_period').textContent = servicePeriod;\n\n      // Calculate total value\n      let subtotal = 0;\n      items.forEach(item => {\n        subtotal += parseFloat(item.Amount);\n      });\n\n      const subtotalFormatted = formatCurrency(subtotal);\n      document.getElementById('contract_value').textContent = subtotalFormatted;\n      document.getElementById('subtotal').textContent = subtotalFormatted;\n      document.getElementById('total_contract_value').textContent = subtotalFormatted;\n\n      // Populate items table\n      const tableBody = document.getElementById('contract_items');\n      tableBody.innerHTML = '';\n      \n      items.forEach((item, index) => {\n        const row = document.createElement('tr');\n        \n        row.innerHTML = `\n          <td>${item.Transaction_id}</td>\n          <td>${item.Service_dates}</td>\n          <td>${item.Source}</td>\n          <td>${item.File_Type}</td>\n          <td class=\"amount\">${formatCurrency(item.Amount)}</td>\n        `;\n        \n        tableBody.appendChild(row);\n      });\n\n      // Set purchaser signatory\n      document.getElementById('purchaser_signatory').textContent = `${company.company_name} Representative`;\n    }\n\n    // Initialize contract when page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      populateContract(contractItems, companyData);\n    });\n\n    // Function to update contract with new data (for external use)\n    window.updateContract = function(newItems, newCompanyData) {\n      populateContract(newItems || contractItems, newCompanyData || companyData);\n    };\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        64,
        2688
      ],
      "id": "2d509dab-2c1e-4351-bdee-13cc28f68c8f",
      "name": "Edit Fields25"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Shipping Document (Sending)</title>\n<style>\n  :root{\n    /* Theme tokens */\n    --background: #f9fafb;\n    --text: #1f2937;\n    --panel: #ffffff;\n    --border: #d1d5db;\n    --header-bg: var(--primary-color);\n    --header-text: #ffffff;\n    --company-name: var(--primary-color);\n    --company-details: #4b5563;\n    --meta-text: #475569;\n    --meta-label: var(--secondary-color);\n    --section-bg: #f3f4f6;\n    --party-bg: #e0e7ff;\n    --party-header: var(--secondary-color);\n    --party-text: #1e293b;\n    --th-bg: #c7d2fe;\n    --th-text: #1e293b;\n    --td-text: #374151;\n    --row-alt: #e0e7ff;\n    --total-bg: var(--primary-color);\n    --total-text: #f9fafb;\n    --final-total: var(--secondary-color);\n    --accent: var(--primary-color);\n    --logo-w: 120px;\n    --logo-h: 60px;\n    --logo-bg: #e0e7ff;\n    --logo-text: transparent;\n  }\n\n  /* Screen layout — centered A4 landscape sheet */\n  body{\n    margin:0; background:var(--background); color:var(--text); font-family: var(--font-family), Arial, Helvetica, sans-serif;\n  }\n  .page{\n    width: 297mm;  /* A4 landscape width */\n    min-height: 210mm;\n    margin: 10mm auto;\n    background: var(--panel);\n    border: 2px solid var(--border);\n    box-shadow: 0 4px 10px rgba(0,0,0,.12);\n    padding: 14mm;\n    box-sizing: border-box;\n  }\n\n  /* Print layout */\n  @page {\n    size: A4 landscape;\n    margin: 10mm;\n  }\n  @media print {\n    body { background: #fff; }\n    .page{\n      margin: 0; border: none; box-shadow: none; width: auto; min-height: auto; padding: 0;\n    }\n    .no-print { display: none !important; }\n    thead { display: table-header-group; } /* repeat header on pages */\n    tr, img { page-break-inside: avoid; }\n  }\n\n  .doc-header{\n    background: var(--header-bg);\n    color: var(--header-text);\n    text-align: center;\n    font-size: 26px;\n    font-weight: bold;\n    letter-spacing: 1.5px;\n    padding: 12px 16px;\n    border-radius: 6px;\n    margin-bottom: 12px;\n  }\n\n  .topbar{\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 16px;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  .logo{\n    width: var(--logo-w);\n    height: var(--logo-h);\n    background: var(--logo-bg);\n    color: var(--logo-text);\n    display: flex; align-items: center; justify-content: center;\n    border-radius: 6px;\n    font-weight: bold;\n    background-image: var(--logo-url);\n    background-size: cover;\n    background-position: center;\n  }\n  .co h2{\n    margin:0 0 6px 0; font-size: 20px; color: var(--company-name);\n  }\n  .co p{ margin: 2px 0; color: var(--company-details); font-size: 12px; }\n\n  .meta{\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px 14px;\n    background: var(--section-bg);\n    padding: 10px;\n    border-radius: 6px;\n    margin: 10px 0 12px 0;\n    font-size: 13px;\n  }\n  .kv .k{ color: var(--meta-label); font-weight: 600; }\n  .kv .v{ color: var(--meta-text); }\n\n  .parties{\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 12px;\n    margin-top: 8px;\n  }\n  .card{\n    background: var(--party-bg);\n    padding: 10px;\n    border-radius: 6px;\n  }\n  .card h3{ margin:0 0 6px 0; color: var(--party-header); font-size: 15px; }\n  .card p{ margin:3px 0; color: var(--party-text); font-size: 12.5px; }\n\n  table{\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 14px;\n    font-size: 13px;\n  }\n  th{\n    background: var(--th-bg);\n    color: var(--th-text);\n    border: 1px solid var(--border);\n    padding: 8px;\n    text-align: left;\n  }\n  td{\n    border: 1px solid var(--border);\n    padding: 8px;\n    color: var(--td-text);\n    vertical-align: top;\n  }\n  tbody tr:nth-child(even){ background: var(--row-alt); }\n  .qty, .price, .amount, .uom, .code { text-align: right; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n\n  .notes{\n    margin-top: 12px;\n    padding: 10px;\n    border-left: 4px solid var(--accent);\n    background: var(--section-bg);\n    font-size: 12.5px;\n    color: var(--meta-text);\n    border-radius: 4px;\n  }\n\n  .signatures{\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 16px;\n    margin-top: 20px;\n  }\n  .sig{\n    border-top: 1px solid var(--border);\n    padding-top: 8px;\n    font-size: 12px;\n    color: var(--meta-text);\n    min-height: 48px;\n  }\n  .sig .label{ color: var(--meta-label); font-weight: 600; display: block; margin-bottom: 4px; }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"doc-header\">SHIPPING DOCUMENT (SENDING)</div>\n\n    <div class=\"topbar\">\n      <div class=\"co\">\n        <h2 id=\"company-name\"></h2>\n        <p id=\"company-address\"></p>\n        <p><span id=\"company-phone\"></span> • <span id=\"company-email\"></span></p>\n      </div>\n      <div class=\"logo\" id=\"logo\"></div>\n    </div>\n\n    <!-- Core meta (Mandatory) -->\n    <div class=\"meta\">\n      <div class=\"kv\"><div class=\"k\">Shipping Doc #</div><div class=\"v\" id=\"shipping-document-number\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Document Date</div><div class=\"v\" id=\"shipping-doc-date\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Order # (PO/SO)</div><div class=\"v\"><span id=\"purchase-order-number\"></span> <span id=\"sales-order-number\"></span></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Shipped</div><div class=\"v\" id=\"date-shipped\"></div></div>\n\n      <div class=\"kv\"><div class=\"k\">Carrier</div><div class=\"v\" id=\"shipping-carrier\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Method</div><div class=\"v\" id=\"shipping-method\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Tracking #</div><div class=\"v\" id=\"tracking-number\"></div></div>\n\n      <!-- Optional quick refs -->\n      <div class=\"kv\"><div class=\"k\">Customer #</div><div class=\"v\" id=\"customer-number\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Supplier #</div><div class=\"v\" id=\"supplier-number\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Delivered</div><div class=\"v\" id=\"date-delivered\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Received Date</div><div class=\"v\" id=\"received-date\"></div></div>\n    </div>\n\n    <!-- Parties -->\n    <div class=\"parties\">\n      <div class=\"card\">\n        <h3>Customer (Consignee)</h3>\n        <p><strong id=\"customer-name\"></strong></p>\n        <p id=\"customer-address\"></p>\n        <p><em>Contact Info:</em> <span id=\"customer-contact\"></span></p>\n      </div>\n      <div class=\"card\">\n        <h3>Supplier (Shipper)</h3>\n        <p><strong id=\"supplier-name\"></strong></p>\n        <p id=\"supplier-address\"></p>\n        <p><em>Contact Info:</em> <span id=\"supplier-contact\"></span></p>\n      </div>\n    </div>\n\n    <!-- Line Items -->\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:40%\">Product Description</th>\n          <th class=\"code\" style=\"width:12%\">Product Code</th>\n          <th class=\"uom\" style=\"width:8%\">UOM</th>\n          <th class=\"qty\" style=\"width:10%\">Quantity</th>\n          <th class=\"price\" style=\"width:15%\">Unit Price</th>\n          <th class=\"amount\" style=\"width:15%\">Line Amount</th>\n        </tr>\n      </thead>\n      <tbody id=\"line-items-table\">\n      </tbody>\n    </table>\n\n    <!-- Shipment/Logistics -->\n    <div class=\"notes\">\n      <strong>Carrier:</strong> <span id=\"notes-carrier\"></span> &nbsp; | &nbsp;\n      <strong>Method:</strong> <span id=\"notes-method\"></span> &nbsp; | &nbsp;\n      <strong>Tracking:</strong> <span id=\"notes-tracking\"></span> &nbsp; | &nbsp;\n      <strong>Source:</strong> <span id=\"notes-source\"></span> &nbsp; | &nbsp;\n    </div>\n\n    <!-- Signatures -->\n    <div class=\"signatures\">\n      <div class=\"sig\">\n        <span class=\"label\">Prepared By</span>\n        <span id=\"prepared-by\">Document System</span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Carrier Representative</span>\n        <span id=\"carrier-signature\"></span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Received By (Consignee)</span>\n        <span id=\"received-by\">Pending</span>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Sample JSON data - replace these with your actual JSON inputs\n    const shippingData ={{ $json.value.toJsonString() }};\n\n    const companyData = {{ $json.companyProfile.toJsonString() }};\n\n    // Function to find entity by name in company data\n    function findEntity(entityName, entityType) {\n      const entityArrays = {\n        'vendor': companyData.vendors || [],\n        'shipper': companyData.shipping_partners || [],\n        'bank': companyData.banks || []\n      };\n\n      for (const [type, entities] of Object.entries(entityArrays)) {\n        if (entityType && type !== entityType) continue;\n        const entity = entities.find(e => e.name === entityName);\n        if (entity) return entity;\n      }\n      return null;\n    }\n\n    // Function to populate the document with both JSON data sources\n    function populateDocument(shipData, compData) {\n      // Use first shipping record if array\n      const record = Array.isArray(shipData) ? shipData[0] : shipData;\n      \n      // Set CSS custom properties for colors and branding\n      const root = document.documentElement;\n      const branding = compData.branding || {};\n      root.style.setProperty('--primary-color', branding.primary_color || '#334155');\n      root.style.setProperty('--secondary-color', branding.secondary_color || '#0F172A');\n      root.style.setProperty('--font-family', branding.font_family || 'Inter');\n      root.style.setProperty('--logo-url', `url('${branding.logo_url || ''}')`);\n\n      // Populate company info\n      document.getElementById('company-name').textContent = compData.company_name || '';\n      document.getElementById('company-address').textContent = ''; // Could derive from main company data if available\n      document.getElementById('company-phone').textContent = '';\n      document.getElementById('company-email').textContent = '';\n\n      // Populate document details from shipping data\n      document.getElementById('shipping-document-number').textContent = record.Shipping_Document_Number || '';\n      document.getElementById('shipping-doc-date').textContent = record.Shipping_Doc_date || '';\n      document.getElementById('purchase-order-number').textContent = record.Purchase_Order_Number || '';\n      document.getElementById('sales-order-number').textContent = '';\n      document.getElementById('date-shipped').textContent = record.Date_Shipped || '';\n      document.getElementById('shipping-carrier').textContent = record.Shipping_carrier || '';\n      document.getElementById('shipping-method').textContent = record.Shipping_method || '';\n      document.getElementById('tracking-number').textContent = record.Tracking_number || '';\n      document.getElementById('customer-number').textContent = '';\n      document.getElementById('supplier-number').textContent = '';\n      document.getElementById('date-delivered').textContent = '';\n      document.getElementById('received-date').textContent = '';\n\n      // Populate parties\n      document.getElementById('customer-name').textContent = record.Customer_name || '';\n      document.getElementById('customer-address').textContent = record.Customer_Address || '';\n      document.getElementById('customer-contact').textContent = '';\n\n      document.getElementById('supplier-name').textContent = record.Supplier_Name || '';\n      document.getElementById('supplier-address').textContent = record.Supplier_Address || '';\n      \n      // Try to find supplier details from company data\n      const supplier = findEntity(record.Supplier_Name, 'vendor');\n      if (supplier) {\n        document.getElementById('supplier-address').textContent = supplier.address;\n      }\n\n      // Populate line items from shipping data\n      const tableBody = document.getElementById('line-items-table');\n      tableBody.innerHTML = '';\n      \n      // Create a line item from the shipping record\n      const row = document.createElement('tr');\n      \n      // Estimate unit price (you might want to add this to your shipping data)\n      const quantity = parseInt(record.Item_Quantity) || 1;\n      const estimatedUnitPrice = 299.99; // Default price - ideally this would be in your data\n      const lineAmount = `$${(estimatedUnitPrice * quantity).toLocaleString()}`;\n      \n      row.innerHTML = `\n        <td>${record.Product_Description || ''}</td>\n        <td class=\"code\">SKU-${record.Product_Description ? record.Product_Description.replace(/\\s+/g, '').substring(0, 8) : 'ITEM'}</td>\n        <td class=\"uom\">pcs</td>\n        <td class=\"qty\">${record.Item_Quantity || ''}</td>\n        <td class=\"price\">$${estimatedUnitPrice.toFixed(2)}</td>\n        <td class=\"amount\">${lineAmount}</td>\n      `;\n      tableBody.appendChild(row);\n\n      // Populate logistics notes\n      document.getElementById('notes-carrier').textContent = record.Shipping_carrier || '';\n      document.getElementById('notes-method').textContent = record.Shipping_method || '';\n      document.getElementById('notes-tracking').textContent = record.Tracking_number || '';\n      document.getElementById('notes-source').textContent = record.Source || '';\n      document.getElementById('notes-file-type').textContent = record.File_Type || '';\n\n      // Populate signatures\n      const carrier = findEntity(record.Shipping_carrier, 'shipper');\n      document.getElementById('carrier-signature').textContent = carrier ? carrier.name : record.Shipping_carrier || '';\n    }\n\n    // Populate the document when the page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      populateDocument(shippingData, companyData);\n    });\n\n    // Function to update data dynamically (call this when you have new data)\n    function updateDocument(newShippingData, newCompanyData) {\n      populateDocument(newShippingData, newCompanyData);\n    }\n\n    // Make the update function available globally\n    window.updateShippingDocument = updateDocument;\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        48,
        2864
      ],
      "id": "6df2964a-4244-4a70-a3a2-525f7336b00f",
      "name": "Edit Fields26"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Shipping Document (Receiving)</title>\n<style>\n  :root{\n    --primary: #2563eb;\n    --secondary: #64748b;\n    --background: #f9fafb;\n    --text: #1e293b;\n    --panel: #ffffff;\n    --border: #cbd5e1;\n    --accent: #2563eb;\n  }\n\n  body{ \n    margin:0; \n    background:var(--background); \n    color:var(--text); \n    font-family: Arial, Helvetica, sans-serif;\n  }\n  \n  .page{\n    width: 297mm; min-height: 210mm; margin: 10mm auto;\n    background: var(--panel); border: 2px solid var(--border); box-shadow: 0 4px 10px rgba(0,0,0,.12);\n    padding: 14mm; box-sizing: border-box;\n  }\n\n  @page { size: A4 landscape; margin: 10mm; }\n  @media print{\n    body{ background:#fff; }\n    .page{ margin:0; border:none; box-shadow:none; width:auto; min-height:auto; padding:0; }\n    .no-print{ display:none !important; }\n    thead{ display: table-header-group; }\n    tr, img{ page-break-inside: avoid; }\n  }\n\n  .doc-header{\n    background: var(--primary); color: white;\n    text-align: center; font-size: 26px; font-weight: bold; letter-spacing: 1.5px;\n    padding: 12px 16px; border-radius: 6px; margin-bottom: 12px;\n  }\n\n  .topbar{\n    display:grid; grid-template-columns: 1fr auto; gap:16px; align-items:center; margin-bottom:10px;\n  }\n  .logo{\n    width: 120px; height: 60px;\n    background: transparent; color: transparent;\n    display:flex; align-items:center; justify-content:center; border-radius:6px; font-weight:bold;\n    background-image:url(''); background-size:contain; background-repeat:no-repeat; background-position:center;\n  }\n  .co h2{ margin:0 0 6px 0; font-size:20px; color:var(--text); }\n  .co p{ margin:2px 0; color:var(--secondary); font-size:12px; }\n\n  .meta{\n    display:grid; grid-template-columns: repeat(4, 1fr);\n    gap:10px 14px; background:#e2e8f0; padding:10px; border-radius:6px; margin:10px 0 12px 0; font-size:13px;\n  }\n  .kv .k{ color:var(--primary); font-weight:600; }\n  .kv .v{ color:var(--secondary); }\n\n  .parties{ display:grid; grid-template-columns:1fr 1fr; gap:12px; margin-top:8px; }\n  .card{ background:#f1f5f9; padding:10px; border-radius:6px; }\n  .card h3{ margin:0 0 6px 0; color:var(--primary); font-size:15px; }\n  .card p{ margin:3px 0; color:var(--secondary); font-size:12.5px; }\n\n  table{ width:100%; border-collapse:collapse; margin-top:14px; font-size:13px; }\n  th{ background:var(--primary); color:white; border:1px solid var(--border); padding:8px; text-align:left; }\n  td{ border:1px solid var(--border); padding:8px; color:var(--text); vertical-align:top; }\n  tbody tr:nth-child(even){ background:#f1f5f9; }\n  .mono{ text-align:right; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n\n  .notes, .receiving-notes{\n    margin-top:12px; padding:10px; border-left:4px solid var(--accent); background:#e2e8f0;\n    font-size:12.5px; color:var(--secondary); border-radius:4px;\n  }\n\n  .signatures{ display:grid; grid-template-columns: repeat(3,1fr); gap:16px; margin-top:20px; }\n  .sig{ border-top:1px solid var(--border); padding-top:8px; font-size:12px; color:var(--secondary); min-height:48px; }\n  .sig .label{ color:var(--primary); font-weight:600; display:block; margin-bottom:4px; }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"doc-header\">SHIPPING DOCUMENT (RECEIVING)</div>\n\n    <div class=\"topbar\">\n      <div class=\"co\">\n        <h2 id=\"company_name\">Company Name</h2>\n        <p id=\"company_address\">Company Address</p>\n        <p><span id=\"company_phone\">Phone</span> • <span id=\"company_email\">Email</span></p>\n      </div>\n      <div class=\"logo\" id=\"logo\"></div>\n    </div>\n\n    <div class=\"meta\">\n      <div class=\"kv\"><div class=\"k\">Shipping Doc #</div><div class=\"v\" id=\"shipping_document_number\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Document Date</div><div class=\"v\" id=\"shipping_doc_date\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Order # (PO/SO)</div><div class=\"v\"><span id=\"purchase_order_number\">-</span></div></div>\n      <div class=\"kv\"><div class=\"k\">Carrier</div><div class=\"v\" id=\"shipping_carrier\">-</div></div>\n\n      <div class=\"kv\"><div class=\"k\">Method</div><div class=\"v\" id=\"shipping_method\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Tracking #</div><div class=\"v\" id=\"tracking_number\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Date Shipped</div><div class=\"v\" id=\"date_shipped\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Date Delivered</div><div class=\"v\" id=\"date_delivered\">-</div></div>\n\n      <div class=\"kv\"><div class=\"k\">Received Date</div><div class=\"v\" id=\"received_date\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Proof of Delivery</div><div class=\"v\" id=\"proof_of_delivery\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Bill of Lading #</div><div class=\"v\" id=\"bill_of_lading_number\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Customer #</div><div class=\"v\" id=\"customer_number\">-</div></div>\n    </div>\n\n    <div class=\"parties\">\n      <div class=\"card\">\n        <h3>Customer / Receiver (Consignee)</h3>\n        <p><strong id=\"customer_name_party\">Customer Name</strong></p>\n        <p id=\"customer_address_party\">Customer Address</p>\n        <p><em>Consignee's Name & Address:</em> <span id=\"consignee_name_and_address\">-</span></p>\n      </div>\n      <div class=\"card\">\n        <h3>Supplier / Shipper</h3>\n        <p><strong id=\"supplier_name\">Supplier Name</strong></p>\n        <p id=\"supplier_address\">Supplier Address</p>\n        <p><em>Shipper's Name & Address:</em> <span id=\"shipper_name_and_address\">-</span></p>\n      </div>\n    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:24%\">Product Description</th>\n          <th style=\"width:10%\">Product Code</th>\n          <th style=\"width:8%\">UOM</th>\n          <th class=\"mono\" style=\"width:10%\">Qty Shipped</th>\n          <th class=\"mono\" style=\"width:10%\">Qty Received</th>\n          <th class=\"mono\" style=\"width:10%\">Damaged Qty</th>\n          <th class=\"mono\" style=\"width:10%\">Short/Over</th>\n          <th style=\"width:18%\">Remarks</th>\n        </tr>\n      </thead>\n      <tbody id=\"receiving_items_table\">\n        <tr>\n          <td>-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td>-</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div class=\"notes\">\n      <strong>Packaging:</strong> <span id=\"packaging_details\">-</span> &nbsp; | &nbsp;\n      <strong>Insurance:</strong> <span id=\"insurance_details\">-</span> &nbsp; | &nbsp;\n      <strong>Customs:</strong> <span id=\"customs_information\">-</span> &nbsp; | &nbsp;\n      <strong>Shipping/Delivery Terms:</strong> <span id=\"shipping_or_delivery_terms\">-</span>\n    </div>\n\n    <div class=\"receiving-notes\">\n      <p><strong>Inspection Status:</strong> <span id=\"receiving_inspection_status\">-</span></p>\n      <p><strong>Discrepancy Summary:</strong> <span id=\"receiving_discrepancy_summary\">-</span></p>\n      <p><strong>Condition on Arrival:</strong> <span id=\"receiving_condition_notes\">-</span></p>\n      <p><strong>Additional Notes:</strong> <span id=\"receiving_additional_notes\">-</span></p>\n    </div>\n\n    <div class=\"signatures\">\n      <div class=\"sig\">\n        <span class=\"label\">Received By (Consignee)</span>\n        <span id=\"received_by\">-</span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Checked/Inspected By</span>\n        <span id=\"inspected_by\">-</span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Carrier Representative</span>\n        <span id=\"carrier_signature\">-</span>\n      </div>\n    </div>\n  </div>\n\n<script>\n// JSON Data Variables - Replace these with your actual JSON data\nconst shippingData = {{ $json.value.toJsonString() }};\n\nconst companyData = {{ $json.companyProfile.toJsonString() }};\n\nfunction findEntityByName(entities, name) {\n  if (!entities || !Array.isArray(entities)) return null;\n  return entities.find(entity => entity.name === name);\n}\n\nfunction updateElement(id, value) {\n  const element = document.getElementById(id);\n  if (element && value !== undefined && value !== null && value !== '') {\n    element.textContent = value;\n  }\n}\n\nfunction formatDate(dateString) {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', { \n    year: 'numeric', \n    month: '2-digit', \n    day: '2-digit' \n  });\n}\n\nfunction populateDocument(shippingData, companyData) {\n  if (!shippingData || !shippingData.length || !companyData) {\n    console.error('Missing required data');\n    return;\n  }\n  \n  const shipment = shippingData[0]; // Use first shipping record\n  \n  // Apply branding\n  const root = document.documentElement;\n  if (companyData.branding) {\n    if (companyData.branding.primary_color) {\n      root.style.setProperty('--primary', companyData.branding.primary_color);\n      root.style.setProperty('--accent', companyData.branding.primary_color);\n    }\n    if (companyData.branding.secondary_color) {\n      root.style.setProperty('--secondary', companyData.branding.secondary_color);\n    }\n    if (companyData.branding.font_family) {\n      document.body.style.fontFamily = companyData.branding.font_family;\n    }\n    if (companyData.branding.logo_url) {\n      const logo = document.getElementById('logo');\n      logo.style.backgroundImage = `url('${companyData.branding.logo_url}')`;\n    }\n  }\n  \n  // Company information\n  updateElement('company_name', companyData.company_name);\n  \n  // Document metadata from shipping data\n  updateElement('shipping_document_number', shipment.Shipping_Document_Number);\n  updateElement('shipping_doc_date', formatDate(shipment.Shipping_Doc_date));\n  updateElement('purchase_order_number', shipment.Purchase_Order_Number);\n  updateElement('shipping_carrier', shipment.Shipping_carrier);\n  updateElement('shipping_method', shipment.Shipping_method);\n  updateElement('tracking_number', shipment.Tracking_number);\n  updateElement('date_shipped', formatDate(shipment.Date_Shipped));\n  \n  // Customer/Consignee information\n  updateElement('customer_name_party', shipment.Customer_name);\n  updateElement('customer_address_party', shipment.Customer_Address);\n  updateElement('consignee_name_and_address', `${shipment.Customer_name}, ${shipment.Customer_Address}`);\n  \n  // Supplier/Shipper information\n  updateElement('supplier_name', shipment.Supplier_Name);\n  updateElement('supplier_address', shipment.Supplier_Address);\n  \n  // Find supplier details from company data\n  const supplier = findEntityByName(companyData.vendors, shipment.Supplier_Name);\n  if (supplier) {\n    updateElement('shipper_name_and_address', `${supplier.name}, ${supplier.address}`);\n  } else {\n    updateElement('shipper_name_and_address', `${shipment.Supplier_Name}, ${shipment.Supplier_Address}`);\n  }\n  \n  // Find shipping partner details\n  const shippingPartner = findEntityByName(companyData.shipping_partners, shipment.Shipping_carrier);\n  if (shippingPartner) {\n    updateElement('shipping_carrier', shippingPartner.name);\n  }\n  \n  // Populate items table\n  const tbody = document.getElementById('receiving_items_table');\n  tbody.innerHTML = '';\n  \n  // Create item row from shipping data\n  const row = document.createElement('tr');\n  row.innerHTML = `\n    <td>${shipment.Product_Description || '-'}</td>\n    <td class=\"mono\">-</td>\n    <td class=\"mono\">EA</td>\n    <td class=\"mono\">${shipment.Item_Quantity || '-'}</td>\n    <td class=\"mono\">-</td>\n    <td class=\"mono\">-</td>\n    <td class=\"mono\">-</td>\n    <td>-</td>\n  `;\n  tbody.appendChild(row);\n  \n  // Set default values for empty fields\n  updateElement('date_delivered', '-');\n  updateElement('received_date', '-');\n  updateElement('proof_of_delivery', '-');\n  updateElement('bill_of_lading_number', '-');\n  updateElement('customer_number', '-');\n  updateElement('packaging_details', 'Standard');\n  updateElement('insurance_details', 'Standard Coverage');\n  updateElement('customs_information', 'N/A');\n  updateElement('shipping_or_delivery_terms', 'FOB Destination');\n  updateElement('receiving_inspection_status', 'Pending');\n  updateElement('receiving_discrepancy_summary', 'None reported');\n  updateElement('receiving_condition_notes', 'Good condition');\n  updateElement('receiving_additional_notes', 'None');\n  updateElement('received_by', '-');\n  updateElement('inspected_by', '-');\n  updateElement('carrier_signature', '-');\n  \n  console.log('Document populated successfully');\n}\n\n// Auto-populate on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n  populateDocument(shippingData, companyData);\n});\n\n// Function to update with new data (for external use)\nwindow.updateDocumentData = function(newShippingData, newCompanyData) {\n  populateDocument(newShippingData, newCompanyData);\n};\n</script>\n\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        64,
        3088
      ],
      "id": "5c036485-256a-4a81-a92a-11943816aa99",
      "name": "Edit Fields27"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Order Document</title>\n  <style>\n    :root {\n      --space: 20px;\n      --primary-color: #334155;\n      --secondary-color: #4338ca;\n      --font-family: Arial;\n    }\n    body {\n      font-family: var(--font-family), Arial, sans-serif;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: #f9fafb;\n      color: #1e293b;\n    }\n    .doc {\n      background: #ffffff;\n      border: 2px solid var(--primary-color);\n      padding: 30px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .doc-header {\n      background: var(--primary-color);\n      color: #ffffff;\n      padding: 20px;\n      margin: -30px -30px 30px -30px;\n      text-align: center;\n      font-size: 28px;\n      font-weight: bold;\n      letter-spacing: 2px;\n    }\n    .subtitle {\n      font-size: 14px;\n      opacity: 0.9;\n      margin-top: 4px;\n      letter-spacing: 1px;\n    }\n    .company-info {\n      margin-bottom: 30px;\n      position: relative;\n      min-height: 70px;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: var(--primary-color);\n      font-size: 22px;\n    }\n    .company-info p {\n      margin: 2px 0;\n      color: #475569;\n    }\n    .logo {\n      position: absolute;\n      right: 0;\n      top: 0;\n      width: 100px;\n      height: 70px;\n      background: var(--primary-color);\n      color: #ffffff;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n      background-image: url('https://logoipsum.com/wp-content/uploads/2020/07/logo-29.svg');\n      background-size: cover;\n      background-position: center;\n    }\n\n    .order-details {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      margin: 30px 0;\n      background: rgba(67, 56, 202, 0.1);\n      padding: 15px;\n      border-radius: 5px;\n    }\n    .meta p {\n      margin: 6px 0;\n      color: #334155;\n      line-height: 1.25;\n    }\n    .meta strong {\n      color: var(--primary-color);\n    }\n\n    .party-cards {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    .card {\n      background: rgba(67, 56, 202, 0.05);\n      padding: 15px;\n      border-radius: 5px;\n      border-left: 3px solid var(--secondary-color);\n    }\n    .card h3 {\n      margin: 0 0 10px 0;\n      color: var(--primary-color);\n    }\n    .card p {\n      margin: 3px 0;\n      color: #475569;\n    }\n\n    .items-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 30px 0;\n      table-layout: fixed;\n      word-wrap: break-word;\n    }\n    .items-table th {\n      background: var(--primary-color);\n      color: #ffffff;\n      border: 1px solid var(--primary-color);\n      padding: 10px 12px;\n      text-align: left;\n      font-weight: bold;\n    }\n    .items-table td {\n      border: 1px solid #cbd5e1;\n      padding: 10px 12px;\n      color: #1e293b;\n      vertical-align: top;\n    }\n    .items-table tr:nth-child(even) {\n      background: rgba(67, 56, 202, 0.05);\n    }\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n      white-space: nowrap;\n    }\n\n    .total-section {\n      margin: 30px 0;\n      background: rgba(67, 56, 202, 0.1);\n      padding: 20px;\n      border-radius: 5px;\n      display: grid;\n      gap: 6px;\n      justify-items: end;\n    }\n    .total-section p {\n      margin: 0;\n      font-size: 16px;\n      color: #334155;\n    }\n    .final-total {\n      font-size: 20px;\n      font-weight: bold;\n      color: var(--primary-color);\n      border-top: 2px solid var(--primary-color);\n      padding-top: 10px;\n      margin-top: 6px;\n    }\n\n    .terms, .sign {\n      background: #f1f5f9;\n      padding: 15px;\n      border-left: 4px solid var(--secondary-color);\n      margin: 20px 0 0 0;\n      color: #475569;\n    }\n    .terms h4, .sign h4 {\n      margin: 0 0 10px 0;\n      color: var(--primary-color);\n    }\n    .sign .row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    .sig-line {\n      margin-top: 24px;\n      border-top: 1px solid #cbd5e1;\n      padding-top: 8px;\n      color: #1e293b;\n    }\n\n    @media print {\n      @page { size: A4 landscape; margin: 12mm; }\n      body { max-width: none; padding: 0; background-color: #ffffff; }\n      .doc { box-shadow: none; border: 1px solid var(--primary-color); }\n      .items-table tr, .items-table td, .items-table th { page-break-inside: avoid; }\n      .total-section, .terms, .sign { page-break-inside: avoid; }\n    }\n\n    /* Dynamic color support */\n    .primary-bg { background-color: var(--primary-color); }\n    .secondary-bg { background-color: var(--secondary-color); }\n    .primary-text { color: var(--primary-color); }\n    .secondary-text { color: var(--secondary-color); }\n  </style>\n</head>\n<body>\n  <div class=\"doc\">\n    <div class=\"doc-header\">\n      ORDER DOCUMENT\n      <div class=\"subtitle\">Purchase Order</div>\n    </div>\n\n    <div class=\"company-info\">\n      <div class=\"logo\"></div>\n      <h2 id=\"company-name\">Company Name</h2>\n      <p id=\"company-address\">Company Address</p>\n      <p id=\"company-phone\">Phone: Not Available</p>\n      <p id=\"company-email\">Email: Not Available</p>\n    </div>\n\n    <div class=\"order-details\">\n      <div class=\"meta\">\n        <p><strong>Purchase Order Number:</strong> <span id=\"purchase_order_number\">N/A</span></p>\n        <p><strong>Purchase Order Date:</strong> <span id=\"purchase_order_date\">N/A</span></p>\n        <p><strong>Delivery Date:</strong> <span id=\"delivery_date\">N/A</span></p>\n        <p><strong>Currency Unit:</strong> <span id=\"currency_unit\">USD</span></p>\n      </div>\n      <div class=\"meta\">\n        <p><strong>Customer Name:</strong> <span id=\"customer_name\">N/A</span></p>\n        <p><strong>Supplier Name:</strong> <span id=\"supplier_name\">N/A</span></p>\n        <p><strong>Industry:</strong> <span id=\"industry\">N/A</span></p>\n        <p><strong>Revenue Model:</strong> <span id=\"revenue_model\">N/A</span></p>\n      </div>\n    </div>\n\n    <div class=\"party-cards\">\n      <div class=\"card\">\n        <h3>Supplier</h3>\n        <p><strong>Name:</strong> <span id=\"supplier_name_card\">N/A</span></p>\n        <p><strong>Address:</strong> <span id=\"supplier_address\">N/A</span></p>\n        <p><strong>Industry:</strong> <span id=\"supplier_industry\">N/A</span></p>\n      </div>\n      <div class=\"card\">\n        <h3>Customer</h3>\n        <p><strong>Name:</strong> <span id=\"customer_name_card\">N/A</span></p>\n        <p><strong>Business Model:</strong> <span id=\"customer_business_model\">N/A</span></p>\n        <p><strong>Geographic Footprint:</strong> <span id=\"geographic_footprint\">N/A</span></p>\n      </div>\n    </div>\n\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Product Description</th>\n          <th>Quantity</th>\n          <th>Unit</th>\n          <th>Unit Price</th>\n          <th>Line Total</th>\n          <th>Source</th>\n        </tr>\n      </thead>\n      <tbody id=\"items-tbody\">\n        <!-- Items will be populated dynamically -->\n      </tbody>\n    </table>\n\n    <div class=\"total-section\">\n      <p><strong>Subtotal:</strong> <span id=\"subtotal\">$0.00</span></p>\n      <p><strong>Tax (5%):</strong> <span id=\"tax\">$0.00</span></p>\n      <p><strong>Freight Charges:</strong> <span id=\"freight_charges\">$0.00</span></p>\n      <p><strong>Discount:</strong> <span id=\"discount\">$0.00</span></p>\n      <p class=\"final-total\"><strong>Total:</strong> <span id=\"total_value\">$0.00</span></p>\n    </div>\n\n    <div class=\"terms\">\n      <h4>Terms and Conditions</h4>\n      <div id=\"terms_conditions\">\n        All goods remain the property of the supplier until payment is received in full. \n        Delivery terms are FOB destination. Any damages must be reported within 48 hours of delivery. \n        Payment terms vary by vendor agreement. Late payments may incur service charges.\n        All returns require prior authorization and may be subject to restocking fees.\n      </div>\n    </div>\n\n    <div class=\"sign\">\n      <h4>Signatures</h4>\n      <div class=\"row\">\n        <div>\n          <div class=\"sig-line\">Authorized Signatory (Supplier)</div>\n          <div>Name: <span id=\"supplier_signatory_name\">Not Available</span></div>\n          <div>Date: <span id=\"supplier_sign_date\">N/A</span></div>\n        </div>\n        <div>\n          <div class=\"sig-line\">Authorized Signatory (Customer)</div>\n          <div>Name: <span id=\"customer_signatory_name\">Not Available</span></div>\n          <div>Date: <span id=\"customer_sign_date\">N/A</span></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Function to populate document with the two JSON structures\n    function renderOrderDocument(purchaseOrderItems, companyData) {\n      console.log('Rendering with:', { purchaseOrderItems, companyData });\n\n      // Helper function to format currency\n      function formatCurrency(value, currency = 'USD') {\n        if (!value) return '$0.00';\n        const numStr = value.toString().replace(/[$,]/g, '');\n        const num = parseFloat(numStr);\n        if (isNaN(num)) return value;\n        \n        if (currency === 'USD') {\n          return '$' + num.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\n        }\n        return num.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\n      }\n\n      // Helper function to safely get nested property\n      function safeGet(obj, path, defaultValue = 'N/A') {\n        return path.split('.').reduce((current, key) => current && current[key], obj) || defaultValue;\n      }\n\n      // Update branding and colors\n      if (companyData.branding) {\n        const branding = companyData.branding;\n        if (branding.primary_color) {\n          document.documentElement.style.setProperty('--primary-color', branding.primary_color);\n        }\n        if (branding.secondary_color) {\n          document.documentElement.style.setProperty('--secondary-color', branding.secondary_color);\n        }\n        if (branding.font_family) {\n          document.documentElement.style.setProperty('--font-family', branding.font_family);\n        }\n        if (branding.logo_url) {\n          const logoElement = document.querySelector('.logo');\n          if (logoElement) {\n            logoElement.style.backgroundImage = `url('${branding.logo_url}')`;\n          }\n        }\n      }\n\n      // Update company information\n      if (companyData.company_name) {\n        document.getElementById('company-name').textContent = companyData.company_name;\n      }\n\n      // Extract information from first purchase order item for basic details\n      const firstItem = purchaseOrderItems && purchaseOrderItems.length > 0 ? purchaseOrderItems[0] : {};\n\n      // Update order details\n      document.getElementById('purchase_order_number').textContent = firstItem.Purchase_Order_Number || 'N/A';\n      document.getElementById('purchase_order_date').textContent = firstItem.Purchase_Order_Date || 'N/A';\n      document.getElementById('delivery_date').textContent = firstItem.Delivery_Date || 'N/A';\n      document.getElementById('currency_unit').textContent = firstItem.Currency_Unit || 'USD';\n      document.getElementById('customer_name').textContent = firstItem.Customer_Name || companyData.company_name || 'N/A';\n      document.getElementById('supplier_name').textContent = firstItem.Supplier_Name || 'N/A';\n      document.getElementById('industry').textContent = companyData.industry || 'N/A';\n      document.getElementById('revenue_model').textContent = companyData.revenue_model || 'N/A';\n\n      // Update supplier information\n      const supplier = companyData.vendors && companyData.vendors.length > 0 ? companyData.vendors[0] : {};\n      document.getElementById('supplier_name_card').textContent = supplier.name || firstItem.Supplier_Name || 'N/A';\n      document.getElementById('supplier_address').textContent = supplier.address || 'N/A';\n      document.getElementById('supplier_industry').textContent = supplier.industry || 'N/A';\n\n      // Update customer information\n      document.getElementById('customer_name_card').textContent = firstItem.Customer_Name || companyData.company_name || 'N/A';\n      document.getElementById('customer_business_model').textContent = safeGet(companyData, 'business_context.business_model', 'N/A');\n      \n      const geographicFootprint = safeGet(companyData, 'business_context.geographic_footprint', []);\n      document.getElementById('geographic_footprint').textContent = Array.isArray(geographicFootprint) ? geographicFootprint.join(', ') : geographicFootprint;\n\n      // Populate items table\n      const tbody = document.getElementById('items-tbody');\n      if (tbody && purchaseOrderItems && purchaseOrderItems.length > 0) {\n        tbody.innerHTML = '';\n        \n        purchaseOrderItems.forEach(item => {\n          const row = document.createElement('tr');\n          const unitPrice = parseFloat(item.Item_Price || 0);\n          const quantity = parseFloat(item.Item_Quantity || 0);\n          const lineTotal = unitPrice * quantity;\n          \n          row.innerHTML = `\n            <td>${item.Product_Description || 'N/A'}</td>\n            <td class=\"amount\">${item.Item_Quantity || '0'}</td>\n            <td>${item.Unit_of_measurement || 'units'}</td>\n            <td class=\"amount\">${formatCurrency(item.Item_Price, item.Currency_Unit)}</td>\n            <td class=\"amount\">${formatCurrency(lineTotal, item.Currency_Unit)}</td>\n            <td>${item.Source || 'N/A'}</td>\n          `;\n          tbody.appendChild(row);\n        });\n      }\n\n      // Calculate totals\n      let subtotal = 0;\n      if (purchaseOrderItems && purchaseOrderItems.length > 0) {\n        purchaseOrderItems.forEach(item => {\n          const unitPrice = parseFloat(item.Item_Price || 0);\n          const quantity = parseFloat(item.Item_Quantity || 0);\n          subtotal += unitPrice * quantity;\n        });\n      }\n\n      const tax = subtotal * 0.05; // 5% tax\n      const freight = 0; // No freight charges in the data\n      const discount = 0; // No discount in the data\n      const total = subtotal + tax + freight - discount;\n\n      // Update totals section\n      const currency = firstItem.Currency_Unit || 'USD';\n      document.getElementById('subtotal').textContent = formatCurrency(subtotal, currency);\n      document.getElementById('tax').textContent = formatCurrency(tax, currency);\n      document.getElementById('freight_charges').textContent = formatCurrency(freight, currency);\n      document.getElementById('discount').textContent = formatCurrency(discount, currency);\n      document.getElementById('total_value').textContent = formatCurrency(total, currency);\n\n      // Update signature dates with purchase order date\n      document.getElementById('supplier_sign_date').textContent = firstItem.Purchase_Order_Date || 'N/A';\n      document.getElementById('customer_sign_date').textContent = firstItem.Purchase_Order_Date || 'N/A';\n    }\n\n    // Sample data\n    const samplePurchaseOrderItems = {{ $json.value.toJsonString() }};\n\n    const sampleCompanyData ={{ $json.companyProfile.toJsonString() }} ;\n\n    // Make functions globally available\n    window.renderOrderDocument = renderOrderDocument;\n    window.samplePurchaseOrderItems = samplePurchaseOrderItems;\n    window.sampleCompanyData = sampleCompanyData;\n\n    // Load the sample data on page load\n    document.addEventListener('DOMContentLoaded', function() {\n      renderOrderDocument(samplePurchaseOrderItems, sampleCompanyData);\n    });\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        3328
      ],
      "id": "c092f818-f4a2-4d7e-9285-721d15a037e5",
      "name": "Edit Fields28"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "94d0b360-b005-4dac-82e9-4f31fad3d382",
              "name": "company",
              "value": "={{ $json.input_config.stage1.companies[0] }}",
              "type": "object"
            },
            {
              "id": "4b5fe273-05f5-4869-8d4e-c4184b57b72e",
              "name": "clean_document_data",
              "value": "={{ $json.cleansimulation.simulationRuns[0].generatedDocuments }}",
              "type": "array"
            },
            {
              "id": "a6908ae3-3525-4b62-9d64-5b200fed01d7",
              "name": "company_profile",
              "value": "={{ $json.companyprofile }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3696,
        2304
      ],
      "id": "c43de9e0-b7ad-4bb4-b69b-5d37a2447020",
      "name": "Edit Fields29",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3504,
        2448
      ],
      "id": "e988f7de-a609-4e6a-b8cb-b12d7515b93b",
      "name": "Merge5"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.enhancedsimulation }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "03b76d57-096f-4cc4-910d-4d3a30f37478"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c1fd9088-d987-47e1-bb98-73aaa21c35a0",
                    "leftValue": "={{ $json.clean_document_data }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2688,
        2560
      ],
      "id": "7aa7f33c-0faa-4116-8a19-1f92a6052fe9",
      "name": "Switch1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "clean_document_data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2400,
        2688
      ],
      "id": "8cd40696-3a6b-45b6-96ef-54aa8178910f",
      "name": "Split Out8"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "={{ Object.keys($binary).join(',') }}",
        "fileName": "={{ $runIndex === 0 \n    ? $('Switch3').first().json.companyProfile.company_name + '_'+ $now.format('yyyy-MM-dd') +'_Clean.zip' \n    : $('Switch3').first().json.companyProfile.company_name + '_'+$now.format('yyyy-MM-dd') +'.zip' \n}}"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        2400,
        3440
      ],
      "id": "17722198-d51c-42a1-89de-3a1ebae2c031",
      "name": "Compression2"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2288,
        2304
      ],
      "id": "eaaf15f9-9138-484b-9b96-2b7a120b4f55",
      "name": "Aggregate4"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "cleanpdffiles",
        "options": {
          "fileName": "={{ $('If5').item.json.file_name+'_clean.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4480,
        2064
      ],
      "id": "b7e213ca-3633-4883-b658-f6b8e54f5d2f",
      "name": "Convert to File17"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4144,
        1984
      ],
      "id": "ce8caf8b-cabf-4f2b-ad6b-e7db64b4cb04",
      "name": "Merge6"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -6240,
        2432
      ],
      "id": "48554089-19fe-49ae-a3fb-af1ad4f81db2",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "array"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "58dad027-559c-4f79-bd02-31aa0478746a",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -640,
        2688
      ],
      "id": "65d85558-f48f-47ca-948d-b7bc35309f90",
      "name": "Purchase Contract"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM simulation_documents\nWHERE project_simulation_id = $1\n;\n",
        "options": {
          "queryReplacement": "={{ $json.query.id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -5760,
        2432
      ],
      "id": "1fb0118c-aa2a-46ac-86fa-e3372fc66e83",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## PDF GENERATION ENDPOINT:\nExample usage: https://n8n.simthetic.ai/webhook/get_pdf?id=875",
        "height": 620,
        "width": 1060,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6256,
        2224
      ],
      "typeVersion": 1,
      "id": "71ad022f-c403-47d5-ab31-bb074595266f",
      "name": "Sticky Note"
    }
  ],
  "pinData": {
    "When clicking ‘Execute workflow’": [
      {
        "json": {
          "body": {
            "projectName": "Docent Project",
            "scenarioName": "Docent Scenario",
            "session_id": "21c8d724-fdbb-49db-9fbe-612d82e87645",
            "company_count": 1,
            "stage1": {
              "company_count": 1,
              "companies": [
                {
                  "company_name": "NeuroSynth MedTech",
                  "industry": "Healthcare",
                  "region": "United States",
                  "fiscal_year_end": "December 31",
                  "business_context": {
                    "business_model": "Subscription-based",
                    "description": "NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency."
                  }
                }
              ]
            },
            "profiles": [
              {
                "company_name": "NeuroSynth MedTech",
                "industry": "healthcare",
                "region": "United States",
                "fiscal_year_end": "December 31",
                "business_context": {
                  "ticker": null,
                  "sector": "Other",
                  "market_cap": null,
                  "primary_products": [
                    "Booking platform",
                    "Practice mgmt"
                  ],
                  "business_model": "Subscription-based",
                  "regulatory_environment": "HIPAA, HITECH",
                  "known_risks": [
                    "PHI handling",
                    "chargebacks/rebates",
                    "cutoff errors",
                    "missing documentation"
                  ],
                  "description": "NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.",
                  "revenue_model": "subscription",
                  "geographic_footprint": [
                    "United States"
                  ],
                  "key_customers": [
                    "clinics",
                    "hospitals"
                  ],
                  "seasonal_patterns": false,
                  "prior_audit_findings": null,
                  "management_integrity_concerns": null,
                  "internal_control_maturity": "developing"
                },
                "branding": {
                  "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg",
                  "primary_color": "#334155",
                  "secondary_color": "#0F172A",
                  "font_family": "Inter",
                  "document_style": "modern"
                },
                "revenue_model": "subscription",
                "company_specific_risks": null,
                "vendors": [
                  {
                    "name": "Synetix Global",
                    "entity_type": "vendor",
                    "industry": "healthcare",
                    "address": "575 Market St, Denver, CO",
                    "tags": [
                      "preferred",
                      "net30"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "banks": [
                  {
                    "name": "RiverRock Bank",
                    "entity_type": "bank",
                    "industry": "Financials",
                    "address": "383 Main Ave, Evergreen, CO",
                    "tags": [
                      "primary"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "shipping_partners": [
                  {
                    "name": "SwiftShip Logistics",
                    "entity_type": "shipper",
                    "industry": "Logistics",
                    "address": "1251 Freight Rd, Denver, CO",
                    "tags": [
                      "ground",
                      "tracking"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ]
              }
            ],
            "companies": [
              {
                "company_name": "NeuroSynth MedTech",
                "industry": "healthcare",
                "documents": [
                  {
                    "document_type": "Invoice (Goods)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Item_Quantity",
                      "Item_Price",
                      "Total_Amount_Due",
                      "Purchase_Order_Number",
                      "Delivery_/_Completion_Date",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number_/_Work_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Bank Statement",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Account_Number",
                      "Statement_Period",
                      "Opening_or_Beginning_or_Previous_Balance",
                      "Closing_or_Ending_Balance",
                      "Deposit_or_Credit_Totals",
                      "Withdrawal_or_Debit_Totals",
                      "Transactional_Details",
                      "Date_of_transaction",
                      "Transaction_Number",
                      "Balance",
                      "Bank_name"
                    ],
                    "optional_fields": [
                      "Deposit_or_Credit_Amount",
                      "Withdrawals_or_Debit_Amounts",
                      "Fees_Charged",
                      "Interest_Earned",
                      "Interest_Paid",
                      "Account_Alerts",
                      "Account_Closure_details",
                      "Account_type"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Shipping Document (Sending)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Shipping_Document_Number",
                      "Shipping_Doc_date",
                      "Customer_name",
                      "Customer_Address",
                      "Purchase_Order_Number",
                      "Item_Quantity",
                      "Product_Description",
                      "Supplier_Name",
                      "Supplier_Address",
                      "Date_Shipped",
                      "Shipping_carrier",
                      "Shipping_method",
                      "Tracking_number"
                    ],
                    "optional_fields": [
                      "Customer_Number",
                      "Supplier_Number",
                      "Product_Code",
                      "Item_Price",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Line_item_amount",
                      "Date_Delivered",
                      "Shipper's_name_and_address",
                      "Consignee's_name_and_address",
                      "Bill_of_lading_number",
                      "Packaging_details",
                      "Insurance_details",
                      "Customs_information",
                      "Proof_of_delivery",
                      "Received_Date",
                      "Shipping_or_Delivery_Terms"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Order Document (Sales and Purchases)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Purchase_Order_Number",
                      "Purchase_Order_Date",
                      "Supplier_Name",
                      "Customer_Name",
                      "Item_Quantity",
                      "Product_Description",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Item_Price",
                      "Total_Purchase_Order_Value",
                      "Delivery_Date"
                    ],
                    "optional_fields": [
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Payment_Terms",
                      "Terms_and_Conditions",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Disbursement Listing",
                    "source": "Internal",
                    "file_type": "CSV",
                    "required_fields": [
                      "Account_Number",
                      "Date_of_transaction",
                      "Transactional_Details",
                      "Transaction_Amount",
                      "Document Number",
                      "Transaction Description",
                      "Vendor Name",
                      "Vendor Number"
                    ],
                    "optional_fields": [],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  }
                ]
              }
            ],
            "warnings": []
          }
        }
      }
    ]
  },
  "repo": {
    "owner": "Isaakkamau",
    "name": "simthetic-n8n-backup"
  },
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-16T19:15:56.526Z",
      "updatedAt": "2025-09-16T19:15:56.526Z",
      "role": "workflow:owner",
      "workflowId": "EA6E4NnZXJ2wTsym",
      "projectId": "qQl0DgBrylkFr1iU"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-24T05:06:56.000Z",
  "versionId": "99598620-0547-4eee-a88c-23ed69d08c50"
}