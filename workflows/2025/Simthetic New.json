{
  "active": false,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Jsons",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "convert-to-csv",
            "type": "main",
            "index": 0
          },
          {
            "node": "convert-to-txt",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Convert to txt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert-to-csv": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert-to-txt": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to txt": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Compression1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "convert-to-csv",
            "type": "main",
            "index": 0
          },
          {
            "node": "convert-to-txt",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_jsons": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents": {
      "main": [
        [
          {
            "node": "extract_jsons",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "validate_documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        []
      ]
    },
    "Get Jsons": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "list-all-simulations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook3": {
      "main": [
        [
          {
            "node": "view-specific-simulation-documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list-all-simulations": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "view-specific-simulation-documents": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression1": {
      "main": [
        [
          {
            "node": "Decompress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decompress": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "Decompress1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decompress1": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook4": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Select rows from a table2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Select rows from a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          },
          {
            "node": "Select rows from a table7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Errors": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "validate_documents2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent5": {
      "main": [
        [
          {
            "node": "validate_documents3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents3": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    },
    "Insert rows in a table1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        [
          {
            "node": "Insert rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        []
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields10": {
      "main": [
        [
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Split Out5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields11": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Wire Transfer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Bank_Statement",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invoice(Goods)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Expenses Sub-Ledger",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Disbursement Listing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "invoices_services",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Purchase Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shipping Document (Sending)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shipping Document (Receiving)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Order Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent6": {
      "main": [
        [
          {
            "node": "AI Agent24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File5": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent8": {
      "main": [
        [
          {
            "node": "AI Agent16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent8",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent9": {
      "main": [
        [
          {
            "node": "AI Agent18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent9",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent10": {
      "main": [
        [
          {
            "node": "AI Agent19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent10",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent11": {
      "main": [
        [
          {
            "node": "AI Agent17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent11",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent12": {
      "main": [
        [
          {
            "node": "AI Agent20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent12",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent13": {
      "main": [
        [
          {
            "node": "AI Agent21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent13",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent14": {
      "main": [
        [
          {
            "node": "AI Agent22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent14",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent15": {
      "main": [
        [
          {
            "node": "AI Agent23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent15",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File6": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Convert to File9": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Convert to File10": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate5": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table4": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Edit Fields15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields15": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent7": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wire Transfer": {
      "main": [
        [
          {
            "node": "AI Agent6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bank_Statement": {
      "main": [
        [
          {
            "node": "AI Agent7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Invoice(Goods)": {
      "main": [
        [
          {
            "node": "AI Agent8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expenses Sub-Ledger": {
      "main": [
        [
          {
            "node": "AI Agent9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File7": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Disbursement Listing": {
      "main": [
        [
          {
            "node": "AI Agent10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File8": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "invoices_services": {
      "main": [
        [
          {
            "node": "AI Agent11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Purchase Order": {
      "main": [
        [
          {
            "node": "AI Agent12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shipping Document (Sending)": {
      "main": [
        [
          {
            "node": "AI Agent13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File11": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Shipping Document (Receiving)": {
      "main": [
        [
          {
            "node": "AI Agent14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File12": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "Order Document": {
      "main": [
        [
          {
            "node": "AI Agent15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File13": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 9
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Compression3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression3": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial": {
      "main": [
        [
          {
            "node": "Select rows from a table4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out5": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Aggregate5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook5": {
      "main": [
        [
          {
            "node": "Edit Fields12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields12": {
      "main": [
        [
          {
            "node": "Select rows from a table3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table3": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Convert to File14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Initial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table": {
      "main": [
        []
      ]
    },
    "Convert to File14": {
      "main": [
        [
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook7": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Respond to Webhook6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook8": {
      "main": [
        [
          {
            "node": "Get Jsons",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Convert to File5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent16": {
      "main": [
        [
          {
            "node": "Convert to File6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent16",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent17",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent17": {
      "main": [
        [
          {
            "node": "Convert to File9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent18": {
      "main": [
        [
          {
            "node": "Convert to File7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent18",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent19": {
      "main": [
        [
          {
            "node": "Convert to File8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent20",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent20": {
      "main": [
        [
          {
            "node": "Convert to File10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent21",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent21": {
      "main": [
        [
          {
            "node": "Convert to File11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent22",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent22": {
      "main": [
        [
          {
            "node": "Convert to File12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent23",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent23": {
      "main": [
        [
          {
            "node": "Convert to File13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent24",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent24": {
      "main": [
        [
          {
            "node": "Convert to File4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "Respond to Webhook7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out7": {
      "main": [
        [
          {
            "node": "Edit Fields16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "Aggregate6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        []
      ]
    },
    "Edit Fields16": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Wire Transfer1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Bank_Statement1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invoice(Goods)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Expenses Sub-Ledger1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Disbursement Listing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "invoices_services1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Purchase Order1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shipping Document (Sending)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shipping Document (Receiving)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Order Document1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent25": {
      "main": [
        [
          {
            "node": "AI Agent44",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent25",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent26": {
      "main": [
        [
          {
            "node": "AI Agent36",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent26",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent27": {
      "main": [
        [
          {
            "node": "AI Agent38",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent27",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File18": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "AI Agent28": {
      "main": [
        [
          {
            "node": "AI Agent39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent28",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File19": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "AI Agent29": {
      "main": [
        [
          {
            "node": "AI Agent37",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model19": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent29",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File20": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "AI Agent30": {
      "main": [
        [
          {
            "node": "AI Agent40",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model20": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent30",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File21": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "AI Agent31": {
      "main": [
        [
          {
            "node": "AI Agent41",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model21": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent31",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File22": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "AI Agent32": {
      "main": [
        [
          {
            "node": "AI Agent42",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model22": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent32",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File23": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "AI Agent33": {
      "main": [
        [
          {
            "node": "AI Agent43",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model23": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent33",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File24": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 9
          }
        ]
      ]
    },
    "Aggregate6": {
      "main": [
        [
          {
            "node": "Compression2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table5": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Edit Fields29",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields17": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent34": {
      "main": [
        [
          {
            "node": "AI Agent35",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model24": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent34",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wire Transfer1": {
      "main": [
        [
          {
            "node": "AI Agent25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bank_Statement1": {
      "main": [
        [
          {
            "node": "AI Agent34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Invoice(Goods)1": {
      "main": [
        [
          {
            "node": "AI Agent26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expenses Sub-Ledger1": {
      "main": [
        [
          {
            "node": "AI Agent27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Disbursement Listing1": {
      "main": [
        [
          {
            "node": "AI Agent28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "invoices_services1": {
      "main": [
        [
          {
            "node": "AI Agent29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Purchase Order1": {
      "main": [
        [
          {
            "node": "AI Agent30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shipping Document (Sending)1": {
      "main": [
        [
          {
            "node": "AI Agent31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shipping Document (Receiving)1": {
      "main": [
        [
          {
            "node": "AI Agent32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order Document1": {
      "main": [
        [
          {
            "node": "AI Agent33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial1": {
      "main": [
        [
          {
            "node": "Select rows from a table5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Aggregate4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook6": {
      "main": [
        [
          {
            "node": "Edit Fields18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields18": {
      "main": [
        [
          {
            "node": "Select rows from a table6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table6": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Convert to File25",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Initial1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File25": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent35": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent35",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent36": {
      "main": [
        [
          {
            "node": "Code15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent36",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent37": {
      "main": [
        [
          {
            "node": "Code18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent37",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent38": {
      "main": [
        [
          {
            "node": "Code16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent38",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent39": {
      "main": [
        [
          {
            "node": "Code17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent39",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent40": {
      "main": [
        [
          {
            "node": "Code19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent40",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent41": {
      "main": [
        [
          {
            "node": "Code20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent41",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent42": {
      "main": [
        [
          {
            "node": "Code21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent42",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent43": {
      "main": [
        [
          {
            "node": "Code22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent43",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent44": {
      "main": [
        [
          {
            "node": "Code14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model19": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent44",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields19": {
      "main": [
        [
          {
            "node": "Convert to File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Edit Fields19",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields20": {
      "main": [
        [
          {
            "node": "Convert to File16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code14": {
      "main": [
        [
          {
            "node": "Edit Fields20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File16": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields21": {
      "main": [
        [
          {
            "node": "Convert to File15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code15": {
      "main": [
        [
          {
            "node": "Edit Fields21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File15": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Code16": {
      "main": [
        [
          {
            "node": "Edit Fields22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent27",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields22": {
      "main": [
        [
          {
            "node": "Convert to File18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code17": {
      "main": [
        [
          {
            "node": "Edit Fields23",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent28",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields23": {
      "main": [
        [
          {
            "node": "Convert to File19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code18": {
      "main": [
        [
          {
            "node": "Edit Fields24",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields24": {
      "main": [
        [
          {
            "node": "Convert to File20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code19": {
      "main": [
        [
          {
            "node": "Edit Fields25",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields25": {
      "main": [
        [
          {
            "node": "Convert to File21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code20": {
      "main": [
        [
          {
            "node": "Edit Fields26",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields26": {
      "main": [
        [
          {
            "node": "Convert to File22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code21": {
      "main": [
        [
          {
            "node": "Edit Fields27",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields27": {
      "main": [
        [
          {
            "node": "Convert to File23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code22": {
      "main": [
        [
          {
            "node": "Edit Fields28",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields28": {
      "main": [
        [
          {
            "node": "Convert to File24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields29": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Split Out7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out8": {
      "main": [
        [
          {
            "node": "Edit Fields16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression2": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate4": {
      "main": [
        [
          {
            "node": "Update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File17": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Respond to Webhook7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Edit Fields18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table7": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Convert to File26",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File27",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File26": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to File27": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 3
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-29T17:31:09.573Z",
  "id": "bPa7I8nxXuxdQ2ll",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Simthetic New",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "simthetic",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4260,
        1140
      ],
      "id": "bc7824c3-4b51-4536-8ee6-d63d13e83ba8",
      "name": "Webhook",
      "webhookId": "e9d42047-0a81-4d41-8b83-7ae5776a301f"
    },
    {
      "parameters": {
        "content": "# Example Request:\n\ncurl -X POST https://n8n.simthetic.ai/webhook-test/simthetic \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"projectName\": \"Abc project\",\n    \"scenarioName\": \"Scenario 1\",\n    \"documents\": [\n      {\n        \"docType\": \"Invoice\",\n        \"variables\": [\n          {\n            \"name\": \"Invoice Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\", \"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Amount\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Mismatch\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Vendor Name\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"PO Reference\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"dependent\",\n            \"dependentOn\": \"Purchase Order.PO Number\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Purchase Order\",\n        \"variables\": [\n          {\n            \"name\": \"PO Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Total PO Value\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Incorrect\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Vendor Name\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Delivery Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Terms\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Payment Voucher\",\n        \"variables\": [\n          {\n            \"name\": \"Voucher ID\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Amount\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Mismatch\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Payee Name\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Payment Method\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"GL Code\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Bank Statement\",\n        \"variables\": [\n          {\n            \"name\": \"Transaction Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Withdrawal Amount\",\n            \"type\": \"float\",\n            \"min\": 0,\n            \"max\": 1000000,\n            \"spectrum\": [\"Incorrect\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Deposit Amount\",\n            \"type\": \"float\",\n            \"min\": 0,\n            \"max\": 1000000,\n            \"spectrum\": [\"Incorrect\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Balance\",\n            \"type\": \"float\",\n            \"min\": -1000000,\n            \"max\": 1000000,\n            \"spectrum\": [\"Negative\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Account Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Wire Transfer\",\n        \"variables\": [\n          {\n            \"name\": \"Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Withdrawal Amount\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Mismatch\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Payee\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Account Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          }\n        ]\n      }\n    ]\n  }'",
        "height": 700,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4640,
        800
      ],
      "typeVersion": 1,
      "id": "7af826d1-4338-48f1-9278-47ec8f395550",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42655bdb-2848-4148-8c7b-21468612e302",
              "name": "body",
              "value": "={{ $('convert-to-csv').item.json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3200,
        2000
      ],
      "id": "4ff4ffbf-043c-4739-b151-72dc3b66d5ff",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "simthetic-docs",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4160,
        2540
      ],
      "id": "3a8fb9c3-d5ce-4043-9bd9-e187e45b1c25",
      "name": "Webhook1",
      "webhookId": "f7449479-2c6d-4f88-ab8d-ab6eae14e2d5"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -1440,
        2520
      ],
      "id": "d1224469-2800-43a0-bbeb-8c5ebdf48c8a",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42655bdb-2848-4148-8c7b-21468612e302",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3240,
        2520
      ],
      "id": "915daac4-9bd3-4298-8b99-d3195c0d1f07",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "const makeSafe = (name) => name.replace(/[^a-zA-Z0-9-_]/g, '_');\n\nconst doc = $json.body; // FIX: Get actual document from nested \"body\"\n\nconst title = doc.title;\nconst data = doc.data;\nconst errorTypes = doc.errorTypes;\nconst errorDetails = doc.errorDetails;\n\nlet text = `===== ${title} =====\\n\\n`;\n\ntext += `--- Document Fields ---\\n`;\nfor (const [key, value] of Object.entries(data)) {\n  text += `${key}: ${value}\\n`;\n}\n\ntext += `\\n--- Error Types ---\\n`;\nerrorTypes.forEach(type => {\n  text += `- ${type}\\n`;\n});\n\ntext += `\\n--- Error Details ---\\n`;\nerrorDetails.forEach((err, i) => {\n  text += `Error ${i + 1}:\\n`;\n  text += `  Field: ${err.field}\\n`;\n  text += `  Original: ${err.original}\\n`;\n  text += `  Error: ${err.error}\\n`;\n  text += `  Type: ${err.type}\\n`;\n  text += `  Description: ${err.description}\\n\\n`;\n});\n\nreturn [\n  {\n    json: {\n      fileName: `${makeSafe(title)}.txt`,\n      fileContent: text,\n    }\n  }\n];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2580,
        2520
      ],
      "id": "10783805-5069-44cd-9066-f3ae983e2e15",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "976869e8-edcb-42d9-b11f-1b3ad9037680",
              "leftValue": "={{$json.body.format}}",
              "rightValue": "csv",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3700,
        2020
      ],
      "id": "9b62c164-7b7f-4264-9845-ed593c889d97",
      "name": "convert-to-csv"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d3acb3f3-f6bd-4416-ad8a-6d8a6f028801",
              "leftValue": "={{$json.body.format}}",
              "rightValue": "txt",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3700,
        2540
      ],
      "id": "b230690c-13ee-42e2-a372-511b7eaef856",
      "name": "convert-to-txt"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "fileContent",
        "binaryPropertyName": "={{ $json.fileContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2040,
        2520
      ],
      "id": "95452095-f485-43f6-a4a7-a67a7e054dd3",
      "name": "Convert to txt"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdf.creativebits.tech/api/v1/convert/html/pdf",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "X-API-KEY",
              "value": "1be1db51-6fee-46ad-8a2c-10ceb964764e"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "field",
              "value": "a1b2c3d4-5678-90ab-cdef-ghijklmnopqr"
            },
            {
              "name": "zoom",
              "value": "1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "converted.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2620,
        3120
      ],
      "id": "ce4b972f-84ca-490e-8736-5a8031714189",
      "name": "HTTP Request",
      "retryOnFail": false,
      "maxTries": 2,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\nconst doc = inputData.body;\n\nif (!doc || !doc.data) {\n  const errorHtml = `<!DOCTYPE html><html><head><title>No Data</title></head>\n    <body style=\"font-family: Georgia, serif; padding: 20px;\">\n    <p>No document data to display. Please check the input to this node.</p></body></html>`;\n  \n  return [{\n    json: {},\n    binary: {\n      data: {\n        data: Buffer.from(errorHtml, 'utf8').toString('base64'),\n        mimeType: 'text/html',\n        fileName: 'report.html'\n      }\n    }\n  }];\n}\n\nconst data = doc.data;\nconst title = doc.title || 'Financial Document';\n\n// Build HTML rows for each field\nconst dataRows = Object.entries(data).map(([key, value], idx) => `\n  <tr style=\"background-color: ${idx % 2 === 1 ? '#fff5f5' : '#ffffff'};\">\n    <td style=\"border: 1px solid #ccc; padding: 10px 12px; text-align: left;\">${key.replace(/_/g, ' ')}</td>\n    <td style=\"border: 1px solid #ccc; padding: 10px 12px; text-align: left; font-weight: 500;\">${value ?? ''}</td>\n  </tr>\n`).join('');\n\nconst htmlContent = `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${title}</title>\n</head>\n<body style=\"font-family: Georgia, serif; background-color: #f9f9f9; margin: 0; padding: 40px;\">\n  <div style=\"max-width: 850px; margin: auto; background: white; padding: 40px; border-radius: 8px; border: 1px solid #eee; box-shadow: 0 0 8px rgba(0,0,0,0.05);\">\n    <div style=\"text-align: center; margin-bottom: 40px;\">\n      <h1 style=\"font-size: 2.8em; color: #ff5757; margin: 0;\">Simthetic</h1>\n      <p style=\"font-size: 1.2em; color: #555; margin-top: 8px;\">${title}</p>\n    </div>\n\n    <h2 style=\"color: #333; font-size: 1.4em; border-bottom: 2px solid #ff5757; padding-bottom: 8px; margin-top: 0;\">Document Data</h2>\n    \n    <table style=\"width: 100%; border-collapse: collapse; font-size: 1em; margin-top: 20px;\">\n      <thead>\n        <tr style=\"background-color: #ff5757; color: white;\">\n          <th style=\"padding: 12px; text-align: left;\">Field</th>\n          <th style=\"padding: 12px; text-align: left;\">Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        ${dataRows}\n      </tbody>\n    </table>\n\n    <p style=\"font-size: 0.85em; color: #999; margin-top: 40px; text-align: center;\">\n      This is a system-generated accounting document for simulation purposes.\n    </p>\n  </div>\n</body>\n</html>`;\n\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: Buffer.from(htmlContent, 'utf8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'report.html'\n    }\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3240,
        3120
      ],
      "id": "af09e70d-a30e-4e33-b55f-2d3fe9deceff",
      "name": "Code3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f35412b3-c75a-43a3-969b-203049a9c40b",
              "leftValue": "={{$json.body.format}}",
              "rightValue": "=pdf",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3680,
        3140
      ],
      "id": "0d591f16-6945-449c-8464-c0f8c76c710d",
      "name": "If1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": " {\n    \"format\":\"pdf\",\n    \"title\": \"po - PO-1001\",\n    \"data\": {\n      \"PO Number\": \"\",\n      \"Total PO Value\": \"24500\",\n      \"Vendor Name\": \"Acme Corp\",\n      \"Delivery Date\": \"2023-13-15\",\n      \"Terms\": \"Net 30\"\n    },\n    \"errorTypes\": [\n      \"Missing\",\n      \"Incorrect\",\n      \"Invalid\"\n    ],\n    \"errorDetails\": [\n      {\n        \"field\": \"PO Number\",\n        \"original\": \"PO-1001\",\n        \"error\": \"\",\n        \"type\": \"Missing\",\n        \"description\": \"Applied 'Missing' error to make the PO untraceable.\"\n      },\n      {\n        \"field\": \"Total PO Value\",\n        \"original\": \"25000\",\n        \"error\": \"24500\",\n        \"type\": \"Incorrect\",\n        \"description\": \"Applied 'Incorrect' error to create a subtle value discrepancy.\"\n      },\n      {\n        \"field\": \"Delivery Date\",\n        \"original\": \"2023-11-15\",\n        \"error\": \"2023-13-15\",\n        \"type\": \"Invalid\",\n        \"description\": \"Applied 'Invalid' date format to test system parsing.\"\n      }\n    ]\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4420,
        2540
      ],
      "id": "22f14d75-222d-4c03-87c9-e706cb89c5f9",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst data = $input.all()[0].json;\n\n// Calculate total document count across all simulation runs\nlet totalDocumentCount = 0;\n\n// Loop through each simulation run and sum up the document counts\ndata.simulatedResponse.simulationRuns.forEach(run => {\n    totalDocumentCount += run.generatedDocuments.length;\n});\n\n// Return the result\nreturn [{\n    json: {\n        ...data,\n        document_count: totalDocumentCount\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2700,
        1120
      ],
      "id": "1ae52306-78f3-43b4-b13a-d78924e10b3f",
      "name": "Code5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bf263bb0-d738-4367-b559-939263559b6e",
              "leftValue": "={{ $('Code5').item.json.simulatedResponse.simulationProject }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1800,
        1120
      ],
      "id": "e97300f3-abfd-427d-915f-cd7228d39b0f",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "141bbaaa-3328-4d2a-87af-31446f6d4a2e",
              "name": "simulatedResponse",
              "value": "={{ $json.formattedResponse }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2880,
        1120
      ],
      "id": "adf499ba-b89d-4d48-9980-43dffeb62485",
      "name": "extract_jsons"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3100,
        1140
      ],
      "id": "744a0562-29d2-415e-b9a1-2f9d81e96643",
      "name": "validate_documents",
      "retryOnFail": true,
      "maxTries": 4,
      "waitBetweenTries": 2000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Financial Document Error Injection System\n\n## CONTEXT & PURPOSE\n\nYou are an AI system designed to inject realistic errors into financial documents for testing audit workflows. You will receive a set of distinct \"simulation runs,\" and your role is to process each run **independently**. For each simulation run, you must:\n\n1.  Analyze relationships between the documents _within that run_.\n2.  Understand which fields should match across those documents.\n3.  Apply the provided error spectrums strategically to create realistic audit scenarios.\n4.  Maintain document integrity while introducing testable errors.\n\n## INPUT FORMAT\n\nYou will receive a JSON object representing a full simulation project. Your task is to process the `simulationRuns` array within it.\n\n**Your primary input for error injection is the `errorSpectrum` object inside each document.** This object tells you exactly which errors you are allowed to apply to which fields.\n\n## ERROR SPECTRUM DEFINITIONS\n\n{{ $json.Errors.toJsonString() }}\n\n## DOCUMENT, LINKING FIELDS\n{{ $('Split Out').item.json.toJsonString() }}\n\n## DOCUMENT RELATIONSHIP ANALYSIS\n\n### CROSS-DOCUMENT DEPENDENCIES\n\nAnalyze  relationships using LINKING FIELDS injecting errors:\n\n\n## ERROR INJECTION STRATEGY\n\n### STEP 1: RELATIONSHIP MAPPING\n\nBefore applying errors, map all cross-document relationships using LINKING FIELDS:\n\n1. Identify matching values across documents\n2. Note dependent fields (variableType: \"dependent\")\n3. Catalog amount relationships\n4. Map reference chains (PO → Invoice → Voucher → Bank)\n\n### STEP 2: ERROR SPECTRUM\n\nApply errors using ERROR SPECTRUM DEFINITIONS in RANDOM Order, but one in each Edge_case\n\n### STEP 3: REALISTIC ERROR DISTRIBUTION\n\n- Don't apply all errors to one document\n- Maintain some error-free fields for baseline comparison\n- Create patterns auditors would actually encounter\n- Ensure some errors are obvious, others subtle\n\n### STEP 4: MAINTAIN AUDITABILITY\n\n- Keep enough correct data for audit trail reconstruction\n- Don't break all relationships simultaneously\n- Leave breadcrumbs for forensic analysis\n\n## CRITICAL ERROR COUNTING REQUIREMENTS\n\n**MANDATORY VALIDATION PROCESS:**\n\n1. **Track Every Error Applied**: As you process each document, maintain a running count of errors applied\n2. **One Error Per Spectrum Entry**: Each item in a variable's \"spectrum\" array = exactly ONE error applied\n3. **Accurate \\_errors Array**: The \"\\_errors\" array in each document must contain exactly the spectrum values you applied\n4. **Perfect Summary Matching**: Your errorSummary counts MUST exactly match the actual errors in processedDocuments\n\n**VALIDATION METHODOLOGY:**\n\n- Before finalizing your response, count all \"\\_errors\" array entries across all documents\n- Verify this matches your errorSummary.totalErrorsInjected\n- Count each error type (Missing, Invalid, etc.) in the actual documents\n- Verify these counts match your errorSummary.errorsByType\n- If counts don't match, revise your summary to be accurate\n\n**DOUBLE-CHECK REQUIREMENT:**\nAfter completing your JSON response, mentally verify:\n✓ Total errors in \\_errors arrays = errorSummary.totalErrorsInjected\n✓ Count of each error type in documents = errorsByType counts\n✓ No mathematical inconsistencies between actual data and summary\n\n## OUTPUT FORMAT\n\nReturn a JSON object with this exact structure. The `processedRuns` array should contain one object for each `simulationRun` from your input.\n\n```json\n{\n  \"simulationProject\": \"Financial Audit Simulation\",\n  \"companyProfile\": {\n    /* COPY EXACTLY from input.companyProfile (do not alter keys or values) */\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Payment Voucher\",\n          \"Bank Statement\",\n          \"Wire Transfer\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.PO Reference\", \"Purchase Order.Purchase_Order_Number\"],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Describe your planned use of allowed error types from each document’s errorSpectrum.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Purchase Order\": [\n          {\n            \"docId\": \"PO-001\",\n            \"docType\": \"Purchase Order\",\n            \"data\": {\n              /* The possibly mutated document after error injection (for Sim Run 1 keep original) */\n              /* Preserve original field names from input generatedDocuments[].data */\n            },\n            \"_errors\": [\n              /* Document-level list of applied error types for this doc instance, e.g., [\"Missing\",\"Mismatch\"].\n                 For Sim Run 1 (baseline), this MUST be an empty array [] */\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                /* Only fields you changed with their original values; omit fields you did not change */\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Missing\",\n                  \"originalValue\": \"PO-10001\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Applied per allowed errorSpectrum to simulate untraceable PO.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                /* COPY the document-level errorSpectrum array from input generatedDocuments[].errorSpectrum for traceability */\n              ]\n            }\n          }\n        ]\n        /* Repeat arrays for other docTypes present in this run, e.g., \"Invoice\", \"Bank Statement\", etc. */\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Example: Invoice amount mismatches the linked Purchase Order total value.\",\n            \"affectedDocuments\": [\"INV-001\", \"PO-001\"],\n            \"fields\": [\"Total_Amount_Due\", \"Total_Purchase_Order_Value\"]\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n```\n\n\n## QUALITY GUIDELINES\n\n1. **Realism**: Errors should reflect real-world audit findings\n2. **Detectability**: Mix obvious and subtle errors\n3. **Consistency**: Apply error spectrums as specified\n4. **Traceability**: Maintain metadata for error analysis\n5. **Balance**: Don't over-corrupt documents\n6. **Logic**: Maintain some internal document consistency\n7. **Accuracy**: Error counts in summary must be mathematically correct\n\n## CRITICAL INSTRUCTIONS\n\n- **PROCESS EACH `simulationRun` INDEPENDENTLY**. Do not cross-reference documents between different simulation runs.\n- ALWAYS preserve the exact field names from input\n- NEVER invent new fields not in the original data\n- APPLY errors only where spectrum is specified\n- MAINTAIN realistic business logic where possible\n- INCLUDE comprehensive metadata for audit trail analysis\n- ENSURE output format matches specification exactly\n- **VERIFY error counts in summary match actual applied errors**\n- **DOUBLE-CHECK all mathematical totals before finalizing response**\n\n## BASELINE RUN – NO ERROR INJECTION\n\nTreat the first object in simulationRuns whose simulationId equals \"Sim Run 1\" as a clean reference set.\n\nDo NOT mutate any field values in these documents.\n\nStill preserve the original errorSpectrum objects, but do not generate _errors arrays for this run.\n\nThe errorSummary for \"Sim Run 1\" must show:\n\njson\nCopy\nEdit\n\"totalErrorsInjected\": 0,\n\"errorsByType\": { \"Missing\": 0, \"Invalid\": 0, \"Mismatch\": 0, \"Incorrect\": 0, \"Negative\": 0 }\nApply your normal error-injection logic only to simulation runs after \"Sim Run 1\"\n\n## OVERALL WORKFLOW: PROCESSING SIMULATION RUNS\n\nYour primary task is to iterate through the `simulationRuns` array in the input JSON. For **each** object in the `simulationRuns` array, you will perform the complete error injection process described below (analysis, mapping, injection, and summary).\n\n**CRITICAL: ISOLATION OF RUNS**\n\n- You MUST treat each simulation run as a completely separate universe.\n- A document in \"Sim Run 1\" has no relationship to any document in \"Sim Run 2\".\n- All relationship analysis and error injection (especially \"Mismatch\" errors) must only consider documents within the _same_ simulation run.\n\nProcess the provided document set and return the complete JSON response with injected errors and full analysis.\n\n## IMPLEMENTATION CHECKLIST (do not skip)\n\n Iterate all simulationRuns; append to processedRuns 1:1.\n\n For each processed doc: copy errorSpectrum → _metadata.allowedErrorSpectrum.\n\n Only apply errors that are allowed for that doc.\n\n Every field you changed appears in _metadata.errorsApplied with full details.\n\n _errors lists the set of types applied to that doc (unique types, not per-field).\n\n errorSummary.totalErrorsInjected equals the total number of errorsApplied entries.\n\n errorSummary.errorsByType equals the counts by type from errorsApplied.\n\n Baseline (Sim Run 1) is untouched; counts all zero.\n\n Final JSON is valid and contains every run you received.\n\n\n\n## Here is the actual financial document to work on:\n{{ JSON.stringify($('Code5').item.json, null, 2) }}\n\n# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n\n## Note: For every element in simulationRuns, you must add a corresponding entry in processedRuns. Never skip a run.. DO NOT BE LAZY\n\n## DO NOT SKIP \"simulationId\": \"Sim Run 5\" All the 5 simulations must be available\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2060,
        1720
      ],
      "id": "8d084dc5-b496-4740-aec7-86b49c2656ee",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "errorMessage": "Your documents are invalid. Wrong format or missing fields"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -1620,
        1280
      ],
      "id": "2354aa42-f5b6-4f33-a6ca-4f6bf792598f",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=### Persona\n\nYou are an expert AI Data Synthesizer specializing in creating realistic, interconnected datasets for financial auditing and process analysis simulations. Your primary function is to generate complex business scenarios involving multiple documents (like Purchase Orders, Invoices, and Bank Statements) based on a high-level configuration. You must create logical and causal links between these documents.\n\n### Goal\n\nYour goal is to process an incoming JSON configuration that defines a simulation scenario. Based on this configuration, you will generate a detailed JSON output containing multiple \"simulation runs\". All document  mentioned should be processed and no document  should be skipped\n\n### Output JSON Format \n\nYou MUST produce a JSON object with exactly below structure :\n\n{\n  \"simulationProject\": \"<Project Name - Scenario ID>\",\n  \"simulationRuns\": [\n    {\n      \"simulationId\": \"<Simulation Run ID>\",\n      \"simulationNarrative\": \"<High-level narrative or storyline for this run>\",\n      \"metadata\": {\n        \"totalDocuments\": <Number of documents>,\n        \"documentCounts\": { \n          \"<Document Type 1>\": <Count>, \n          \"<Document Type 2>\": <Count>, \n          \"<Document Type 3>\": <Count> \n          /* repeat for all documents */\n        },\n        \"extra\": {\n          \"threads\": [ \n            /* Narrative threads linking multiple docs (AI to fill) */ \n          ],\n          \"fieldNameMap\": { \n            \"<Human Readable Field>\": \"<Canonical_Field_Name>\" \n            /* repeat for all fields */\n          },\n          \"edgeCaseHooks\": [ \n            /* Any rules for deduplication / anomaly injection */ \n          ]\n        }\n      },\n      \"generatedDocuments\": [\n        {\n          \"docId\": \"<Unique Doc ID>\",\n          \"docType\": \"<Document Type (e.g., Purchase Order, Invoice, Bank Statement)>\",\n          \"data\": {\n            /* MUST include all required fields for this docType, Also randomly include few optional fields */\n            \"<Canonical_Field_Name_1>\": \"<Value 1>\",\n            \"<Canonical_Field_Name_2>\": \"<Value 2>\",\n            \"<Canonical_Field_Name_3>\": \"<Value 3>\",\n            \"<Canonical_Field_Name_N>\": \"<Value N>\",\n            \"Source\": \"<Internal | External>\",\n            \"File_Type\": \"<PDF | DOCX | CSV | ...>\"\n          }\n        }\n        /* Repeat for other generated documents in this simulation run */\n      ]\n    }\n  ]\n}\n\n\nStrict Generation Rules\n\nA, Process all document, dont leave any document.\n\nB. Populate ALL required_fields\n\nFor each generatedDocuments[i], the data object must include every field listed in that doc spec’s required_fields[] from the input.\n\nUse the same key names as in required_fields[] (preserve underscores / exact casing).\n\nInclude two extra keys for routing: \"Source\" (from the doc spec source) and \"File_Type\" (from file_type).\n\nC. Coherent Transactions (cross-document linkage)\n\nUse linking_fields[] to propagate shared values across docs. Normalize label→field names:\n\n\"PO Number\" → \"Purchase_Order_Number\"\n\n\"Invoice Number\" → \"Invoice_Number\"\n\n\"Amount\" → For invoices: \"Total_Amount_Due\"; for bank/disbursement: a matching debit/credit field\n\n\"Date\" → appropriate date field per doc (e.g., \"Purchase_Order_Date\", \"Date_of_Invoice\", \"Date_of_transaction\")\n\n\"Vendor\" → unify as \"Supplier_Name\" (purchasing docs) and \"Vendor Name\" where applicable\n\nEnsure amounts and dates make logical sense in sequence:\n\nPurchase_Order_Date ≤ Date_of_Invoice ≤ Date_of_transaction\n\n1→n cases: sum of invoice amounts equals PO total; payments match invoice totals (full or partial per narrative).\n\nPrefer realistic entities from hints and profiles (preferred_vendors, banks, shipping_partners).\n\n\nD. Simulation Runs\n\nProduce max of 1 runs for each doument:\n\n1 PO → 1 Invoice → 1 Payment (full settlement).\n\n1 PO → multiple Invoices (partials sum to PO total; payment(s) mirror invoices).\n\nMultiple POs → 1 consolidated Invoice or a split shipment case (make math and dates coherent).\n\nProvide a short simulationNarrative describing the flow.\n\nD. Metadata\n\nmetadata.documentCounts must report counts by docType.\n\nmetadata.totalDocuments equals the total number of items in generatedDocuments.\n\nmetadata.extra must include:\n\nthreads[] describing coherent chains,\n\nfieldNameMap you used,\n\n\nE. Validation\n\nBefore returning, verify:\n\n- Only document  mentioned should be processed. No document  should be skipped\n\n- All required fields exist for each document in data. \n\n- Shared identifiers (PO/Invoice numbers) match across linked docs.\n\n- Amounts reconcile (PO = sum(invoices); payments = invoices paid per narrative).\n\n- Dates are chronological.\n\n\nBelow is the incoming JSON from a user:\n{{ JSON.stringify($('Get Jsons').item.json, null, 2) }}\n\nUse the Input JSON Format above.\n\nProduce the UPDATED Output JSON Format.\n\nIn every generatedDocuments[].data, populate all required_fields with coherent values, plus \"Source\" and \"File_Type\".\n\n\nEnsure end-to-end coherence across documents (IDs, amounts, dates, vendor/bank consistency).\n\nReturn 1 simulation runs with accurate metadata.\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else. Verify output to be valid json.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3500,
        1140
      ],
      "id": "e1b80f12-b4b2-42c1-8112-e6f6c3fc82dc",
      "name": "AI Agent1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3480,
        1360
      ],
      "id": "d999be5d-af1a-4962-8efb-05f4559b2ffb",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "=# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n",
              "role": "system"
            },
            {
              "content": "=Please make sure this json is a valid json if not please re-write it\n\n\n {{ $json.output }}"
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3440,
        1620
      ],
      "id": "ca34d603-2ed9-4413-8187-1e67e03b8bfd",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Validate DocumentAgent outputs if they are in correct format\n",
        "height": 700,
        "width": 1000,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3100,
        800
      ],
      "typeVersion": 1,
      "id": "61d41281-af68-4af9-88af-5bd8bbb42d1a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# **Test Plan** \n## Create a test plan",
        "height": 700,
        "width": 1420
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3840,
        0
      ],
      "typeVersion": 1,
      "id": "5517e225-92b6-43d5-811a-14f2cb61f144",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# **DocumentAgent**\n## Emit coherent document bundles per defined simulations in a given scenario eg a scenario can have this interconnected documents(Invoices, POs, Vouchers, Bank Statements, GL entries)",
        "height": 700,
        "width": 740,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3800,
        800
      ],
      "typeVersion": 1,
      "id": "5b0608c5-8aab-4f4f-8bd7-ccb93c41056b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# Output Generator\nGenerate documents for each simulation",
        "height": 700,
        "width": 1220,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1080,
        820
      ],
      "typeVersion": 1,
      "id": "0b9b43e6-f909-4d97-b16d-148796524a3a",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: $json.body\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3760,
        1140
      ],
      "id": "440e0bce-af3a-4c31-baf8-8dfff56a4f5a",
      "name": "Get Jsons"
    },
    {
      "parameters": {
        "content": "# SINGLE CSV, TXT, PDF Export",
        "height": 1020,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4800,
        2100
      ],
      "typeVersion": 1,
      "id": "316ae72d-f4db-48ea-8f68-68b894b3b931",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "path": "list-all-simulations",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4380,
        6220
      ],
      "id": "80d5f5be-7286-48c7-9102-c2c9e8fb6b56",
      "name": "Webhook2",
      "webhookId": "810ba5c7-a422-45ab-b1e4-25cbaf3406e6"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1960,
        6220
      ],
      "id": "97049295-ff9b-4360-bce1-3f24c85b0fb0",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "content": "# Viewing a specific simulation's documents (User clicks \"View\"):",
        "height": 460,
        "width": 4660,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4820,
        6580
      ],
      "typeVersion": 1,
      "id": "10d20ba3-390e-4211-87aa-2709b1102bad",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "path": "view-specific-simulation-documents",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4440,
        6800
      ],
      "id": "2af2b322-86f2-4737-aaff-1d5bcb82b796",
      "name": "Webhook3",
      "webhookId": "3090cfab-2223-4491-94e2-5aa47f4e1e3b"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1980,
        6800
      ],
      "id": "d87b7f7b-f884-4f45-97ca-204f6c6d7dae",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, project_name, scenario_name, created_at, document_count \n        FROM project_simulations \n        WHERE is_deleted = FALSE \nORDER BY created_at DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3100,
        6220
      ],
      "id": "be93dc27-6cd2-4fde-899b-7ff3b7fd2620",
      "name": "list-all-simulations",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "        SELECT file_name, document_data \n        FROM simulation_documents \nWHERE project_simulation_id =$1;",
        "options": {
          "queryReplacement": "={{ $json.query.query }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3060,
        6800
      ],
      "id": "9b2764dc-ab7b-4231-826f-bbfd390c1433",
      "name": "view-specific-simulation-documents",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Oops there was an issue when exporting the document"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -2360,
        3360
      ],
      "id": "546c6e31-0718-4714-a3c2-0442bf4146d5",
      "name": "Stop and Error1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdf.creativebits.tech/api/v1/convert/html/pdf",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "X-API-KEY",
              "value": "1be1db51-6fee-46ad-8a2c-10ceb964764e"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "field",
              "value": "a1b2c3d4-5678-90ab-cdef-ghijklmnopqr"
            },
            {
              "name": "zoom",
              "value": "1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "converted.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1880,
        3800
      ],
      "id": "ca310c61-c188-4299-b224-faef364ea056",
      "name": "HTTP Request1",
      "retryOnFail": false,
      "maxTries": 2,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Collect all incoming items\nconst allInputs = $input.all();\n\nlet documents = [];\n\nif (allInputs.length === 1) {\n  const payload = allInputs[0].json;\n\n  if (Array.isArray(payload)) {\n    // New shape: top-level array\n    documents = payload;\n  } else if (Array.isArray(payload.data)) {\n    // Legacy shape: { data: [...] }\n    documents = payload.data;\n  } else if (payload.document_data || payload.docType || payload.docId) {\n    // Single document already\n    documents = [payload];\n  } else {\n    throw new Error(\"Unrecognized input format. Expected array of docs, object with .data array, or document object.\");\n  }\n} else {\n  // Multiple input items: assume each is already a document\n  documents = allInputs.map(item => item.json);\n}\n\n// Emit each document as its own item\nreturn documents.map((doc, index) => ({\n  json: doc,\n  pairedItem: { item: index },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2880,
        3800
      ],
      "id": "40ba7472-c1ee-4b75-b686-70b2ddb93c61",
      "name": "Code4"
    },
    {
      "parameters": {
        "errorMessage": "Oops there was an issue when exporting the document"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -1660,
        3900
      ],
      "id": "bc954a25-0731-40a8-a87a-53c74978cac1",
      "name": "Stop and Error2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Runs once per item\nconst inputDoc = $json;\n\n// Support both shapes just in case\nconst doc = inputDoc.document_data ?? {};\n\n// Keep existing file name if provided, otherwise build a safe default\nconst fileName =\n  inputDoc.file_name ??\n  `${(doc.simulationId || 'UnknownSimulation').replace(/\\s+/g, '_')}/` +\n  `${(doc.docType || 'UnknownType').replace(/\\s+/g, '_')}_` +\n  `${doc.docId || 'UnknownDocID'}.txt`;\n\n// Preserve the entire document; then guarantee common fields exist.\n// Also normalize `_metadata`/`_errors` to friendly keys if missing.\nconst content = {\n  ...doc, // keeps file_type, company, branding, render_hints, watermark, footer, _metadata, _errors, etc.\n  docType: doc.docType ?? doc.type ?? 'UnknownType',\n  docId: doc.docId ?? 'UnknownDocID',\n  simulationId: doc.simulationId ?? inputDoc.simulationId,\n};\n\n// Provide aliases without overwriting if the canonical keys already exist\nif (doc._metadata !== undefined && content.metadata === undefined) {\n  content.metadata = doc._metadata;\n}\nif (doc._errors !== undefined && content.errors === undefined) {\n  content.errors = doc._errors;\n}\n// If errorSummary was kept outside the doc upstream, preserve it too\nif (inputDoc.errorSummary && content.errorSummary === undefined) {\n  content.errorSummary = inputDoc.errorSummary;\n}\n\nreturn { fileName, content };\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        3800
      ],
      "id": "d2dd69b2-70fd-4c3e-88d3-de13e4b91737",
      "name": "Code6"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Runs once per item and returns HTML as binary for PDF conversion.\nconst doc = $json;\n\n// ---------- guard ----------\nif (!doc || !doc.content) {\n  const errorHtml = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>No Data</title></head>\n  <body style=\"font-family: Arial, sans-serif; padding: 24px;\">\n    <h1>No document content found</h1>\n    <p>Please check the input to this node.</p>\n  </body></html>`;\n  return {\n    json: { error: 'No document content found.' },\n    binary: { data: { data: Buffer.from(errorHtml,'utf8').toString('base64'), mimeType: 'text/html', fileName: 'error_report.html' } }\n  };\n}\n\n// ---------- shorthands ----------\nconst c = doc.content || {};\nconst data = c.data || {};\nconst company = c.company || {};\nconst branding = company.branding || {};\nconst hints = c.render_hints || {};\nconst currency = (data.Currency_Unit || 'USD').toString();\n\n// ---------- theme ----------\nconst primary = branding.primary_color || '#1A237E';\nconst secondary = branding.secondary_color || '#3B82F6';\nconst fontFamily = branding.font_family || \"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif\";\nconst accent = (hints.header?.accent_color) || primary;\nconst logoSrc = branding.logo_data_uri || branding.logo_url || company.logo_url || '';\n\n// ---------- helpers ----------\nfunction esc(x) {\n  if (x === null || x === undefined) return '';\n  return String(x)\n    .replace(/&/g,'&amp;')\n    .replace(/</g,'&lt;')\n    .replace(/>/g,'&gt;')\n    .replace(/\"/g,'&quot;')\n    .replace(/'/g,'&#39;');\n}\n\nfunction isLikelyImageUrl(u='') {\n  if (!u) return false;\n  if (/^data:image\\/(png|jpe?g|gif|svg\\+xml);base64,/i.test(u)) return true;     // data URI\n  return /^https?:\\/\\/.+\\.(png|jpe?g|gif|svg)(\\?.*)?$/i.test(u);\n}\n\nfunction asList(v) {\n  if (Array.isArray(v)) return v.map(x => String(x).trim());\n  if (typeof v === 'string') return v.split(';').map(x => x.trim()).filter(Boolean);\n  if (v === undefined || v === null) return [];\n  return [String(v)];\n}\n\nfunction n(x) {\n  if (x === null || x === undefined || x === '') return undefined;\n  const num = Number(String(x).replace(/,/g,'').trim());\n  return Number.isFinite(num) ? num : undefined;\n}\n\nfunction money(x) {\n  const val = n(x);\n  if (val === undefined) return esc(x);\n  try {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(val);\n  } catch {\n    return `${currency} ${val.toLocaleString('en-US')}`;\n  }\n}\n\nfunction fieldChanged(field) {\n  const arr = c.metadata?.errorsApplied || c._metadata?.errorsApplied || [];\n  return arr.find(e => e.field === field);\n}\n\nfunction markedCell(field, valueHtml) {\n  const e = fieldChanged(field);\n  if (!e) return valueHtml;\n  const title = esc(`Original: ${e.originalValue} | Error: ${e.spectrum} - ${e.reason}`);\n  return `<span style=\"background:#fff1f1;border-left:3px solid #d9534f;padding:2px 4px;font-weight:600;\" title=\"${title}\">${valueHtml}</span>`;\n}\n\nfunction section(title, inner) {\n  return `\n  <div style=\"background:#fff;border:1px solid #e5e7eb;border-radius:10px;margin:16px 0;padding:18px;box-shadow:0 2px 6px rgba(0,0,0,.04);\">\n    <h3 style=\"margin:0 0 10px 0;color:${primary}\">${esc(title)}</h3>\n    ${inner}\n  </div>`;\n}\n\nfunction titleFromType() {\n  const t = (c.docType || '').toLowerCase();\n  if (t.includes('invoice') && t.includes('services')) return 'Invoice (Services)';\n  if (t.includes('invoice')) return 'Invoice';\n  if (t.includes('order_document_sales_and_purchases') || t.includes('purchase order') || t.includes('(po)')) return 'Purchase Order';\n  if (t.includes('shipping') && t.includes('receiv')) return 'Goods Received Note';\n  if (t.includes('shipping') && (t.includes('send') || t.includes('dispatch'))) return 'Delivery Note';\n  if (t.includes('bank_statement') || t.includes('bank statement')) return 'Bank Statement';\n  if (t.includes('wire')) return 'Wire Transfer Confirmation';\n  if (t.includes('contract')) return 'Purchase Contract';\n  return hints.header?.title || 'Document';\n}\n\nfunction normalizeType() {\n  const t = (c.docType || '').toLowerCase();\n  if (t.includes('order_document_sales_and_purchases') || t.includes('purchase order') || t.includes('(po)')) return 'po';\n  if (t.includes('invoice') && t.includes('services')) return 'invoice_services';\n  if (t.includes('invoice')) return 'invoice_goods';\n  if (t.includes('bank_statement') || t.includes('bank statement')) return 'bank';\n  if (t.includes('shipping') && t.includes('receiv')) return 'ship_recv';\n  if (t.includes('shipping')) return 'ship_send';\n  if (t.includes('wire')) return 'wire';\n  if (t.includes('contract')) return 'contract';\n  return 'generic';\n}\n\n// Header with logo + address\nfunction headerBlock() {\n  const showLogo = hints.header?.show_logo !== false; // default true\n  const docTitle = hints.header?.title || titleFromType();\n\n  const logoHtml =\n    (showLogo && isLikelyImageUrl(logoSrc))\n      ? `<img src=\"${esc(logoSrc)}\" alt=\"Logo\" referrerpolicy=\"no-referrer\"\n           style=\"max-height:56px;object-fit:contain\" onerror=\"this.style.display='none'\">`\n      : `<div style=\"font-weight:700;font-size:22px;\">${esc(company.name || '')}</div>`;\n\n  const addr = hints.address_block || {};\n  return `\n  <table style=\"width:100%; border-collapse:collapse;\">\n    <tr>\n      <td style=\"width:60%;vertical-align:top;\">\n        ${logoHtml}\n        <div style=\"font-size:12px;color:#444;margin-top:6px;\">\n          ${esc(addr.company_name || company.name || '')}<br>\n          ${esc(addr.address || '')}${addr.address ? '<br>' : ''}${esc(addr.region || company.region || '')}\n        </div>\n      </td>\n      <td style=\"text-align:right;vertical-align:top;\">\n        <div style=\"font-size:26px;font-weight:800;color:${accent}\">${esc(docTitle)}</div>\n        <div style=\"color:#666;margin-top:6px;\">Document ID: <strong>${esc(c.docId || '')}</strong></div>\n        <div style=\"color:#666;\">Simulation: <strong>${esc(c.simulationId || '')}</strong></div>\n        ${c.file_type ? `<div style=\"color:#666;\">File Type: <strong>${esc(c.file_type)}</strong></div>` : ''}\n      </td>\n    </tr>\n  </table>`;\n}\n\nfunction footerBlock() {\n  const f = hints.footer || {};\n  const prepared = f.prepared_on ? new Date(f.prepared_on) : undefined;\n  const dateStr = prepared && !isNaN(prepared) ? prepared.toISOString().slice(0,10) : (f.prepared_on || '');\n  return `\n  <div style=\"display:flex;justify-content:space-between;align-items:center;font-size:12px;color:#666;\">\n    <div>${f.prepared_by ? `Prepared by: <strong>${esc(f.prepared_by)}</strong>` : ''}</div>\n    <div>${dateStr ? `Prepared on: <strong>${esc(dateStr)}</strong>` : ''}</div>\n    ${hints.footer?.page_numbers ? `<div>Page <span class=\"pageNumber\"></span></div>` : ''}\n  </div>`;\n}\n\n// Print-safe, centered watermark with no wrapping\nfunction watermarkCss() {\n  const text = hints.watermark || '';\n  if (!text) return '';\n  const size = Number(hints.watermark_size_px ?? 48);\n  const opacity = Number(hints.watermark_opacity ?? 0.06);\n  return `\n  <div style=\"\n    position: fixed;\n    top: 50%; left: 50%;\n    transform: translate(-50%, -50%) rotate(-30deg);\n    pointer-events: none; z-index: 0; opacity: ${opacity};\n  \">\n    <div style=\"\n      font-size: ${size}px; font-weight: 900; letter-spacing: 2px;\n      white-space: nowrap; color: ${primary};\n    \">${esc(text)}</div>\n  </div>\n  <style>\n    @media print { .container { position: relative; z-index: 1; } }\n  </style>`;\n}\n\n// ---------- line items for PO/Invoice ----------\nfunction buildLineItems() {\n  const desc = asList(data.Product_Description || data.Description || data.Item_Description);\n  const qty = asList(data.Item_Quantity);\n  const unit = asList(data.Unit_of_measurement || data.Unit || data.UOM);\n  const price = asList(data.Item_Price || data.Unit_Price);\n  const maxLen = Math.max(desc.length, qty.length, unit.length, price.length);\n  const rows = [];\n  for (let i = 0; i < maxLen; i++) {\n    const qn = n(qty[i]);\n    const pr = n(price[i]);\n    const lineTotal = (qn !== undefined && pr !== undefined) ? qn * pr : undefined;\n    rows.push({\n      description: desc[i] ?? '',\n      quantity: qn ?? (qty[i] ?? ''),\n      unit: unit[i] ?? '',\n      unitPrice: pr ?? (price[i] ?? ''),\n      lineTotal\n    });\n  }\n  return rows.filter(r => (r.description || r.quantity || r.unitPrice));\n}\n\nfunction renderItemsTable() {\n  const items = buildLineItems();\n  if (!items.length) return '<div style=\"color:#666\">No line items present.</div>';\n  const rows = items.map((r, idx) => `\n    <tr style=\"background:${idx%2? '#fafafa':'transparent'}\">\n      <td style=\"border:1px solid #e5e7eb;padding:10px\">${esc(r.description)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">${esc(r.quantity)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px\">${esc(r.unit)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">${money(r.unitPrice)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">${r.lineTotal !== undefined ? money(r.lineTotal) : ''}</td>\n    </tr>`).join('');\n  const subtotal = items.reduce((s,r)=> s + (r.lineTotal || 0), 0);\n  return `\n  <table style=\"width:100%;border-collapse:collapse\">\n    <thead>\n      <tr style=\"background:${secondary};color:#fff\">\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Description</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Qty</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Unit</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Unit Price</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Line Total</th>\n      </tr>\n    </thead>\n    <tbody>${rows}</tbody>\n    <tfoot>\n      <tr>\n        <td colspan=\"4\" style=\"border:1px solid #e5e7eb;padding:10px;text-align:right;font-weight:700\">Subtotal</td>\n        <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right;font-weight:700\">${money(subtotal)}</td>\n      </tr>\n    </tfoot>\n  </table>`;\n}\n\n// ---------- type-specific renderers ----------\nfunction renderPO() {\n  const factsRows = [\n    ['PO Number', markedCell('Purchase_Order_Number', esc(data.Purchase_Order_Number || c.docId || ''))],\n    ['PO Date', markedCell('Purchase_Order_Date', esc(data.Purchase_Order_Date || ''))],\n    ['Supplier', markedCell('Supplier_Name', esc(data.Supplier_Name || ''))],\n    ['Buyer', esc(data.Customer_Name || company.name || '')],\n    ['Currency', esc(data.Currency_Unit || '')],\n    ['Delivery Date', esc(data.Delivery_Date || '')]\n  ].map((r, i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n\n  const totals = `\n    <div style=\"text-align:right;margin-top:12px;font-size:16px\">\n      <div> ${markedCell('Total_Purchase_Order_Value', money(data.Total_Purchase_Order_Value || 0))} </div>\n    </div>`;\n\n  return [\n    section('Purchase Order Details', `<table style=\"width:100%;border-collapse:collapse\">${factsRows}</table>`),\n    section('Items', renderItemsTable()),\n    section('Total', totals)\n  ].join('');\n}\n\nfunction renderInvoice(kind='goods') {\n  const factsRows = [\n    ['Invoice Number', esc(data.Invoice_Number || c.docId || '')],\n    ['Invoice Date', esc(data.Date_of_Invoice || '')],\n    ['Supplier', esc(data.Supplier_Name || '')],\n    ['Customer', esc(data.Customer_Name || company.name || '')],\n    ['Currency', esc(data.Currency_Unit || '')],\n    ['PO Number', markedCell('Purchase_Order_Number', esc(data.Purchase_Order_Number || ''))],\n    ['Delivery/Completion Date', esc(data['Delivery_/_Completion_Date'] || '')]\n  ].map((r, i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n\n  const totals = `\n    <div style=\"text-align:right;margin-top:12px;font-size:16px\">\n      <div> Total Amount Due: ${markedCell('Total_Amount_Due', money(data.Total_Amount_Due || 0))} </div>\n    </div>`;\n\n  return [\n    section(kind === 'services' ? 'Invoice (Services) Details' : 'Invoice Details', `<table style=\"width:100%;border-collapse:collapse\">${factsRows}</table>`),\n    section('Items', renderItemsTable()),\n    section('Total', totals)\n  ].join('');\n}\n\nfunction renderBank() {\n  const txnIds = asList(data.Transaction_Number);\n  const txnDates = asList(data.Date_of_transaction);\n  const detailsList = asList(data.Transactional_Details);\n  const amountsFromDetails = detailsList.map(d => {\n    const m = /Amount:\\s*([0-9\\.,]+)/i.exec(d || '');\n    return m ? n(m[1]) : undefined;\n  });\n\n  const rows = [];\n  const len = Math.max(txnIds.length, txnDates.length, detailsList.length);\n  for (let i=0;i<len;i++){\n    rows.push({\n      id: txnIds[i] || '',\n      date: txnDates[i] || '',\n      details: detailsList[i] || '',\n      amount: amountsFromDetails[i]\n    });\n  }\n\n  const ledgerRows = rows.map((r,i)=> `\n    <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n      <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(r.date)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(r.id)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(r.details)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:8px;text-align:right\">${r.amount !== undefined ? money(r.amount) : ''}</td>\n    </tr>`).join('');\n\n  const factsRows = [\n    ['Account Number', esc(data.Account_Number || '')],\n    ['Statement Period', esc(data.Statement_Period || '')],\n    ['Opening Balance', markedCell('Opening_or_Beginning_or_Previous_Balance', money(data.Opening_or_Beginning_or_Previous_Balance || 0))],\n    ['Withdrawal/Debit Totals', markedCell('Withdrawal_or_Debit_Totals', money(data.Withdrawal_or_Debit_Totals || 0))],\n    ['Deposit/Credit Totals', markedCell('Deposit_or_Credit_Totals', money(data.Deposit_or_Credit_Totals || 0))],\n    ['Closing Balance', markedCell('Closing_or_Ending_Balance', money(data.Closing_or_Ending_Balance || 0))],\n    ['Bank Name', esc(data.Bank_name || '')]\n  ].map((r, i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n\n  return [\n    section('Statement Summary', `<table style=\"width:100%;border-collapse:collapse\">${factsRows}</table>`),\n    section('Transactions', `\n      <table style=\"width:100%;border-collapse:collapse\">\n        <thead>\n          <tr style=\"background:${secondary};color:#fff\">\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Date</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Transaction #</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Details</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Amount</th>\n          </tr>\n        </thead>\n        <tbody>${ledgerRows || '<tr><td colspan=\"4\" style=\"padding:10px;color:#666\">No transactions.</td></tr>'}</tbody>\n      </table>`)\n  ].join('');\n}\n\nfunction renderShipping(mode) {\n  const facts = [\n    ['Document', mode === 'recv' ? 'Goods Received Note' : 'Delivery Note'],\n    ['Shipment Date', esc(data.Shipment_Date || data.Delivery_Date || '')],\n    ['Carrier', esc(data.Carrier_Name || data.Shipper || '')],\n    ['Tracking #', esc(data.Tracking_Number || '')],\n    ['Origin', esc(data.Origin || data.Ship_From || '')],\n    ['Destination', esc(data.Destination || data.Ship_To || '')],\n    ['PO Number', esc(data.Purchase_Order_Number || '')],\n    ['Invoice Number', esc(data.Invoice_Number || '')]\n  ];\n  const factRows = facts.map((r,i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n  return [\n    section('Shipment Details', `<table style=\"width:100%;border-collapse:collapse\">${factRows}</table>`),\n    section('Items', renderItemsTable())\n  ].join('');\n}\n\nfunction renderWire() {\n  const facts = [\n    ['Transfer Date', esc(data.Transfer_Date || data.Date_of_transaction || '')],\n    ['Amount', money(data.Amount || data.Withdrawal_or_Debit_Totals || '')],\n    ['Currency', esc(data.Currency_Unit || '')],\n    ['Sender Account', esc(data.Sender_Account || data.Account_Number || '')],\n    ['Receiver Account', esc(data.Receiver_Account || '')],\n    ['Bank', esc(data.Bank_name || '')],\n    ['Reference', esc(data.Reference || data.Transaction_Number || '')],\n    ['Invoice #', esc(data.Invoice_Number || '')],\n    ['PO #', esc(data.Purchase_Order_Number || '')]\n  ];\n  const factRows = facts.map((r,i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n  return section('Wire Transfer Details', `<table style=\"width:100%;border-collapse:collapse\">${factRows}</table>`);\n}\n\nfunction renderContract() {\n  const body = esc(data.Contract_Text || data.Snippet || data.Terms || 'No contract text provided.');\n  const metaRows = [\n    ['Effective Date', esc(data.Effective_Date || '')],\n    ['Supplier', esc(data.Supplier_Name || '')],\n    ['Buyer', esc(data.Customer_Name || company.name || '')],\n    ['PO/Reference', esc(data.Purchase_Order_Number || data.Reference || '')]\n  ].map((r,i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n  return [\n    section('Contract Metadata', `<table style=\"width:100%;border-collapse:collapse\">${metaRows}</table>`),\n    section('Excerpt', `<div style=\"white-space:pre-wrap;line-height:1.6\">${body}</div>`)\n  ].join('');\n}\n\n// Errors appendix (applied + cross-doc)\nfunction renderErrorsAppendix() {\n  let errorsHtml = '';\n  const applied = c.metadata?.errorsApplied || c._metadata?.errorsApplied || [];\n  if (applied.length) {\n    const rows = applied.map((e,i)=> `\n      <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.field)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.spectrum)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.originalValue ?? '')}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.errorValue ?? '')}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.reason)}</td>\n      </tr>`).join('');\n    errorsHtml += section('Errors Applied', `\n      <table style=\"width:100%;border-collapse:collapse\">\n        <thead>\n          <tr style=\"background:${secondary};color:#fff\">\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Field</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Type</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Original</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Error Value</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Reason</th>\n          </tr>\n        </thead>\n        <tbody>${rows}</tbody>\n      </table>`);\n  }\n\n  const cross = c.errorSummary?.crossDocumentErrors || [];\n  if (cross.length) {\n    const rows = cross.map((e,i)=> `\n      <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.description)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc((e.affectedDocuments || []).join(', '))}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc((e.fields || []).join(', '))}</td>\n      </tr>`).join('');\n    errorsHtml += section('Cross-Document Errors', `\n      <table style=\"width:100%;border-collapse:collapse\">\n        <thead>\n          <tr style=\"background:${secondary};color:#fff\">\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Description</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Affected Docs</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Fields</th>\n          </tr>\n        </thead>\n        <tbody>${rows}</tbody>\n      </table>`);\n  }\n\n  return errorsHtml;\n}\n\n// ---------- choose template ----------\nlet main;\nswitch (normalizeType()) {\n  case 'po':               main = renderPO(); break;\n  case 'invoice_services': main = renderInvoice('services'); break;\n  case 'invoice_goods':    main = renderInvoice('goods'); break;\n  case 'bank':             main = renderBank(); break;\n  case 'ship_recv':        main = renderShipping('recv'); break;\n  case 'ship_send':        main = renderShipping('send'); break;\n  case 'wire':             main = renderWire(); break;\n  case 'contract':         main = renderContract(); break;\n  default: {\n    const rows = Object.entries(data).map(([k,v],i)=>`\n      <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(k)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${markedCell(k, esc(v))}</td>\n      </tr>`).join('');\n    main = section('Fields', `<table style=\"width:100%;border-collapse:collapse\">${rows}</table>`);\n  }\n}\n\nconst appendix = renderErrorsAppendix();\n\n// ---------- final HTML ----------\nconst html = `<!DOCTYPE html>\n<html style=\"-webkit-print-color-adjust:exact;color-adjust:exact;\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${esc(titleFromType())} - ${esc(c.docId || '')}</title>\n  <style>\n    @page { margin: 18mm; }\n    body { font-family:${fontFamily}; margin:0; padding:0; background:#f6f7fb; color:#111827; }\n    .container { max-width:900px; margin:0 auto; padding:24px; position:relative; z-index:1; }\n    .card { background:#fff; border:1px solid #e5e7eb; border-radius:12px; padding:18px; box-shadow:0 8px 20px rgba(0,0,0,.04); }\n    .brand-bar { height:6px; background:${primary}; border-radius:12px 12px 0 0; }\n  </style>\n</head>\n<body>\n  ${watermarkCss()}\n  <div class=\"container\">\n    <div class=\"card\">\n      <div class=\"brand-bar\"></div>\n      ${headerBlock()}\n      ${section('Parties & Roles', `\n        <table style=\"width:100%;border-collapse:collapse\">\n          <tr style=\"background:#fafafa\">\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">Issuer Role</td>\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(hints.issuer_role || '')}</td>\n          </tr>\n          <tr>\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">Counterparty Role</td>\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(hints.counterparty_role || '')}</td>\n          </tr>\n        </table>\n      `)}\n      ${main}\n      ${appendix}\n      <hr style=\"border:none;border-top:1px solid #e5e7eb;margin:18px 0\">\n      ${footerBlock()}\n    </div>\n  </div>\n</body>\n</html>`;\n\n// ---------- output binary ----------\nconst outName = (doc.fileName || `${(c.simulationId||'Sim').replace(/\\s+/g,'_')}_${(c.docType||'Document').replace(/\\s+/g,'_')}_${c.docId||'ID'}.txt`)\n  .replace(/\\//g,'_')\n  .replace(/\\.txt$/i,'.html');\n\nreturn {\n  json: {},\n  binary: {\n    data: {\n      data: Buffer.from(html, 'utf8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: outName\n    }\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2300,
        3800
      ],
      "id": "6a4e56aa-7976-4245-8f4d-76f8f5a930a5",
      "name": "Code7"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "converted.pdf",
        "fileName": "simthetic.zip",
        "binaryPropertyOutput": "simthetic.pdfs"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -1660,
        3700
      ],
      "id": "f4271d3d-3d28-45ff-8e47-4ca7e495d535",
      "name": "Compression"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "converted.pdf",
        "fileName": "test.zip"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -2360,
        3100
      ],
      "id": "f927ed2a-478a-41df-a6d6-76710fea43d9",
      "name": "Compression1"
    },
    {
      "parameters": {
        "outputPrefix": "test_"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -2060,
        3100
      ],
      "id": "bb670015-cf45-4e09-acf4-bc1cd757d8d3",
      "name": "Decompress"
    },
    {
      "parameters": {
        "content": "# Bulk PDF or Excel export file genearation:\n## example usage: \nhttps://n8n.simthetic.ai/webhook/simthetic-bulk-docs?project_id=48&format=excel\nhttps://n8n.simthetic.ai/webhook/simthetic-bulk-docs?project_id=48&format=pdf",
        "height": 1240,
        "width": 4640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4800,
        3520
      ],
      "typeVersion": 1,
      "id": "1a9d3556-83f9-4ea0-b233-45ec3a2b96a2",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "binaryPropertyName": "simthetic.pdfs",
        "outputPrefix": "test_"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -1320,
        3700
      ],
      "id": "c87acc44-5663-4633-96ac-971fcca2e257",
      "name": "Decompress1"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        840,
        4240
      ],
      "id": "b3c7066b-5a9f-4cc7-bb75-983c1dbfe00a",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "path": "simthetic-bulk-docs",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4640,
        4160
      ],
      "id": "1d786de5-3915-4cd9-bf4b-278868dcbb06",
      "name": "Webhook4",
      "webhookId": "9f73e00d-4430-4f04-8bc3-b6eec8df887f"
    },
    {
      "parameters": {
        "jsCode": "// Helper to parse title like \"disbursement_listing - DL-901\"\nfunction parseTitle(title = \"\") {\n  const [rawType = \"\", rawId = \"\"] = title.split(\" - \").map(s => s.trim());\n  return { docType: rawType, docId: rawId };\n}\n\nconst flattened = items.map(i => {\n  // Drill into the nested body where the document actually is\n  const inner = i?.json?.body?.body || {};\n  const { format = \"\", title = \"\", data = {} } = inner;\n  const { docType, docId } = parseTitle(title);\n\n  return {\n    json: {\n      DocType: docType,\n      DocId: docId,\n      Format: format,\n      ...data,\n    },\n  };\n});\n\nreturn flattened;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        2000
      ],
      "id": "5d0a241d-1084-4f0c-bdb8-627173bd3044",
      "name": "Code13"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2060,
        2000
      ],
      "id": "91c31f63-f8a1-4f01-b079-6d786bd2ba9f",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "afa2e46d-e500-4261-ae91-c9d393918588",
              "name": "project_id",
              "value": "={{ $('Webhook4').item.json.query.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        4440
      ],
      "id": "c13512f2-2856-4397-a0ad-a416ca63609a",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "project_simulation_id",
              "value": "={{ $('Edit Fields5').item.json.project_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1920,
        4440
      ],
      "id": "f606cd72-ad71-4fcb-aabf-7f6a472e4118",
      "name": "Select rows from a table",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Single csv/excel export",
        "height": 480,
        "width": 2060,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3800,
        1780
      ],
      "typeVersion": 1,
      "id": "1f01f938-6092-4ef7-8297-783f8f8779d2",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## Single txt export",
        "height": 480,
        "width": 2060,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3820,
        2360
      ],
      "typeVersion": 1,
      "id": "90f9c444-ad1b-4a04-a601-d14c3581fb59",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "## Single pdf export",
        "height": 480,
        "width": 2060,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3840,
        2940
      ],
      "typeVersion": 1,
      "id": "93c9249b-a9a3-4247-81aa-60beac631ece",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "afa2e46d-e500-4261-ae91-c9d393918588",
              "name": "project_id",
              "value": "={{ $('Webhook4').item.json.query.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3400,
        3800
      ],
      "id": "cd5f4d7c-4456-46e0-9bd7-ec611a75899e",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "project_simulation_id",
              "value": "={{ $json.project_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3100,
        3800
      ],
      "id": "e42a7eb7-79fd-4d13-90c4-60f06a008a6f",
      "name": "Select rows from a table1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8385aac1-f904-4ae8-b657-00e615828980",
              "leftValue": "={{ $json.query.format }}",
              "rightValue": "=pdf",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4020,
        3820
      ],
      "id": "7abd9d80-a086-453b-9fac-00d9c50b5126",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6d7636c7-9b53-4e3a-8fcb-a01fc1567ad5",
              "leftValue": "={{ $json.query.format }}",
              "rightValue": "excel",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3960,
        4440
      ],
      "id": "5f1e7632-9b11-4970-88af-2f2e40f4873f",
      "name": "If3"
    },
    {
      "parameters": {
        "content": "# Listing all simulations for the main page",
        "height": 620,
        "width": 4660,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4820,
        5920
      ],
      "typeVersion": 1,
      "id": "7a54adc6-77e9-4173-b1c9-44ee06bdafda",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# PDF",
        "height": 360,
        "width": 3080,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4040,
        3660
      ],
      "typeVersion": 1,
      "id": "9884f607-34b3-4ef6-8566-d619cbcb66a6",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# Excel",
        "height": 360,
        "width": 3080,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4020,
        4300
      ],
      "typeVersion": 1,
      "id": "c6068ffb-6206-4571-bd79-bf2a6994de6b",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import zipfile\nimport base64\nimport io\n\n# Get all input items \nitems = _input.all()\n\nprint(f\"Processing {len(items)} items for ZIP creation\")\n\n# Create a BytesIO object to hold the ZIP file in memory\nzip_buffer = io.BytesIO()\n\n# Create a ZIP file\nwith zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n    for i, item in enumerate(items):\n        try:\n            # Debug: Print binary keys\n            if 'binary' not in item:\n                print(f\"Item {i} skipped: No binary key\")\n                continue\n\n            binary_keys = list(item['binary'].keys())\n            if not binary_keys:\n                print(f\"Item {i} skipped: Binary key is empty\")\n                continue\n\n            key = binary_keys[0]  # Use the first binary key (e.g., 'test_0', 'data')\n            binary_data = item['binary'][key]\n\n            pdf_data = binary_data.get('data')\n            original_filename = binary_data.get('fileName', f'document_{i+1}.pdf')\n\n            # Fallback for file extension\n            if not original_filename.endswith('.pdf'):\n                pdf_filename = original_filename.replace('.html', '.pdf')\n            else:\n                pdf_filename = original_filename\n\n            # Decode base64 to bytes\n            pdf_bytes = base64.b64decode(pdf_data)\n\n            # Check it's a valid PDF\n            if pdf_bytes.startswith(b'%PDF'):\n                print(f\"Adding valid PDF: {pdf_filename} ({len(pdf_bytes)} bytes)\")\n                zip_file.writestr(pdf_filename, pdf_bytes)\n            else:\n                print(f\"Warning: {pdf_filename} doesn't look like a PDF, adding as INVALID_{pdf_filename}\")\n                zip_file.writestr(f\"INVALID_{pdf_filename}\", pdf_bytes)\n\n        except Exception as e:\n            print(f\"Error processing item {i}: {str(e)}\")\n            continue\n\n# Finalize ZIP\nzip_buffer.seek(0)\nzip_bytes = zip_buffer.read()\nzip_base64 = base64.b64encode(zip_bytes).decode('utf-8')\n\nprint(f\"ZIP created: {len(zip_bytes)} bytes, {len(items)} items\")\n\n# Return final ZIP as binary\nreturn [{\n    'json': {\n        'message': f\"ZIP created with {len(items)} files\",\n        'fileCount': len(items),\n        'zipSizeBytes': len(zip_bytes)\n    },\n    'binary': {\n        'data': {\n            'data': zip_base64,\n            'fileName': 'simulation_documents.zip',\n            'mimeType': 'application/zip'\n        }\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1100,
        3700
      ],
      "id": "5f7a451c-157b-4110-85da-728d4e0a205e",
      "name": "Code8"
    },
    {
      "parameters": {
        "jsCode": "  // 1. Build the array of document-objects\n  const allDocs = items.map(item => item.json);\n\n  // 2. Get the company name from the input data (using array index instead of .last())\n  const inputData = $('Select rows from a table2').item.json;\n  const companies = inputData.input_config.companies;\n  const companyName = companies[companies.length - 1].company_name;\n\n  // 3. Wrap it in an object so `json` is an object, adding company_name below project_simulation_id\n  return [\n    {\n      json: {\n        company_name: companyName,\n        docs: allDocs\n        \n      }\n    }\n  ];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        4440
      ],
      "id": "2385ea3d-f1d6-4243-9d4c-60e639d454d6",
      "name": "Code9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://34.59.1.191:8000/process-documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -420,
        4440
      ],
      "id": "188d7769-34b0-420c-9ba0-a121145ce083",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2060,
        1980
      ],
      "id": "2db8d08a-69d0-45e1-83d2-c62f732a0792",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "project_name": "={{ $('Get Jsons').item.json.companies[0].company_name }}",
            "document_count": "={{ $json.document_count }}",
            "scenario_name": "={{ $('Get Jsons').item.json.session_id }}",
            "input_config": "={{ $('Webhook').first().json.body }}",
            "created_at": "={{ $now }}",
            "cleansimulation": "={{ $json.simulatedResponse\n }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "project_name",
              "displayName": "project_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "scenario_name",
              "displayName": "scenario_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "document_count",
              "displayName": "document_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "input_config",
              "displayName": "input_config",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "is_deleted",
              "displayName": "is_deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cleansimulation",
              "displayName": "cleansimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2500,
        1120
      ],
      "id": "cbfe452b-65ff-4911-90f4-f139babdf92d",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $('Edit Fields5').item.json.project_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2840,
        4440
      ],
      "id": "bc824f3b-b80d-40dd-b144-f9035b783bd4",
      "name": "Select rows from a table2",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "74d35356-73f0-4dc1-90c4-b3b6b0da9526",
              "name": "=company_name",
              "value": "={{ $('Select rows from a table2').item.json.input_config.companies.last().company_name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2620,
        4440
      ],
      "id": "99c8cbaf-e3e7-4a15-8ad8-b53de8b4fbf8",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.companies[0].documents",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -3600,
        320
      ],
      "id": "7e617349-0ff0-488c-9f1c-bf5db431f6f3",
      "name": "Split Out"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.document_type }}",
                    "rightValue": "Invoice",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "a325fd0e-6321-4164-91ae-0c8080cd9aae"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Invoice (Goods)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7f451e1-f464-4d75-b202-aba17c52be5f",
                    "leftValue": "={{ $json.document_type }}",
                    "rightValue": "Bank",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Bank Statement"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a3f65591-565e-409e-be13-6cd6fb0d3f27",
                    "leftValue": "={{ $json.document_type }}",
                    "rightValue": "Shipping",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Shipping Document (Sending)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e3eb865a-1580-4294-aeee-8d7412806f23",
                    "leftValue": "={{ $json.document_type }}",
                    "rightValue": "Order",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Order Document (Sales and Purchases)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "43c294d4-fd70-4ad9-b4cf-c39cb93c6326",
                    "leftValue": "={{ $json.document_type }}",
                    "rightValue": "Disbursement",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Disbursement Listing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2340,
        1740
      ],
      "id": "b1f1c9c4-e96d-4cd8-af06-dc7df550c9ce",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20f0bdc1-ecd9-4ff0-8623-6736f8a0621c",
              "name": "Errors",
              "value": "[\n  {\n    \"Edge_Case\": \"Timing/Cutoff errors\",\n    \"Errors\": [\n      {\n        \"Error\": \"Unrecorded liability\",\n        \"How_it_surfaces\": \"Invoice dated before year-end, recorded after\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\"]\n      },\n      {\n        \"Error\": \"Late invoice\",\n        \"How_it_surfaces\": \"Service date in prior period, invoice generated late\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\"]\n      },\n      {\n        \"Error\": \"Cash basis error\",\n        \"How_it_surfaces\": \"Payment made, but invoice never recorded\",\n        \"Relevant_documents\": [\"Bank Statement\", \"GL\"]\n      },\n      {\n        \"Error\": \"Backdated invoice\",\n        \"How_it_surfaces\": \"Backdated invoice to shift expenses\",\n        \"Relevant_documents\": [\"GL\", \"Invoice\", \"Purchase Order\", \"Bank Statement\", \"Wire\"]\n      },\n      {\n        \"Error\": \"Late payment\",\n        \"How_it_surfaces\": \"Recurring expense paid late, pushing recognition out of period\",\n        \"Relevant_documents\": [\"Bank Statement\", \"GL\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Mismatch between linked documents\",\n    \"Errors\": [\n      {\n        \"Error\": \"Amount mismatch\",\n        \"How_it_surfaces\": \"Invoice amount > PO amount\",\n        \"Relevant_documents\": [\"Invoice\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Item/service mismatch\",\n        \"How_it_surfaces\": \"Invoice includes items/services not on the PO\",\n        \"Relevant_documents\": [\"Invoice\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Payment mismatch\",\n        \"How_it_surfaces\": \"Bank payment amount ≠ invoice amount (partial or overpayment)\",\n        \"Relevant_documents\": [\"Invoice\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Missing PO\",\n        \"How_it_surfaces\": \"Missing PO but invoice exists (unauthorized purchase)\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Duplicate invoice\",\n        \"How_it_surfaces\": \"Duplicate invoice number with different amounts\",\n        \"Relevant_documents\": [\"GL\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Vendor irregularities\",\n    \"Errors\": [\n      {\n        \"Error\": \"Unapproved vendor\",\n        \"How_it_surfaces\": \"Unapproved vendor used for recurring payments\",\n        \"Relevant_documents\": [\"GL\"]\n      },\n      {\n        \"Error\": \"Conflict of interest\",\n        \"How_it_surfaces\": \"Employee-owned vendor (conflict of interest)\",\n        \"Relevant_documents\": [\"GL\"]\n      },\n      {\n        \"Error\": \"Name mismatch\",\n        \"How_it_surfaces\": \"Vendor name subtly altered (e.g., ‘Acme Ltd.’ vs ‘ACME Limited’)\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Purchase Order\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Shell company\",\n        \"How_it_surfaces\": \"Shell company with no service description in invoice\",\n        \"Relevant_documents\": [\"Invoice\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Split invoices\",\n        \"How_it_surfaces\": \"Split invoices just under approval thresholds to avoid escalation\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Bank Statement\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Suspicious amounts or frequencies\",\n    \"Errors\": [\n      {\n        \"Error\": \"Round dollar\",\n        \"How_it_surfaces\": \"Round-dollar invoices (e.g., $10,000 exactly)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Identical series\",\n        \"How_it_surfaces\": \"Invoice series with near-identical line items\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Odd frequency\",\n        \"How_it_surfaces\": \"Odd-frequency payments (e.g., weekly for annual services)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Same day payments\",\n        \"How_it_surfaces\": \"Multiple payments to same vendor on same day\",\n        \"Relevant_documents\": [\"Bank Statement\", \"Wire\", \"GL\"]\n      },\n      {\n        \"Error\": \"Same invoice\",\n        \"How_it_surfaces\": \"Same invoice reused across months\",\n        \"Relevant_documents\": [\"Invoice\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Description / Documentation Anomalies\",\n    \"Errors\": [\n      {\n        \"Error\": \"Vague\",\n        \"How_it_surfaces\": \"Missing or vague service descriptions\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Description mismatch\",\n        \"How_it_surfaces\": \"Descriptions that don’t match GL category or PO\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Keywords\",\n        \"How_it_surfaces\": \"Suspicious keywords (e.g., ‘consulting’, ‘miscellaneous’, ‘special project’)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Calculation errors\",\n        \"How_it_surfaces\": \"Broken field logic (e.g., total ≠ line item sum)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Fake contact\",\n        \"How_it_surfaces\": \"Fake email/contact on vendor invoice\",\n        \"Relevant_documents\": [\"Invoice\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Systemic Process Gaps\",\n    \"Errors\": [\n      {\n        \"Error\": \"No PO\",\n        \"How_it_surfaces\": \"No three-way match because PO was verbal\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Unapproved method\",\n        \"How_it_surfaces\": \"Payment processed via manual wire outside normal AP system\",\n        \"Relevant_documents\": [\"Wire Transfer\", \"GL\", \"Invoice\"]\n      },\n      {\n        \"Error\": \"Unapproved payer\",\n        \"How_it_surfaces\": \"Invoice processed via personal email and attached PDF\",\n        \"Relevant_documents\": [\"Invoice\", \"Bank Statement\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"External Discrepancies\",\n    \"Errors\": [\n      {\n        \"Error\": \"Description mismatch\",\n        \"How_it_surfaces\": \"Payment memo contradicts invoice purpose\",\n        \"Relevant_documents\": [\"Invoice\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Payment returned\",\n        \"How_it_surfaces\": \"Bank statement shows a round-trip payment pattern (money returned)\",\n        \"Relevant_documents\": [\"Bank Statement\"]\n      }\n    ]\n  }\n]",
              "type": "array"
            },
            {
              "id": "7a4009e2-8fb2-4a75-8c5d-0f6baff37e60",
              "name": "Required Errors",
              "value": "={{ $json.data[0].edge_case_hooks }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3100,
        320
      ],
      "id": "b5d30e31-ce8b-40db-923e-9d93f15259d5",
      "name": "Errors"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Financial Document Error Injection System\n\n## CONTEXT & PURPOSE\n\nYou are an AI system designed to inject realistic errors into financial documents for testing audit workflows. You will receive a set of distinct \"simulation runs,\" and your role is to process each run **independently**. For each simulation run, you must:\n\n1.  Analyze relationships between the documents _within that run_.\n2.  Understand which fields should match across those documents.\n3.  Apply the provided error spectrums strategically to create realistic audit scenarios.\n4.  Maintain document integrity while introducing testable errors.\n\n## INPUT FORMAT\n\nYou will receive a JSON object representing a full simulation project. Your task is to process the `simulationRuns` array within it.\n\n```json\n\n{\n  \"simulationProject\": \"string\",\n  \"companyProfile\": {\n    \"company_name\": \"string\",\n    \"industry\": \"string\",\n    \"region\": \"string\",\n    \"fiscal_year_end\": \"string\",\n    \"business_context\": { \"…\": \"…\" },\n    \"branding\": { \"…\": \"…\" },\n    \"vendors\": [ { \"…\": \"…\" } ],\n    \"banks\": [ { \"…\": \"…\" } ],\n    \"shipping_partners\": [ { \"…\": \"…\" } ],\n    \"revenue_model\": \"string\",\n    \"company_specific_risks\": null\n  },\n  \"simulationRuns\": [\n    {\n      \"simulationId\": \"string\",\n      \"simulationNarrative\": \"string\",\n      \"metadata\": {\n        \"totalDocuments\": 0,\n        \"documentCounts\": {\n          \"Purchase Order\": 0,\n          \"Invoice\": 0,\n          \"Bank Statement\": 0\n          /* other doc types may appear with integer counts */\n        },\n        \"extra\": {\n          /* One of these thread encodings may appear: */\n          \"threads\": [\n            /* either as simple docId chains: */\n            [\"PO-001\", \"INV-001\", \"BS-001\"]\n            /* or as structured threads: */\n            /* { \"threadId\": \"T-001\", \"po_number\": \"PO-…\", \"invoice_numbers\": [\"INV-…\"], \"expected_amount\": 0, \"document_types_in_thread\": [\"Purchase Order\",\"Invoice\",\"Bank Statement\"] } */\n          ],\n          \"fieldNameMap\": {\n            /* label-style keys mapped to concrete data field names */\n            \"PO Number\": \"Purchase_Order_Number\",\n            \"Invoice Number\": \"Invoice_Number\",\n            \"Amount\": \"Total_Amount_Due\",\n            \"Date\": \"Date_of_Invoice\",\n            \"Vendor\": \"Supplier_Name\"\n          },\n          \"edgeCaseHooks\": [\n            /* union of hooks seen across documents in this run */\n            \"timing_cutoff_errors\",\n            \"document_mismatches\"\n          ]\n        }\n      },\n      \"generatedDocuments\": [\n        {\n          \"docId\": \"string\",\n          \"docType\": \"string\",            /* e.g., \"Purchase Order\", \"Invoice\", \"Bank Statement\" */\n          \"data\": {\n            /* MUST contain all required fields for this doc type as produced by Agent 1,\n               using exact field names (e.g., \"Purchase_Order_Number\", \"Total_Amount_Due\", etc.) */\n            /* Also includes routing helpers inserted by Agent 1: */\n            \"Source\": \"Internal|External\",\n            \"File_Type\": \"PDF|CSV\"\n            /* …plus other fields present in Agent 1 output */\n          },\n          \"errorSpectrum\": [\n            /* DOCUMENT-LEVEL list of allowed error types for this document.\n               Use only these when injecting errors into this document’s fields. */\n            \"Missing\",\n            \"Invalid\",\n            \"Mismatch\",\n            \"Incorrect\",\n            \"Negative\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n```\n\n**Your primary input for error injection is the `errorSpectrum` object inside each document.** This object tells you exactly which errors you are allowed to apply to which fields.\n\n## ERROR SPECTRUM DEFINITIONS\n\n### 1. MISSING ERRORS\n\n**Purpose**: Field is completely absent or empty\n**Apply to**: Critical fields that auditors expect to find\n**Implementation**:\n\n- String fields: \"\" (empty string)\n- Numeric fields: null or 0\n- Date fields: null or \"\"\n  **Example**: Invoice number becomes empty, making invoice untraceable\n\n### 2. INVALID ERRORS\n\n**Purpose**: Field has wrong format/structure but value is present\n**Apply to**: Formatted fields with expected patterns\n**Implementation**:\n\n- Dates: \"Invalid-Date-Format\", \"99/99/9999\", \"February 30, 2025\"\n- Numbers: \"INVALID-###\", \"ABC123\", negative where positive expected\n- IDs: \"INVALID-XXX\", wrong prefix patterns\n  **Example**: PO number \"PO-12345\" becomes \"INVALID-PO-12345\"\n\n### 3. MISMATCH ERRORS\n\n**Purpose**: Values that should match across documents don't match\n**Apply to**: Cross-document reference fields\n**Implementation**:\n\n- Amounts: ±10-30% variance from expected value\n- IDs: Similar but different values (PO-12345 vs PO-12346)\n- Names: Slight variations (Inc. vs LLC, abbreviations)\n  **Example**: Invoice amount $50,000 but PO amount $52,500\n\n### 4. INCORRECT ERRORS\n\n**Purpose**: Wrong but realistic values\n**Apply to**: Any field where wrong data could occur\n**Implementation**:\n\n- Wrong dates (different month/year)\n- Wrong amounts (realistic but different values)\n- Wrong names (different but real vendor names)\n  **Example**: Payment to Vendor A but invoice from Vendor B\n\n### 5. NEGATIVE ERRORS\n\n**Purpose**: Negative values where positive expected\n**Apply to**: Amount fields that should be positive\n**Implementation**:\n\n- Multiply positive amounts by -1\n- Only apply to amounts/balances that shouldn't be negative\n  **Example**: Invoice amount becomes -$50,000\n\n## DOCUMENT RELATIONSHIP ANALYSIS\n\n### CROSS-DOCUMENT DEPENDENCIES\n\nAnalyze these relationships when injecting errors:\n\n1. **Invoice ↔ PO**:\n\n   - PO Reference should match PO Number\n   - Amounts should match or be ≤ PO amount\n   - Vendor names should match\n   - Dates should be logical (invoice after PO)\n\n2. **Invoice ↔ Payment Voucher**:\n\n   - Amounts should match\n   - Payee should match invoice vendor\n   - Payment should reference invoice\n\n3. **Payment Voucher ↔ Bank Statement**:\n\n   - Withdrawal should match voucher amount\n   - Dates should align\n   - Reference numbers may connect\n\n4. **Wire Transfer ↔ Bank/Voucher**:\n\n   - Amounts should reconcile\n   - Beneficiary should match payee\n   - Wire reference may link to voucher\n\n5. **GL Entry ↔ All Documents**:\n   - GL codes should match document types\n   - Amounts should reconcile\n   - Dates should align\n\n### FIELD RELATIONSHIPS TO MONITOR\n\n- **Amount Fields**: invoice.amount, po.total, voucher.amount, bank.withdrawal, wire.amount\n- **Reference Fields**: invoice.po_reference ↔ po.po_number\n- **Party Fields**: invoice.vendor ↔ po.vendor ↔ voucher.payee\n- **Date Fields**: Logical sequence across document lifecycle\n- **Account Fields**: bank.account_number consistency\n\n## ERROR INJECTION STRATEGY\n\n### STEP 1: RELATIONSHIP MAPPING\n\nBefore applying errors, map all cross-document relationships:\n\n1. Identify matching values across documents\n2. Note dependent fields (variableType: \"dependent\")\n3. Catalog amount relationships\n4. Map reference chains (PO → Invoice → Voucher → Bank)\n\n### STEP 2: ERROR PRIORITY\n\nApply errors in this priority order:\n\n1. **High Impact**: Missing critical IDs, invalid amounts\n2. **Medium Impact**: Mismatched cross-references\n3. **Low Impact**: Formatting issues, minor inconsistencies\n\n### STEP 3: REALISTIC ERROR DISTRIBUTION\n\n- Don't apply all errors to one document\n- Maintain some error-free fields for baseline comparison\n- Create patterns auditors would actually encounter\n- Ensure some errors are obvious, others subtle\n\n### STEP 4: MAINTAIN AUDITABILITY\n\n- Keep enough correct data for audit trail reconstruction\n- Don't break all relationships simultaneously\n- Leave breadcrumbs for forensic analysis\n\n## CRITICAL ERROR COUNTING REQUIREMENTS\n\n**MANDATORY VALIDATION PROCESS:**\n\n1. **Track Every Error Applied**: As you process each document, maintain a running count of errors applied\n2. **One Error Per Spectrum Entry**: Each item in a variable's \"spectrum\" array = exactly ONE error applied\n3. **Accurate \\_errors Array**: The \"\\_errors\" array in each document must contain exactly the spectrum values you applied\n4. **Perfect Summary Matching**: Your errorSummary counts MUST exactly match the actual errors in processedDocuments\n\n**VALIDATION METHODOLOGY:**\n\n- Before finalizing your response, count all \"\\_errors\" array entries across all documents\n- Verify this matches your errorSummary.totalErrorsInjected\n- Count each error type (Missing, Invalid, etc.) in the actual documents\n- Verify these counts match your errorSummary.errorsByType\n- If counts don't match, revise your summary to be accurate\n\n**DOUBLE-CHECK REQUIREMENT:**\nAfter completing your JSON response, mentally verify:\n✓ Total errors in \\_errors arrays = errorSummary.totalErrorsInjected\n✓ Count of each error type in documents = errorsByType counts\n✓ No mathematical inconsistencies between actual data and summary\n\n## OUTPUT FORMAT\n\nReturn a JSON object with this exact structure. The `processedRuns` array should contain one object for each `simulationRun` from your input.\n\n```json\n{\n  \"simulationProject\": \"Financial Audit Simulation\",\n  \"companyProfile\": {\n    /* COPY EXACTLY from input.companyProfile (do not alter keys or values) */\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Payment Voucher\",\n          \"Bank Statement\",\n          \"Wire Transfer\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.PO Reference\", \"Purchase Order.Purchase_Order_Number\"],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Describe your planned use of allowed error types from each document’s errorSpectrum.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Purchase Order\": [\n          {\n            \"docId\": \"PO-001\",\n            \"docType\": \"Purchase Order\",\n            \"data\": {\n              /* The possibly mutated document after error injection (for Sim Run 1 keep original) */\n              /* Preserve original field names from input generatedDocuments[].data */\n            },\n            \"_errors\": [\n              /* Document-level list of applied error types for this doc instance, e.g., [\"Missing\",\"Mismatch\"].\n                 For Sim Run 1 (baseline), this MUST be an empty array [] */\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                /* Only fields you changed with their original values; omit fields you did not change */\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Missing\",\n                  \"originalValue\": \"PO-10001\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Applied per allowed errorSpectrum to simulate untraceable PO.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                /* COPY the document-level errorSpectrum array from input generatedDocuments[].errorSpectrum for traceability */\n              ]\n            }\n          }\n        ]\n        /* Repeat arrays for other docTypes present in this run, e.g., \"Invoice\", \"Bank Statement\", etc. */\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Example: Invoice amount mismatches the linked Purchase Order total value.\",\n            \"affectedDocuments\": [\"INV-001\", \"PO-001\"],\n            \"fields\": [\"Total_Amount_Due\", \"Total_Purchase_Order_Value\"]\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n```\n\n## EXAMPLES & EDGE CASES\n\n### Example 1: Mismatch Error Chain\n\nOriginal: Invoice amount $50,000, PO amount $50,000, Voucher amount $50,000\nWith Mismatch: Invoice $50,000, PO $52,500 (5% higher), Voucher $50,000\nResult: Creates audit flag for PO/Invoice amount variance\n\n### Example 2: Missing Reference Chain\n\nOriginal: Invoice.po_reference = \"PO-12345\", PO.po_number = \"PO-12345\"\nWith Missing: Invoice.po_reference = \"\", PO.po_number = \"PO-12345\"\nResult: Invoice cannot be traced to authorizing PO\n\n### Example 3: Invalid Format Cascade\n\nOriginal: Date = \"June 15, 2025\"\nWith Invalid: Date = \"32/15/2025\"\nResult: Unparseable date breaks automated processing\n\n## QUALITY GUIDELINES\n\n1. **Realism**: Errors should reflect real-world audit findings\n2. **Detectability**: Mix obvious and subtle errors\n3. **Consistency**: Apply error spectrums as specified\n4. **Traceability**: Maintain metadata for error analysis\n5. **Balance**: Don't over-corrupt documents\n6. **Logic**: Maintain some internal document consistency\n7. **Accuracy**: Error counts in summary must be mathematically correct\n\n## CRITICAL INSTRUCTIONS\n\n- **PROCESS EACH `simulationRun` INDEPENDENTLY**. Do not cross-reference documents between different simulation runs.\n- ALWAYS preserve the exact field names from input\n- NEVER invent new fields not in the original data\n- APPLY errors only where spectrum is specified\n- MAINTAIN realistic business logic where possible\n- INCLUDE comprehensive metadata for audit trail analysis\n- ENSURE output format matches specification exactly\n- **VERIFY error counts in summary match actual applied errors**\n- **DOUBLE-CHECK all mathematical totals before finalizing response**\n\n## BASELINE RUN – NO ERROR INJECTION\n\nTreat the first object in simulationRuns whose simulationId equals \"Sim Run 1\" as a clean reference set.\n\nDo NOT mutate any field values in these documents.\n\nStill preserve the original errorSpectrum objects, but do not generate _errors arrays for this run.\n\nThe errorSummary for \"Sim Run 1\" must show:\n\njson\nCopy\nEdit\n\"totalErrorsInjected\": 0,\n\"errorsByType\": { \"Missing\": 0, \"Invalid\": 0, \"Mismatch\": 0, \"Incorrect\": 0, \"Negative\": 0 }\nApply your normal error-injection logic only to simulation runs after \"Sim Run 1\"\n\n## OVERALL WORKFLOW: PROCESSING SIMULATION RUNS\n\nYour primary task is to iterate through the `simulationRuns` array in the input JSON. For **each** object in the `simulationRuns` array, you will perform the complete error injection process described below (analysis, mapping, injection, and summary).\n\n**CRITICAL: ISOLATION OF RUNS**\n\n- You MUST treat each simulation run as a completely separate universe.\n- A document in \"Sim Run 1\" has no relationship to any document in \"Sim Run 2\".\n- All relationship analysis and error injection (especially \"Mismatch\" errors) must only consider documents within the _same_ simulation run.\n\nProcess the provided document set and return the complete JSON response with injected errors and full analysis.\n\n## IMPLEMENTATION CHECKLIST (do not skip)\n\n Iterate all simulationRuns; append to processedRuns 1:1.\n\n For each processed doc: copy errorSpectrum → _metadata.allowedErrorSpectrum.\n\n Only apply errors that are allowed for that doc.\n\n Every field you changed appears in _metadata.errorsApplied with full details.\n\n _errors lists the set of types applied to that doc (unique types, not per-field).\n\n errorSummary.totalErrorsInjected equals the total number of errorsApplied entries.\n\n errorSummary.errorsByType equals the counts by type from errorsApplied.\n\n Baseline (Sim Run 1) is untouched; counts all zero.\n\n Final JSON is valid and contains every run you received.\n\n\n\n## Here is the actual financial document to work on:\n{{ JSON.stringify($('Code5').item.json, null, 2) }}\n\n# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n\n## Note: For every element in simulationRuns, you must add a corresponding entry in processedRuns. Never skip a run.. DO NOT BE LAZY\n\n## DO NOT SKIP \"simulationId\": \"Sim Run 3\" All the 3 simulations must be available\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3080,
        1620
      ],
      "id": "8fc129cd-4d32-4850-87d6-fa13c1995307",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2860,
        1920
      ],
      "id": "f6101b6b-d8e7-44b0-8a49-81988dfd76a5",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your job is to create a test simulation plan based on types of error. Go through the errors , how it surfaces and relevant documents. Based on the type of documents available, create a test injection plan. The plan should focus on type of document, Edge case injected and which error is genertated. \n\nThe test case should only include those test which can be constructed based on available documents. If test case case cannot be created due to unavailability of documents, ignore those test cases. \n\nEnsure all documents are covered and only edge cases mentioned in  edge_cases_hooks for each document are to be considered.\n\n\nEdge cases:\n{{ $json.Errors.toJsonString() }}\n\nDocuments: {{ $('Aggregate').item.json.data.toJsonString() }}\n\nuse the below json as output:\n\n{\n  \"testPlan\": {\n    \"Test_Simulation_Plan\": [\n      {\n        \"Document_Type\": \"<Document Type A>\",\n        \"Edge_Case_Categories\": {\n          \"<Category_1>\": [\n            {\n              \"Injected_Edge_Case\": \"<Error name>\",\n              \"Error_Generated\": \"<Error description>\",\n              \"How_it_surfaces\": \"<How it appears in review/testing>\",\n              \"Relevant_documents\": [\n                \"<Document 1>\",\n                \"<Document 2>\"\n              ]\n            },\n            {\n              \"Injected_Edge_Case\": \"<Error name>\",\n              \"Error_Generated\": \"<Error description>\",\n              \"How_it_surfaces\": \"<How it appears in review/testing>\",\n              \"Relevant_documents\": [\n                \"<Document 1>\",\n                \"<Document 2>\"\n              ]\n            }\n          ],\n          \"<Category_2>\": [\n            {\n              \"Injected_Edge_Case\": \"<Error name>\",\n              \"Error_Generated\": \"<Error description>\",\n              \"How_it_surfaces\": \"<Explanation>\",\n              \"Relevant_documents\": [\n                \"<Document 1>\",\n                \"<Document 2>\"\n              ]\n            }\n          ],\n          \"<Category_3>\": []\n        }\n      },\n      {\n        \"Document_Type\": \"<Document Type B>\",\n        \"Edge_Case_Categories\": {\n          \"<Category_1>\": [],\n          \"<Category_2>\": []\n        }\n      }\n    ]\n  }\n}\n\n\n\nVerify\n- all documents are covered \n- only edge cases mentioned in  edge_cases_hooks for each document are to be considered\n- the json is valid\n\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2880,
        320
      ],
      "id": "8a27556c-d648-4c08-b087-bbfd9b4140a5",
      "name": "AI Agent4",
      "retryOnFail": true,
      "maxTries": 4,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2920,
        540
      ],
      "id": "2508aa0f-609c-4b5e-848f-666c0a9195b8",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3380,
        320
      ],
      "id": "f8a5a9a3-7a96-4b23-b319-80a86fe6fadc",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "return {\n  testPlan: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2520,
        320
      ],
      "id": "a44a626d-a2df-46f1-baed-3c2516a6b383",
      "name": "validate_documents2",
      "retryOnFail": true,
      "maxTries": 2,
      "notesInFlow": false,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your job is to inject test values in each document type based on test plan.  Use  simulation values to determine the test values and insert are in Sinulation document. The output should be in json format.  Use correct data as reference document for clean data. Esnure all errors types injected. Each document_type can have  Summarize for each document on what all errors have been injected as per test plan.  Ensure no edge case and document type is missed.\n\n\nTest Plan:\n{{ $json.testplan.toJsonString() }}\n\nConfigurtaion and names used for test :\n{{ $json.companyprofile }}\n\n\nSimulation document:\n{{ $json.simulations.toJsonString() }}\n\n\nThe output json:\n{\n  \"simulationProject\": \"<Project Name>\",\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"<Simulation Run ID>\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"<DocType1>\",\n          \"<DocType2>\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"<Relationship Type>\",\n            \"fields\": [\n              \"<Doc1.Field>\",\n              \"<Doc2.Field>\"\n            ],\n            \"description\": \"<Relationship description>\"\n          }\n        ],\n        \"errorStrategy\": \"<Description of error injection strategy>\",\n        \"totalErrorsToInject\": <Number>\n      },\n      \"processedDocuments\": {\n        \"<DocType>\": [\n          {\n            \"docId\": \"<Unique Doc ID>\",\n            \"docType\": \"<Document Type>\",\n            \"data\": {\n              /* Original or mutated document fields go here */\n            },\n            \"errors_injected\": [\n              \"<Error narrative 1>\",\n              \"<Error narrative 2>\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"<FieldChanged>\": \"<Original Value>\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"<FieldName>\",\n                  \"type\": \"<ErrorType>\",\n                  \"originalValue\": \"<Value before error>\",\n                  \"errorValue\": \"<Injected/Mutated Value>\",\n                  \"reason\": \"<Reason for applying error>\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                /* Copy from document’s allowed error spectrum */\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": <Number>,\n        \"errorsByType\": {\n            \"Timing/Cutoff errors\" : <Count>,\n            \"Mismatch between linked documents\": <Count>,\n            \"Vendor irregularities\": <Count>,\n            \"Suspicious amounts or frequencies\": <Count>,\n            \"Description / Documentation Anomalies\": <Count>,\n            \"Systemic Process Gaps\": <Count>,\n            \"External Discrepancies\": <Count>\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"<Description of cross-document anomaly>\",\n            \"affectedDocuments\": [\n              \"<DocID1>\",\n              \"<DocID2>\"\n            ],\n            \"fields\": [\n              \"<Field1>\",\n              \"<Field2>\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\nOnce completed again verify :\n-  Ensure all simulation are run and none is left.\n-  Ensure all edge case and document type are there.\n-  Ensure all original data match correct data. There should be no deviation.\n-  Esnure there should be only one of each document type, with all errors types injected.\n- verify out to be valid json\n\n\n\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else. Swap <placeholders> with real data. Verify output to be valid json.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        160,
        1100
      ],
      "id": "6f88e9bf-f473-40d4-bba3-6690630cd33d",
      "name": "AI Agent5",
      "executeOnce": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        140,
        1380
      ],
      "id": "9fa7af5a-1e71-4bb2-ba28-2e821148fecf",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "568eb679-8eb1-48fa-b5ec-5c52691d9518",
              "name": "companyprofile",
              "value": "={{ $json.input_config.stage1.companies[0].toJsonString() }} + {{ $json.input_config.profiles[0].toJsonString()}} ",
              "type": "string"
            },
            {
              "id": "565f572c-5f43-4b4c-8002-4b1fc495b471",
              "name": "simulations",
              "value": "={{ $json.simulatedResponse.simulationRuns }}",
              "type": "array"
            },
            {
              "id": "c17c0ad0-0bd5-4bc2-9144-12e994e74096",
              "name": "testplan",
              "value": "={{ $json.testPlan }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -300,
        1100
      ],
      "id": "d2cbe797-f166-4e7e-9521-2d669320c050",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "fieldToSplitOut": "simulations",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -120,
        1100
      ],
      "id": "833beb43-9e57-4318-8f4e-c2e2f99bdc3c",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n simulations:JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        1100
      ],
      "id": "c7101e4a-f3fe-4e9a-8a6e-157839bd6718",
      "name": "validate_documents3",
      "retryOnFail": true,
      "maxTries": 4,
      "notesInFlow": false,
      "executeOnce": false,
      "waitBetweenTries": 2000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "# **Error Injector** \n## Inject multi-error types (overpayment, missing documents, hallucination, GL misclassification) into each simulation at configurable rates.\n",
        "height": 700,
        "width": 1100,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -580,
        820
      ],
      "typeVersion": 1,
      "id": "ac68ded1-aff8-4698-a670-1b48db1e0cfa",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1060,
        1100
      ],
      "id": "3483565e-57ee-4e56-860e-e0f6318e0571",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "813fe318-1906-4195-961e-ca156ac38f9f",
              "name": "simulatedResponse",
              "value": "={{ $('Code5').item.json.simulatedResponse }}",
              "type": "object"
            },
            {
              "id": "fae97e9f-0f0a-4779-9633-55337520b4a8",
              "name": "document_count",
              "value": "={{ $('Code5').item.json.document_count }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2280,
        1120
      ],
      "id": "652b297a-8fc4-4940-b767-1e5c3b8ca528",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3920,
        1600
      ],
      "id": "337aecb7-54ab-4ab2-b765-7118ccbf72a3",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "processedDocuments",
        "options": {
          "destinationFieldName": "={{ $json.simulationId }}"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4140,
        1700
      ],
      "id": "d9d45ee0-3850-42d0-b72e-44989ccb8844",
      "name": "Split Out3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4360,
        1700
      ],
      "id": "8a676b92-8280-41d1-a088-5d86954ca45a",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "=_{{ $json['SIM-1'][0].docType }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        4600,
        1780
      ],
      "id": "b5a3fdc3-3232-4556-9bd7-80123bae4a73",
      "name": "Convert to File2"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {
          "fileName": "={{ $('Merge').item.json.project_name }}_{{ $now.format('yyyy-MM-dd') }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2760,
        1300
      ],
      "id": "ec954fc3-0726-48ae-9c7d-ccd05c00718b",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "project_simulation_id": "={{ $('Insert rows in a table').item.json.id }}",
            "file_name": "={{ $('Merge').item.json.input_config.stage1.companies[0].company_name }}_{{ $now.format('yyyy-MM-dd') }}",
            "simulation_run_id": "={{ $('Merge').item.json.input_config.stage1.companies[0].company_name }}_{{ $now.toString() }}",
            "document_data": "={{ $json.results[0] }}",
            "created_at": "={{ $now }}",
            "updated_at": "={{ $now }}",
            "cleansimulation": "={{ $('Code5').item.json.simulatedResponse }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "project_simulation_id",
              "displayName": "project_simulation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "simulation_run_id",
              "displayName": "simulation_run_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "document_data",
              "displayName": "document_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "doc_type",
              "displayName": "doc_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "files",
              "displayName": "files",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "cleanpdffiles",
              "displayName": "cleanpdffiles",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "cleansimulation",
              "displayName": "cleansimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1920,
        1080
      ],
      "id": "56755df7-59ae-43e9-adf6-7d86301e9c46",
      "name": "Insert rows in a table1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2960,
        1080
      ],
      "id": "34dc94a6-4052-47dd-bc96-e3ee93b8f75a",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "simulations",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        840,
        1080
      ],
      "id": "e51548e1-98c8-4faf-9bb1-aaf892ed2706",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f07a7a9-3e56-4a62-b996-90c631622949",
              "name": "companyProfile",
              "value": "={{ $('Webhook').item.json.body.profiles[0] }}",
              "type": "object"
            },
            {
              "id": "462b5e64-3aa4-41db-8907-f6d371fa9b17",
              "name": "simulationsResults",
              "value": "={{ $json.simulations }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1060,
        1080
      ],
      "id": "4c20651c-9206-4bcc-a4af-90844d61ed68",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "results",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1280,
        1080
      ],
      "id": "4a044a4e-6655-4a85-9c0d-1149f6d955a0",
      "name": "Aggregate2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        2000,
        15260
      ],
      "id": "4be3560f-3663-43de-816d-0ead1e2ef49b",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "fieldToSplitOut": "document_data.simulationsResults",
        "include": "selectedOtherFields",
        "fieldsToInclude": "company",
        "options": {
          "destinationFieldName": "simulations"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -3280,
        9260
      ],
      "id": "4baf407f-3105-4bad-bf08-dc85cb7c8dad",
      "name": "Split Out2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "821836e0-b316-45b4-8a63-dcbe32b7319e",
              "name": "simulations.processedRuns[0].processedDocuments",
              "value": "={{ $json.simulations.simulations.processedRuns[0].processedDocuments }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3100,
        9260
      ],
      "id": "c22bbf7e-d3ff-4a77-96a2-4ccedba37bd4",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2880,
        9260
      ],
      "id": "6885f283-cdfc-4d67-8acc-a68bdebd9795",
      "name": "Loop Over Items2",
      "executeOnce": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b45af8f6-cf48-4d77-b3bd-7863b9181634",
              "name": "simulations.processedRuns[0].processedDocuments",
              "value": "={{ $json.simulations.processedRuns[0].processedDocuments }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2420,
        9280
      ],
      "id": "df87b7be-f9c7-4612-8bbf-2521f3b48461",
      "name": "Edit Fields10"
    },
    {
      "parameters": {
        "fieldToSplitOut": "simulations.processedRuns[0]",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2240,
        9280
      ],
      "id": "4b030b6b-ca7a-4b4d-be0d-43c0e3ceecdd",
      "name": "Split Out4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://v2.convertapi.com/convert/html/to/pdf",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer dO8rFzAcL2lVMroBsEYy4RMhsIfEQqsT"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "StoreFile",
              "value": "true"
            },
            {
              "parameterType": "formBinaryData",
              "name": "File",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1260,
        10800
      ],
      "id": "d9b999c1-3596-4815-9bc7-40b3130b28c4",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "url": "={{ $json.Url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1600,
        10800
      ],
      "id": "c9c62764-8b25-4f6c-81e8-a0ceeaff0fe4",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "jsCode": "const item = items[0].json;\n\nconst keys = Object.keys(item);\n\nconst result = [];\n\nkeys.forEach((key) => {\n  result.push({\n    json: {\n      column: key,\n      value: item[key],\n    },\n  });\n});\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2020,
        9280
      ],
      "id": "b6839932-10b7-4648-b034-fcbb83c43350",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e4c2e8e-27b7-48a9-b524-5753b45e20e9",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "3fd4f590-689a-498b-bfcf-c9d350b3b150",
              "name": "value",
              "value": "={{ $json.value[0].data }}",
              "type": "object"
            },
            {
              "id": "901707af-fae4-4a06-81e7-dd3dd94ece8b",
              "name": "companyProfile",
              "value": "={{ $('Initial').item.json.document_data.companyProfile }}",
              "type": "object"
            },
            {
              "id": "67ff2370-0714-4433-8573-cbd8d9a34124",
              "name": "runindex",
              "value": "={{ $runIndex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1800,
        9280
      ],
      "id": "3a351b75-0b7e-42de-880d-a57e341e1795",
      "name": "Edit Fields11"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "wire",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "146344cf-50b7-4cff-959d-0415ebcd83ce"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ad0f8eb7-2b1e-420f-8d5a-caa9a837467a",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "bank",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5db1bd82-c9a4-4126-87f8-6f8af18d1394",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Invoice (Goods)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3fdb2e47-5c26-4020-a180-528ff4f36e3f",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "expenses",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "66b17d40-652b-44d9-85e7-69cea52454d2",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "disbursement",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fc94af0-bbe9-43a8-bd68-f8e1249b4b71",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Invoices (for Services)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d8268b87-f26c-45ba-9a14-f56b82e043a7",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Purchase Contract Snippet",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6312c7b0-5402-4ba2-9329-25471c68ed1c",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Shipping Document (Sending)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "51e5a37c-7a3d-4cfe-be8a-1aa924e893e6",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Shipping Document (Receiving)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0b5e2650-269b-439e-9072-f50ac59aaca1",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Order",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1640,
        9140
      ],
      "id": "c3108da9-d204-46f6-bc24-745bc4c7d26c",
      "name": "Switch2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1080,
        7860
      ],
      "id": "469d386e-7dc5-4144-8898-82c12f40e693",
      "name": "AI Agent6",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1160,
        8040
      ],
      "id": "f72a5518-40d0-4471-90af-9f35b88f0e65",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Wire_Transfer_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -440,
        7860
      ],
      "id": "e1dda40b-2fc9-49ff-9078-db9a9cb1c944",
      "name": "Convert to File4"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Bank_Statements_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -180,
        8180
      ],
      "id": "4aab6403-7658-4302-93f6-5deaeceeefc8",
      "name": "Convert to File5"
    },
    {
      "parameters": {
        "numberInputs": 10
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        920,
        9660
      ],
      "id": "f37d1497-d9e2-470b-8294-e5291816e10d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -960,
        8500
      ],
      "id": "2c099d22-88c8-4376-96af-52c8dd500cd5",
      "name": "AI Agent8",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1000,
        8680
      ],
      "id": "9cc7e2ea-6a92-41f8-9e8b-e503ab4ff899",
      "name": "OpenAI Chat Model8",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Invoice_for_Goods_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -20,
        8500
      ],
      "id": "1f9fcf60-73e0-4520-afe4-2530f5e19516",
      "name": "Convert to File6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency. ALso no need for currency column. remove unnecessary colun but keep all fields.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -960,
        8820
      ],
      "id": "27f302af-530a-4dd1-9006-792e0353af0c",
      "name": "AI Agent9",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1060,
        9000
      ],
      "id": "c319cc12-453f-4c73-98f7-2e25fff78c12",
      "name": "OpenAI Chat Model9",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Expenses_sub_Ledger_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -260,
        8820
      ],
      "id": "85c194d6-4a0f-451a-8d35-e81e339ce5a9",
      "name": "Convert to File7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1020,
        9120
      ],
      "id": "699bf018-0067-436d-b254-dcd17ce7ea7e",
      "name": "AI Agent10",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1080,
        9300
      ],
      "id": "53caf2f8-d943-4eff-9131-9ba232bcf11b",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Disbursement_Listing_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -200,
        9120
      ],
      "id": "e5433ca4-3e40-415e-95bc-d75dfa559a54",
      "name": "Convert to File8"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1020,
        9440
      ],
      "id": "61990c84-0d20-4ddc-9899-bdfcc256f81e",
      "name": "AI Agent11",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1100,
        9620
      ],
      "id": "1f95a9a4-d18d-4e2d-8f24-8b9d6b2acdd6",
      "name": "OpenAI Chat Model11",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Invoice_for_Services_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -220,
        9440
      ],
      "id": "4cc7ab4e-7c31-4978-bf2f-a51728203ff9",
      "name": "Convert to File9"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1020,
        9760
      ],
      "id": "f91038ed-ca97-4d74-a202-c8c7fb77b71b",
      "name": "AI Agent12",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1100,
        9920
      ],
      "id": "259b65cd-dcf0-4cc3-917e-a920b8c70d6f",
      "name": "OpenAI Chat Model12",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Purchase_Order_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -200,
        9760
      ],
      "id": "54548bea-cf4e-44b9-aaac-489871d68846",
      "name": "Convert to File10"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1000,
        10000
      ],
      "id": "32b99ec5-f271-4db2-aac1-ded8a3e2e8b7",
      "name": "AI Agent13",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1080,
        10180
      ],
      "id": "a0b4c86a-6599-40b8-9a61-52423ea507de",
      "name": "OpenAI Chat Model13",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Shipping_Documents_Sending_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -160,
        10000
      ],
      "id": "daa5e477-0c61-4f5b-abd4-9e99d512336f",
      "name": "Convert to File11"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1040,
        10320
      ],
      "id": "544b9904-6ec8-40fe-b089-b2a6168e16c9",
      "name": "AI Agent14",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1120,
        10480
      ],
      "id": "a60abb98-6fbf-4e08-b0c8-9ca22d9379d3",
      "name": "OpenAI Chat Model14",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Shipping_Documents_Receiving_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -180,
        10320
      ],
      "id": "34a007d5-a8cd-4c0a-89ed-4b175c4f3853",
      "name": "Convert to File12"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other. If it is bank statement or any other statement create some fake entries to look real. Recipeient name and company name should be present.ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.  Currency should be in dollar, so add $ in front of currency.\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1040,
        10580
      ],
      "id": "0ae53e9f-4d62-4234-b23a-065da1e56bc4",
      "name": "AI Agent15",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1140,
        10760
      ],
      "id": "a7dd73b7-a881-41d2-af22-5a1f8bd60c27",
      "name": "OpenAI Chat Model15",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Merge2').item.json.document_data.companyProfile.company_name }}_Order_Documents_run-{{ $('Edit Fields11').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -200,
        10580
      ],
      "id": "1fd9798a-db75-480e-9d88-edf5a06fef77",
      "name": "Convert to File13"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2140,
        10800
      ],
      "id": "72e56e80-1171-47fe-becb-1fb5bdf78075",
      "name": "Aggregate5"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.project_simulation_id }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4120,
        9420
      ],
      "id": "be6c7539-6758-4b5b-885a-afa642267762",
      "name": "Select rows from a table4",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "project_simulation_id",
              "field2": "id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3880,
        9260
      ],
      "id": "6ab4f6ea-64d4-475f-8345-4f9e30838f9e",
      "name": "Merge2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ce60c50a-df6d-4908-9630-f920aad9c86f",
              "name": "document_data",
              "value": "={{ $json.document_data }}",
              "type": "object"
            },
            {
              "id": "94d0b360-b005-4dac-82e9-4f31fad3d382",
              "name": "company",
              "value": "={{ $json.input_config.stage1.companies[0] }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3660,
        9260
      ],
      "id": "559741ad-8019-46ef-8870-fe92d9ce12f1",
      "name": "Edit Fields15",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate html files based on templates provided. Seek the information from data provided, and create html file for  doument mentioned. Ensurethe format is stritcly followed from template.  As it is bank statement or any other statement create some fake entries to look real. The data contains a specific transaction with transaction number and details. Dont change the transactions details. Keep it as is and create fake craedit and deposit entries around it. Also give them a valid transaction numbesr. Bank name should be present with bank details on top. strictly following branding guidelines. strictly use logo_url for logo under templates. Currency should be in dollar, so add $ in front of currency.\n\nReverify-\n- Recalcultae and verify Deposit total. To calculate Deposit total, add all entries under deposit or credit\n- Recalcultae and verify Withdrawl total. To calculate Withdrawl total, add all entries under withdrawl or debit\n- Rest all other fields should match as is in data\n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge2').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -980,
        8180
      ],
      "id": "3bd1b150-7d3a-4ea0-8756-2f157312ba8a",
      "name": "AI Agent7",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1040,
        8360
      ],
      "id": "ceb31bd7-96ff-4bee-a19d-62db671b18f1",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Wire Transfer</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: <<background_color>>;\n      color: <<text_color>>;\n    }\n    .wire-transfer {\n      background: <<transfer_background>>;\n      border: 1px solid <<border_color>>;\n      padding: 30px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      border-radius: 8px;\n    }\n    .header {\n      display: flex;\n      align-items: center;\n      margin-bottom: 30px;\n      border-bottom: 2px solid <<primary_color>>;\n      padding-bottom: 20px;\n      gap: 15px;\n    }\n    .logo {\n      width: <<logo_width>>;\n      height: <<logo_height>>;\n      background: <<logo_background>>;\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: <<logo_text_color>>;\n      font-weight: bold;\n      background-image: url('<<logo_url>>');\n      background-size: cover;\n      background-position: center;\n      flex: 0 0 auto;\n    }\n    .bank-info h1 {\n      margin: 0;\n      font-size: 24px;\n      color: <<header_text_color>>;\n    }\n    .bank-info p {\n      margin: 5px 0 0 0;\n      color: <<subtext_color>>;\n      font-size: 14px;\n    }\n    .transfer-title {\n      text-align: center;\n      background: <<title_background>>;\n      color: <<title_text_color>>;\n      padding: 15px;\n      margin: 20px 0;\n      border-radius: 5px;\n      font-size: 22px;\n      font-weight: bold;\n      letter-spacing: 1px;\n    }\n\n    /* Parties section */\n    .parties {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      margin: 20px 0;\n    }\n    .panel {\n      background: <<account_info_background>>;\n      padding: 16px;\n      border-radius: 8px;\n      border: 1px solid <<detail_border_color>>;\n    }\n    .panel h3 {\n      margin: 0 0 12px 0;\n      color: <<account_header_color>>;\n      font-size: 16px;\n    }\n    .row {\n      display: flex;\n      justify-content: space-between;\n      gap: 16px;\n      padding: 6px 0;\n      border-bottom: 1px dotted <<detail_border_color>>;\n    }\n    .row:last-child { border-bottom: none; }\n    .label { font-weight: bold; color: <<label_color>>; }\n    .value { color: <<value_color>>; font-family: monospace; }\n\n    /* Transfer details */\n    .transfer-details {\n      background: <<details_background>>;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 20px 0;\n      border-left: 4px solid <<accent_color>>;\n    }\n    .transfer-details h3 {\n      margin: 0 0 12px 0;\n      color: <<details_header_color>>;\n    }\n    .detail-row {\n      display: grid;\n      grid-template-columns: 240px 1fr;\n      gap: 16px;\n      margin: 10px 0;\n      padding: 8px 0;\n      border-bottom: 1px dotted <<detail_border_color>>;\n    }\n    .detail-row:last-child { border-bottom: none; }\n\n    /* Transaction table (optional for context/audit) */\n    .transaction-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 20px 0;\n    }\n    .transaction-table th {\n      background: <<table_header_background>>;\n      border: 1px solid <<table_border_color>>;\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: <<table_header_text_color>>;\n    }\n    .transaction-table td {\n      border: 1px solid <<table_border_color>>;\n      padding: 12px;\n      color: <<table_text_color>>;\n    }\n    .transaction-table tr:nth-child(even) {\n      background: <<table_row_alternate_background>>;\n    }\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n      color: <<amount_color>>;\n    }\n    .amount.withdrawal { color: <<withdrawal_color>>; }\n    .balance { color: <<balance_color>>; font-weight: bold; }\n\n    /* Confirmation */\n    .confirmation {\n      background: <<confirmation_background>>;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 30px 0;\n      text-align: center;\n      border: 2px solid <<confirmation_border_color>>;\n    }\n    .confirmation h3 {\n      margin: 0 0 10px 0;\n      color: <<confirmation_header_color>>;\n    }\n    .confirmation-number {\n      font-size: 18px;\n      font-weight: bold;\n      color: <<confirmation_number_color>>;\n      font-family: monospace;\n      background: <<confirmation_number_background>>;\n      padding: 10px;\n      border-radius: 4px;\n      display: inline-block;\n      margin: 10px 0;\n    }\n\n    .footer {\n      margin-top: 30px;\n      padding-top: 15px;\n      border-top: 1px solid <<footer_border_color>>;\n      color: <<footer_text_color>>;\n      font-size: 12px;\n      text-align: center;\n    }\n\n    /* Print-friendly */\n    @media print {\n      body { max-width: none; }\n      .wire-transfer { box-shadow: none; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wire-transfer\">\n    <div class=\"header\">\n      <div class=\"logo\"><<logo_text>></div>\n      <div class=\"bank-info\">\n        <h1><<bank_name>></h1>\n        <p><<bank_address>></p>\n      </div>\n    </div>\n\n    <div class=\"transfer-title\">\n      WIRE TRANSFER CONFIRMATION\n    </div>\n\n    <!-- Parties -->\n    <div class=\"parties\">\n      <!-- REQUESTOR -->\n      <div class=\"panel\">\n        <h3>Requestor</h3>\n        <div class=\"row\"><span class=\"label\">Name</span><span class=\"value\"><<requestor>></span></div>\n        <div class=\"row\"><span class=\"label\">Account Number</span><span class=\"value\"><<requestor_account_number>></span></div>\n        <div class=\"row\"><span class=\"label\">Routing Number <small>(opt)</small></span><span class=\"value\"><<requestor_routing_number>></span></div>\n        <div class=\"row\"><span class=\"label\">Bank Name <small>(opt)</small></span><span class=\"value\"><<requestor_bank_name>></span></div>\n        <div class=\"row\"><span class=\"label\">Address <small>(opt)</small></span><span class=\"value\"><<requestor_address>></span></div>\n      </div>\n\n      <!-- RECIPIENT -->\n      <div class=\"panel\">\n        <h3>Recipient</h3>\n        <div class=\"row\"><span class=\"label\">Name</span><span class=\"value\"><<recipient>></span></div>\n        <div class=\"row\"><span class=\"label\">Account Number</span><span class=\"value\"><<recipient_account_number>></span></div>\n        <div class=\"row\"><span class=\"label\">Routing Number <small>(opt)</small></span><span class=\"value\"><<recipient_routing_number>></span></div>\n        <div class=\"row\"><span class=\"label\">Bank Name <small>(opt)</small></span><span class=\"value\"><<recipient_bank_name>></span></div>\n        <div class=\"row\"><span class=\"label\">Address <small>(opt)</small></span><span class=\"value\"><<recipient_address>></span></div>\n      </div>\n    </div>\n\n    <!-- Transfer Details -->\n    <div class=\"transfer-details\">\n      <h3>Transfer Details</h3>\n\n      <!-- Mandatory -->\n      <div class=\"detail-row\">\n        <span class=\"label\">Transaction Type / Category</span>\n        <span class=\"value\"><<transaction_type>></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Amount</span>\n        <span class=\"value amount withdrawal\"><<amount>></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Currency</span>\n        <span class=\"value\"><<currency>></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Wire Date</span>\n        <span class=\"value\"><<wire_date>></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Transaction / Reference Number</span>\n        <span class=\"value\"><<transaction_number>></span>\n      </div>\n\n      <!-- Optional -->\n      <div class=\"detail-row\">\n        <span class=\"label\">Memo / Reference <small>(opt)</small></span>\n        <span class=\"value\"><<memo_reference>></span>\n      </div>\n    </div>\n\n    <!-- (Optional) Account transaction context -->\n    <table class=\"transaction-table\">\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Description</th>\n          <th>Withdrawals</th>\n          <th>Deposits</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><<transaction_date>></td>\n          <td><<transaction_description>></td>\n          <td class=\"amount withdrawal\"><<withdrawal_amount>></td>\n          <td class=\"amount\"><<deposit_amount>></td>\n          <td class=\"amount balance\"><<account_balance>></td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Confirmation (optional but included) -->\n    <div class=\"confirmation\">\n      <h3>Transfer Completed Successfully</h3>\n      <p>Confirmation Number:</p>\n      <div class=\"confirmation-number\"><<confirmation_number>></div>\n      <p><<confirmation_message>></p>\n    </div>\n\n    <div class=\"footer\">\n      <p><<footer_text>></p>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "deed7af2-d464-46a0-a5ff-941739da4d01",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1280,
        7860
      ],
      "id": "1c935014-419a-4491-b283-ae4f67ba71fa",
      "name": "Wire Transfer"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Bank Statement</title>\n  <style>\n    :root{\n      /* you can theme these */\n      --background: <<background_color>>;\n      --text: <<text_color>>;\n      --primary: <<primary_color>>;\n      --border: <<border_color>>;\n      --muted: <<subtext_color>>;\n      --header-text: <<header_text_color>>;\n      --table-head: <<table_header_background>>;\n      --table-head-text: <<table_header_text_color>>;\n      --row-alt: <<table_row_alternate_background>>;\n      --statement-bg: <<statement_background>>;\n      --account-info-bg: <<account_info_background>>;\n      --withdrawal: <<withdrawal_color>>;\n      --deposit: <<deposit_color>>;\n      --balance: <<balance_color>>;\n      --footer-text: <<footer_text_color>>;\n      --logo-bg: <<logo_background>>;\n    }\n\n    body{ font-family: Arial, sans-serif; max-width: 900px; margin:0 auto; padding:20px; background:var(--background); color:var(--text); }\n    .statement{ background:var(--statement-bg); padding:30px; border:1px solid var(--border); box-shadow:0 2px 5px rgba(0,0,0,.1); }\n\n    .header{ display:flex; align-items:center; margin-bottom:24px; border-bottom:2px solid var(--primary); padding-bottom:16px; }\n    .logo{ width: <<logo_width>>; height: <<logo_height>>; background:var(--logo-bg); border-radius:6px; margin-right:16px; display:flex; align-items:center; justify-content:center; color:<<logo_text_color>>; font-weight:bold;\n      background-image:url('<<logo_url>>'); background-size:cover; background-position:center; }\n    .bank-info h1{ margin:0; font-size:24px; color:var(--header-text); }\n    .bank-info p{ margin:6px 0 0; color:var(--muted); font-size:13px; }\n\n    .account-info{ display:flex; justify-content:space-between; gap:16px; margin:18px 0; background:var(--account-info-bg); padding:14px; border-radius:6px; }\n    .account-details h3{ margin:0 0 8px; color:var(--header-text);}\n    .account-details p{ margin:4px 0; }\n    .statement-period{ text-align:right; font-size:14px; }\n    .statement-period p{ margin:4px 0; }\n\n    .summary{ display:grid; grid-template-columns: repeat(2,1fr); gap:12px; border:1px solid var(--border); border-radius:6px; padding:12px; margin:18px 0 6px; }\n    .summary h4{ grid-column:1/-1; margin:0 0 8px; color:var(--header-text);}\n    .kv{ display:flex; justify-content:space-between; border-bottom:1px dashed var(--border); padding:6px 0; }\n    .kv:last-child{ border-bottom:none; }\n\n    .transactions-table{ width:100%; border-collapse:collapse; margin:18px 0; font-size:14px; }\n    .transactions-table th{ background:var(--table-head); color:var(--table-head-text); border:1px solid var(--border); padding:10px; text-align:left; }\n    .transactions-table td{ border:1px solid var(--border); padding:10px; vertical-align:top; }\n    .transactions-table tr:nth-child(even){ background:var(--row-alt); }\n    .amount{ text-align:right; font-family:monospace; }\n    .withdrawal{ color:var(--withdrawal); }\n    .deposit{ color:var(--deposit); }\n    .balance{ font-weight:bold; color:var(--balance); }\n\n    .notes{ margin-top:16px; padding:12px; border:1px solid var(--border); border-radius:6px; }\n    .notes h4{ margin:0 0 8px; color:var(--header-text); }\n\n    .footer{ margin-top:24px; padding-top:12px; border-top:1px solid var(--border); color:var(--footer-text); font-size:12px; }\n  </style>\n</head>\n<body>\n  <div class=\"statement\">\n\n    <!-- HEADER -->\n    <div class=\"header\">\n      <div class=\"logo\"><<logo_text>></div>\n      <div class=\"bank-info\">\n        <h1><<bank_name>></h1>\n        <p><<bank_address>></p>\n      </div>\n    </div>\n\n    <!-- ACCOUNT + PERIOD -->\n    <div class=\"account-info\">\n      <div class=\"account-details\">\n        <h3><<account_name>></h3>\n        <p><<account_address>></p>\n        <p><strong>Account Number:</strong> <<account_number>></p>\n        <p><strong>Account Type:</strong> <<account_type>></p> <!-- Optional -->\n      </div>\n      <div class=\"statement-period\">\n        <p><strong>Statement Period:</strong></p>\n        <p><strong><<period_from>> through <<period_to>></strong></p>\n      </div>\n    </div>\n\n    <!-- SUMMARY (Balances, Totals, Fees/Interest) -->\n    <div class=\"summary\">\n      <h4>Statement Summary</h4>\n      <div class=\"kv\"><span>Opening / Beginning / Previous Balance</span><span class=\"amount\"><<opening_balance>></span></div>\n      <div class=\"kv\"><span>Closing / Ending Balance</span><span class=\"amount balance\"><<closing_balance>></span></div>\n      <div class=\"kv\"><span>Deposit / Credit Totals</span><span class=\"amount deposit\"><<deposit_credit_totals>></span></div>\n      <div class=\"kv\"><span>Withdrawal / Debit Totals</span><span class=\"amount withdrawal\"><<withdrawal_debit_totals>></span></div>\n      <!-- Optional totals -->\n      <div class=\"kv\"><span>Fees Charged (Total)</span><span class=\"amount\"><<fees_charged_total>></span></div>\n      <div class=\"kv\"><span>Interest Earned (Total)</span><span class=\"amount\"><<interest_earned_total>></span></div>\n      <div class=\"kv\"><span>Interest Paid (Total)</span><span class=\"amount\"><<interest_paid_total>></span></div>\n    </div>\n\n    <!-- TRANSACTIONS -->\n    <table class=\"transactions-table\">\n      <thead>\n        <tr>\n          <th>Date</th> <!-- Date_of_transaction -->\n          <th>Transaction No.</th> <!-- Transaction_Number -->\n          <th>Description</th> <!-- Transactional_Details (narrative) -->\n          <th>Debit</th> <!-- Withdrawals_or_Debit_Amounts -->\n          <th>Credit</th> <!-- Deposit_or_Credit_Amount -->\n          <th>Fees</th> <!-- Optional per-transaction -->\n          <th>Interest</th> <!-- Optional per-transaction -->\n          <th>Balance</th> <!-- Balance -->\n        </tr>\n      </thead>\n      <tbody>\n        <!-- Inject rows like:\n        <tr>\n          <td>2025-08-05</td>\n          <td>TXN-12345</td>\n          <td>NEFT to ACME LTD</td>\n          <td class=\"amount withdrawal\">1,000.00</td>\n          <td class=\"amount\"> </td>\n          <td class=\"amount\">0.00</td>\n          <td class=\"amount\"> </td>\n          <td class=\"amount balance\">24,500.00</td>\n        </tr>\n        -->\n        <<transactions>>\n      </tbody>\n    </table>\n\n    <!-- OPTIONAL NOTES/ALERTS/CLOSURE -->\n    <div class=\"notes\">\n      <h4>Account Alerts</h4>\n      <p><<account_alerts>></p> <!-- Optional -->\n      <h4>Account Closure Details</h4>\n      <p><<account_closure_details>></p> <!-- Optional -->\n    </div>\n\n    <div class=\"footer\">\n      <p><<footer_text>></p>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "4cf173b8-2b0e-4333-a7f8-d997418deea0",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        8180
      ],
      "id": "aa9148bc-e4f2-4ad4-9779-a8baca993143",
      "name": "Bank_Statement"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice (Goods)</title>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n    .invoice-header { text-align: center; font-size: 28px; font-weight: bold; margin-bottom: 20px; }\n    .company-info { margin-bottom: 20px; }\n    .meta-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 20px; }\n    .items-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n    .items-table th, .items-table td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n    .items-table th { background: #f5f5f5; }\n    .total-section { text-align: right; margin-top: 20px; }\n    .final-total { font-size: 20px; font-weight: bold; margin-top: 10px; }\n  </style>\n</head>\n<body>\n  <div class=\"invoice\">\n    <div class=\"invoice-header\">INVOICE (GOODS)</div>\n\n    <!-- Supplier -->\n    <div class=\"company-info\">\n      <h2 id=\"supplier_name\"></h2>\n      <p id=\"supplier_address\"></p>\n      <p id=\"supplier_email\"></p>\n      <p><strong>Supplier Number:</strong> <span id=\"supplier_number\"></span></p>\n    </div>\n\n    <!-- Invoice Meta -->\n    <div class=\"meta-grid\">\n      <div>\n        <p><strong>Invoice #:</strong> <span id=\"invoice_number\"></span></p>\n        <p><strong>Invoice Date:</strong> <span id=\"invoice_date\"></span></p>\n        <p><strong>Due Date:</strong> <span id=\"due_date\"></span></p>\n        <p><strong>PO Number:</strong> <span id=\"po_number\"></span></p>\n        <p><strong>SO/WO Number:</strong> <span id=\"so_or_wo_number\"></span></p>\n      </div>\n      <div>\n        <p><strong>Delivery / Completion Date:</strong> <span id=\"delivery_or_completion_date\"></span></p>\n        <p><strong>Currency Unit:</strong> <span id=\"currency_unit\"></span></p>\n        <p><strong>Shipping / Delivery Terms:</strong> <span id=\"shipping_or_delivery_terms\"></span></p>\n        <p><strong>Transfer of Rights:</strong> <span id=\"transfer_of_rights_indication\"></span></p>\n        <p><strong>Payment Terms:</strong> <span id=\"payment_terms\"></span></p>\n      </div>\n    </div>\n\n    <!-- Customer -->\n    <div>\n      <h3>Bill To:</h3>\n      <p id=\"customer_name\"></p>\n      <p><strong>Customer Number:</strong> <span id=\"customer_number\"></span></p>\n      <p><strong>Customer Account #:</strong> <span id=\"customer_account_number\"></span></p>\n      <p id=\"customer_address\"></p>\n    </div>\n\n    <!-- Items -->\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Product Code</th>\n          <th>Description</th>\n          <th>UoM</th>\n          <th>Quantity</th>\n          <th>Unit Price (<span id=\"currency_label\"></span>)</th>\n          <th>Line Item Amount (<span id=\"currency_label_2\"></span>)</th>\n        </tr>\n      </thead>\n      <tbody id=\"invoice_items\"></tbody>\n    </table>\n\n    <!-- Totals -->\n    <div class=\"total-section\">\n      <p><strong>Subtotal:</strong> <span id=\"subtotal\"></span></p>\n      <p><strong>Discount:</strong> <span id=\"discount\"></span></p>\n      <p><strong>Freight Charges:</strong> <span id=\"freight_charges\"></span></p>\n      <p><strong>Selling Costs:</strong> <span id=\"selling_costs\"></span></p>\n      <p><strong>Tax Details:</strong> <span id=\"tax_details\"></span></p>\n      <p><strong>Tax:</strong> <span id=\"tax_amount\"></span></p>\n      <p class=\"final-total\"><strong>Total Due:</strong> <span id=\"total_amount_due\"></span></p>\n    </div>\n  </div>\n\n  <script>\n    // Example JSON (replace this with your generator output)\n    const data = {\n      \"invoice\": {\n        \"header\": {\n          \"invoice_number\": \"90010\",\n          \"invoice_date\": \"2024-01-31\",\n          \"due_date\": \"2024-02-15\",\n          \"po_number\": \"10010\",\n          \"so_or_wo_number\": \"\",\n          \"delivery_or_completion_date\": \"2024-03-10\",\n          \"currency_unit\": \"USD\",\n          \"shipping_or_delivery_terms\": \"\",\n          \"transfer_of_rights_indication\": \"\",\n          \"payment_terms\": \"Immediate wire\"\n        },\n        \"supplier\": {\n          \"supplier_name\": \"Syneitx Global\",\n          \"supplier_number\": \"\",\n          \"supplier_address\": \"PO Box 123, Unknown, CO\",\n          \"supplier_email\": \"john@unknownmail.com\"\n        },\n        \"customer\": {\n          \"customer_name\": \"MediTech Innovations\",\n          \"customer_number\": \"\",\n          \"customer_account_number\": \"\",\n          \"customer_address\": \"\"\n        },\n        \"items\": [\n          {\n            \"product_code\": \"\",\n            \"description\": \"Consulting service; ‘special project’\",\n            \"uom\": \"\",\n            \"quantity\": 2,\n            \"unit_price\": 70000,\n            \"line_total\": 140000\n          }\n        ],\n        \"totals\": {\n          \"subtotal\": 140000,\n          \"discount\": 0,\n          \"freight_charges\": 0,\n          \"selling_costs\": 0,\n          \"tax_details\": \"Not Applicable\",\n          \"tax_amount\": 0,\n          \"total_amount_due\": 140000\n        }\n      }\n    };\n\n    // Bind function\n    function bindData(data) {\n      const inv = data.invoice;\n\n      // Bind header/meta\n      Object.entries(inv.header).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n\n      // Bind supplier & customer\n      Object.entries(inv.supplier).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n      Object.entries(inv.customer).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n\n      // Bind totals\n      Object.entries(inv.totals).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n\n      // Currency label in table headers\n      document.getElementById(\"currency_label\").textContent = inv.header.currency_unit;\n      document.getElementById(\"currency_label_2\").textContent = inv.header.currency_unit;\n\n      // Render items\n      const tbody = document.getElementById(\"invoice_items\");\n      inv.items.forEach(item => {\n        const tr = document.createElement(\"tr\");\n        tr.innerHTML = `\n          <td>${item.product_code || \"\"}</td>\n          <td>${item.description}</td>\n          <td>${item.uom || \"\"}</td>\n          <td>${item.quantity}</td>\n          <td>${item.unit_price}</td>\n          <td>${item.line_total}</td>\n        `;\n        tbody.appendChild(tr);\n      });\n    }\n\n    // Run binding\n    bindData(data);\n  </script>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "3ecc8651-4c0b-4153-a07b-b1643bc30335",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1240,
        8500
      ],
      "id": "b242344f-d5e5-4c17-b0b0-ea120d63969c",
      "name": "Invoice(Goods)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Expenses Sub-Ledger</title>\n  <style>\n    /* Force landscape on print/PDF */\n    @page { size: A4 landscape; margin: 14mm; }\n    @media print { \n      body { -webkit-print-color-adjust: exact; }\n      .items-table th { position: sticky; top: 0; }\n    }\n\n    *, *::before, *::after { box-sizing: border-box; }\n\n    :root { --gap: 18px; }\n\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 100%;\n      margin: 0 auto;\n      padding: 16px;\n      background-color: <<background_color>>;\n      color: <<text_color>>;\n    }\n\n    .ledger {\n      background: <<invoice_background>>;\n      border: 2px solid <<border_color>>;\n      padding: 16px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      border-radius: 8px;\n    }\n\n    .ledger-header {\n      background: <<header_background>>;\n      color: <<header_text_color>>;\n      padding: 10px 12px;\n      margin: -16px -16px 16px -16px;\n      text-align: center;\n      font-size: 20px;\n      font-weight: bold;\n      letter-spacing: 1.2px;\n      border-top-left-radius: 8px;\n      border-top-right-radius: 8px;\n    }\n\n    .company-info {\n      margin-bottom: 12px;\n      display: flex;\n      align-items: flex-start;\n      gap: var(--gap);\n    }\n    .company-info h2 {\n      margin: 0 0 4px 0;\n      color: <<company_name_color>>;\n      font-size: 18px;\n      line-height: 1.2;\n    }\n    .company-info p { margin: 2px 0; color: <<company_details_color>>; }\n\n    .logo {\n      width: <<logo_width>>;\n      height: <<logo_height>>;\n      background: <<logo_background>>;\n      color: <<logo_text_color>>;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n      background-image: url('<<logo_url>>');\n      background-size: cover;\n      background-position: center;\n      flex-shrink: 0;\n    }\n\n    .report-details {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: 10px 18px;\n      margin: 12px 0 10px;\n      background: <<details_background>>;\n      padding: 10px;\n      border-radius: 6px;\n      font-size: 12px;\n    }\n    .report-details p { margin: 0; color: <<meta_text_color>>; }\n    .report-details strong { color: <<meta_label_color>>; }\n\n    .entity-block {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 10px 18px;\n      background: <<bill_to_background>>;\n      padding: 10px;\n      border-radius: 6px;\n      margin: 12px 0;\n      font-size: 12px;\n    }\n    .entity-block h3 {\n      grid-column: 1 / -1;\n      margin: 0 0 6px 0;\n      color: <<bill_to_header_color>>;\n      font-size: 14px;\n    }\n    .entity-block p { margin: 0; color: <<bill_to_text_color>>; }\n\n    /* Table Layout - Slimmed columns, fixed layout, wrap long text */\n    .items-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 12px 0;\n      font-size: 11px;\n      table-layout: fixed;\n      word-break: break-word;\n    }\n    .items-table th {\n      background: <<table_header_background>>;\n      color: <<table_header_text_color>>;\n      border: 1px solid <<table_border_color>>;\n      padding: 6px 5px;\n      text-align: left;\n      font-weight: bold;\n      white-space: nowrap;\n    }\n    .items-table td {\n      border: 1px solid <<table_border_color>>;\n      padding: 6px 5px;\n      color: <<table_text_color>>;\n      vertical-align: top;\n    }\n    .items-table tr:nth-child(even) { background: <<table_row_alternate_background>>; }\n    .num, .amount { text-align: right; font-family: monospace; white-space: nowrap; }\n    .col-desc { white-space: normal; }\n\n    /* Panels / Summaries */\n    .summary-grid {\n      display: grid;\n      grid-template-columns: 1.3fr 1.2fr 1fr;\n      gap: 12px;\n      align-items: start;\n      margin-top: 6px;\n    }\n    .panel {\n      background: <<total_background>>;\n      padding: 10px;\n      border-radius: 6px;\n    }\n    .panel h4 { margin: 0 0 8px 0; color: <<final_total_color>>; font-size: 14px; }\n\n    .mini-table {\n      width: 100%;\n      border-collapse: collapse;\n      font-size: 11px;\n      margin-top: 6px;\n      table-layout: fixed;\n    }\n    .mini-table th, .mini-table td {\n      border: 1px solid <<table_border_color>>;\n      padding: 6px;\n      text-align: left;\n      word-break: break-word;\n    }\n    .mini-table th { background: <<table_header_background>>; color: <<table_header_text_color>>; }\n\n    .totals p { margin: 4px 0; font-size: 12px; color: <<total_text_color>>; display: flex; justify-content: space-between; }\n    .totals .final-total { font-size: 15px; font-weight: bold; color: <<final_total_color>>; border-top: 2px solid <<primary_color>>; padding-top: 6px; margin-top: 6px; }\n    .muted { color: <<company_details_color>>; font-size: 10px; }\n\n    .notes { background: <<terms_background>>; padding: 10px; border-left: 4px solid <<accent_color>>; margin-top: 12px; color: <<terms_text_color>>; border-radius: 6px; font-size: 11px; }\n  </style>\n</head>\n<body>\n  <div class=\"ledger\">\n    <div class=\"ledger-header\">EXPENSES SUB-LEDGER</div>\n\n    <!-- Company Info -->\n    <div class=\"company-info\">\n      <div class=\"logo\"><<logo_text>></div>\n      <div>\n        <h2><<company_name>></h2>\n        <p><<company_address>></p>\n        <p><<company_phone>></p>\n        <p><<company_email>></p>\n      </div>\n    </div>\n\n    <!-- Report Meta -->\n    <div class=\"report-details\">\n      <p><strong>Ledger ID:</strong> <<ledger_id>></p>\n      <p><strong>Entity:</strong> <<entity_name>></p>\n      <p><strong>Period Start:</strong> <<period_start>></p>\n      <p><strong>Period End:</strong> <<period_end>></p>\n      <p><strong>Base Currency:</strong> <<base_currency>></p>\n      <p><strong>Prepared On:</strong> <<prepared_on>></p>\n      <p><strong>Prepared By:</strong> <<prepared_by>></p>\n      <p><strong>Approval Status:</strong> <<approval_status>></p>\n    </div>\n\n    <!-- Department / Allocation -->\n    <div class=\"entity-block\">\n      <h3>Department / Allocation</h3>\n      <p><strong>Department:</strong> <<department_name>></p>\n      <p><strong>Cost Center:</strong> <<cost_center_code>></p>\n      <p><strong>Project / Job:</strong> <<project_code>></p>\n    </div>\n\n    <!-- Line Items Table (Slimmed) -->\n    <table class=\"items-table\">\n      <colgroup>\n        <col style=\"width: 7%\">  <!-- Txn Date -->\n        <col style=\"width: 14%\"> <!-- Vendor / Payee -->\n        <col style=\"width: 10%\"> <!-- Expense Category -->\n        <col style=\"width: 22%\"> <!-- Description -->\n        <col style=\"width: 15%\"> <!-- GL Account (No — Name) -->\n        <col style=\"width: 6%\">  <!-- Qty -->\n        <col style=\"width: 8%\">  <!-- Unit Cost -->\n        <col style=\"width: 6%\">  <!-- Tax -->\n        <col style=\"width: 8%\">  <!-- Line Total -->\n        <col style=\"width: 6%\">  <!-- Currency -->\n        <col style=\"width: 8%\">  <!-- Transaction # -->\n        <col style=\"width: 10%\"> <!-- Due Date (Payables) -->\n      </colgroup>\n      <thead>\n        <tr>\n          <th>Txn Date</th>\n          <th>Vendor / Payee</th>\n          <th>Expense Category</th>\n          <th>Description</th>\n          <th>GL Account (No — Name)</th>\n          <th>Qty</th>\n          <th>Unit Cost</th>\n          <th>Tax</th>\n          <th>Line Total</th>\n          <th>Currency</th>\n          <th>Transaction #</th>\n          <th>Due Date (Payables)</th>\n        </tr>\n      </thead>\n      <tbody>\n        <<expense_rows>>\n      </tbody>\n    </table>\n\n    <!-- Summaries -->\n    <div class=\"summary-grid\">\n      <!-- Category Summary -->\n      <div class=\"panel\">\n        <h4>Category Summary</h4>\n        <table class=\"mini-table\">\n          <thead>\n            <tr><th>Category</th><th>Pre-Tax</th><th>Tax</th><th>Total</th></tr>\n          </thead>\n          <tbody><<category_summary_rows>></tbody>\n        </table>\n\n        <h4 style=\"margin-top:8px;\">Tax Summary</h4>\n        <table class=\"mini-table\">\n          <thead>\n            <tr><th>Tax Code</th><th>Rate</th><th>Taxable</th><th>Tax</th></tr>\n          </thead>\n          <tbody><<tax_summary_rows>></tbody>\n        </table>\n      </div>\n\n      <!-- Account Summary -->\n      <div class=\"panel\">\n        <h4>Account Summary</h4>\n        <table class=\"mini-table\">\n          <thead>\n            <tr>\n              <th>GL Account #</th>\n              <th>GL Account Name</th>\n              <th>Opening Balance</th>\n              <th>Debits</th>\n              <th>Credits</th>\n              <th>Ending Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            <<account_summary_rows>>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Totals / Liability -->\n      <div class=\"panel totals\">\n        <p><span><strong>Pre-Tax Subtotal</strong></span><span class=\"amount\"><<subtotal_pretax>></span></p>\n        <p><span><strong>Total Tax</strong></span><span class=\"amount\"><<total_tax>></span></p>\n        <p class=\"final-total\"><span><strong>Gross Total</strong></span><span class=\"amount\"><<gross_total>></span></p>\n        <p><span>Non-Reimbursable</span><span class=\"amount\"><<non_reimbursable_total>></span></p>\n        <p><span>Advances Applied</span><span class=\"amount\"><<advances_applied>></span></p>\n        <p class=\"final-total\"><span><strong>Net Payable</strong></span><span class=\"amount\"><<net_payable>></span></p>\n        <p class=\"muted\"><em>Base Currency: <<base_currency>> | FX Diff: <<fx_difference>></em></p>\n      </div>\n    </div>\n\n    <!-- Journal Export -->\n    <div class=\"panel\" style=\"margin-top:10px;\">\n      <h4>Journal Export</h4>\n      <table class=\"mini-table\">\n        <thead>\n          <tr><th>Account</th><th>Description</th><th>Debit</th><th>Credit</th></tr>\n        </thead>\n        <tbody><<journal_entries_rows>></tbody>\n      </table>\n    </div>\n\n    <!-- Notes -->\n    <div class=\"notes\">\n      <strong>Notes & Policy References:</strong> <<policy_notes>>\n    </div>\n\n    <!-- Approval Trail -->\n    <div class=\"panel\" style=\"margin-top:10px;\">\n      <h4>Approval Trail</h4>\n      <table class=\"mini-table\">\n        <thead>\n          <tr><th>Role</th><th>Name</th><th>Action</th><th>Date/Time</th><th>Remarks</th></tr>\n        </thead>\n        <tbody><<approval_trail_rows>></tbody>\n      </table>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "d9ed6ffd-fd66-467d-b2c1-2df0b603e15a",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1220,
        8820
      ],
      "id": "5a7f6ff8-a2a6-43af-868a-1531419f3785",
      "name": "Expenses Sub-Ledger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Disbursement Listing</title>\n  <style>\n    /* Force landscape layout for printing */\n    @page {\n      size: A4 landscape;\n      margin: 12mm;\n    }\n    @media print {\n      body { background: #fff !important; }\n      .no-print { display: none !important; }\n    }\n\n    body {\n      font-family: Arial, sans-serif;\n      margin: 0 auto;\n      padding: 12px;\n      background-color: <<background_color>>;\n      color: <<text_color>>;\n    }\n\n    .report {\n      background: <<invoice_background>>;\n      border: 1px solid <<border_color>>;\n      padding: 20px;\n    }\n\n    .report-header {\n      background: <<header_background>>;\n      color: <<header_text_color>>;\n      padding: 14px;\n      margin: -20px -20px 20px -20px;\n      text-align: center;\n      font-size: 22px;\n      font-weight: bold;\n      letter-spacing: 1px;\n    }\n\n    .company-info {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 14px;\n    }\n    .company-info h2 {\n      margin: 0 0 6px 0;\n      color: <<company_name_color>>;\n      font-size: 18px;\n    }\n    .company-info p {\n      margin: 2px 0;\n      font-size: 12px;\n      color: <<company_details_color>>;\n    }\n    .logo {\n      width: 80px;\n      height: 50px;\n      background-image: url('<<logo_url>>');\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n\n    .filters {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px 20px;\n      margin: 12px 0;\n      background: <<details_background>>;\n      padding: 10px 12px;\n      border-radius: 4px;\n      font-size: 12px;\n    }\n    .filters p { margin: 0; }\n\n    .table-wrap {\n      overflow-x: auto;\n      border: 1px solid <<table_border_color>>;\n      border-radius: 4px;\n      margin-top: 12px;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      font-size: 12px;\n    }\n    th, td {\n      padding: 6px 8px;\n      border: 1px solid <<table_border_color>>;\n    }\n    th {\n      background: <<table_header_background>>;\n      color: <<table_header_text_color>>;\n      font-weight: bold;\n      text-align: left;\n      white-space: nowrap;\n    }\n    td { color: <<table_text_color>>; }\n    tr:nth-child(even) td { background: <<table_row_alternate_background>>; }\n    .right { text-align: right; font-family: monospace; }\n    .center { text-align: center; }\n\n    .totals {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: flex-end;\n      gap: 24px;\n      margin: 14px 0;\n      background: <<total_background>>;\n      padding: 12px 14px;\n      border-radius: 4px;\n      font-size: 13px;\n    }\n    .final-total {\n      font-size: 16px;\n      font-weight: bold;\n      color: <<final_total_color>>;\n      border-top: 2px solid <<primary_color>>;\n      padding-top: 4px;\n    }\n\n    .summary {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 12px;\n      margin-top: 14px;\n    }\n    .card {\n      border: 1px solid <<table_border_color>>;\n      border-radius: 4px;\n      padding: 8px;\n      font-size: 12px;\n      background: <<details_background>>;\n    }\n    .card h4 {\n      margin: 0 0 6px 0;\n      font-size: 13px;\n    }\n    .mini {\n      width: 100%;\n      border-collapse: collapse;\n      font-size: 12px;\n    }\n    .mini th, .mini td {\n      padding: 4px 6px;\n      border: 1px dashed <<table_border_color>>;\n    }\n    .mini th {\n      background: transparent;\n      color: <<table_header_text_color>>;\n      text-align: left;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"report\">\n    <div class=\"report-header\">DISBURSEMENT LISTING</div>\n\n    <div class=\"company-info\">\n      <div>\n        <h2><<company_name>></h2>\n        <p><<company_address>></p>\n        <p><<company_phone>></p>\n        <p><<company_email>></p>\n      </div>\n      <div class=\"logo\"></div>\n    </div>\n\n    <div class=\"filters\">\n      <p><strong>Period:</strong> <<report_start_date>> to <<report_end_date>></p>\n      <p><strong>Bank A/c:</strong> <<bank_account_name>></p>\n      <p><strong>Prepared On:</strong> <<prepared_on>></p>\n      <p><strong>Prepared By:</strong> <<prepared_by>></p>\n    </div>\n\n    <div class=\"table-wrap\">\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Voucher #</th>\n            <th>Payee</th>\n            <th>Vendor #</th> <!-- Added Vendor Number -->\n            <th>Mode</th>\n            <th>Instr./UTR</th>\n            <th>GL Account</th>\n            <th>Project / CC</th>\n            <th>Description</th>\n            <th class=\"right\">Gross</th>\n            <th class=\"right\">Withholding/TDS</th>\n            <th class=\"right\">Net Paid</th>\n            <th class=\"center\">Status</th>\n            <th class=\"center\">Approved By</th>\n          </tr>\n        </thead>\n        <tbody>\n          <<disbursement_rows>>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"totals\">\n      <p><strong>Total Payees:</strong> <<total_payees>></p>\n      <p><strong>Gross Disbursed:</strong> <<total_gross_amount>></p>\n      <p><strong>Total Withholding/TDS:</strong> <<total_withholding_amount>></p>\n      <p class=\"final-total\">Net Disbursed: <<total_net_disbursed>></p>\n    </div>\n\n    <div class=\"summary\">\n      <div class=\"card\">\n        <h4>Summary by Payment Mode</h4>\n        <table class=\"mini\">\n          <<summary_by_mode_rows>>\n        </table>\n      </div>\n      <div class=\"card\">\n        <h4>Summary by Payee (Top 10)</h4>\n        <table class=\"mini\">\n          <<summary_by_payee_rows>>\n        </table>\n      </div>\n      <div class=\"card\">\n        <h4>Summary by GL Account</h4>\n        <table class=\"mini\">\n          <<summary_by_gl_rows>>\n        </table>\n      </div>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "ee7794c6-872b-4558-8bef-a67f3c3c5acc",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1280,
        9120
      ],
      "id": "171578c8-71a8-4857-b6ad-29b2a1bcbe53",
      "name": "Disbursement Listing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice (Goods)</title>\n  <style>\n    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n    .invoice-header { text-align: center; font-size: 28px; font-weight: bold; margin-bottom: 20px; }\n    .company-info { margin-bottom: 20px; }\n    .meta-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 20px; }\n    .items-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n    .items-table th, .items-table td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n    .items-table th { background: #f5f5f5; }\n    .total-section { text-align: right; margin-top: 20px; }\n    .final-total { font-size: 20px; font-weight: bold; margin-top: 10px; }\n  </style>\n</head>\n<body>\n  <div class=\"invoice\">\n    <div class=\"invoice-header\">INVOICE (SERVICES)</div>\n\n    <!-- Supplier -->\n    <div class=\"company-info\">\n      <h2 id=\"supplier_name\"></h2>\n      <p id=\"supplier_address\"></p>\n      <p id=\"supplier_email\"></p>\n      <p><strong>Supplier Number:</strong> <span id=\"supplier_number\"></span></p>\n    </div>\n\n    <!-- Invoice Meta -->\n    <div class=\"meta-grid\">\n      <div>\n        <p><strong>Invoice #:</strong> <span id=\"invoice_number\"></span></p>\n        <p><strong>Invoice Date:</strong> <span id=\"invoice_date\"></span></p>\n        <p><strong>Due Date:</strong> <span id=\"due_date\"></span></p>\n        <p><strong>PO Number:</strong> <span id=\"po_number\"></span></p>\n        <p><strong>SO/WO Number:</strong> <span id=\"so_or_wo_number\"></span></p>\n      </div>\n      <div>\n        <p><strong>Delivery / Completion Date:</strong> <span id=\"delivery_or_completion_date\"></span></p>\n        <p><strong>Currency Unit:</strong> <span id=\"currency_unit\"></span></p>\n        <p><strong>Shipping / Delivery Terms:</strong> <span id=\"shipping_or_delivery_terms\"></span></p>\n        <p><strong>Transfer of Rights:</strong> <span id=\"transfer_of_rights_indication\"></span></p>\n        <p><strong>Payment Terms:</strong> <span id=\"payment_terms\"></span></p>\n      </div>\n    </div>\n\n    <!-- Customer -->\n    <div>\n      <h3>Bill To:</h3>\n      <p id=\"customer_name\"></p>\n      <p><strong>Customer Number:</strong> <span id=\"customer_number\"></span></p>\n      <p><strong>Customer Account #:</strong> <span id=\"customer_account_number\"></span></p>\n      <p id=\"customer_address\"></p>\n    </div>\n\n    <!-- Items -->\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Product Code</th>\n          <th>Description</th>\n          <th>UoM</th>\n          <th>Quantity</th>\n          <th>Unit Price (<span id=\"currency_label\"></span>)</th>\n          <th>Line Item Amount (<span id=\"currency_label_2\"></span>)</th>\n        </tr>\n      </thead>\n      <tbody id=\"invoice_items\"></tbody>\n    </table>\n\n    <!-- Totals -->\n    <div class=\"total-section\">\n      <p><strong>Subtotal:</strong> <span id=\"subtotal\"></span></p>\n      <p><strong>Discount:</strong> <span id=\"discount\"></span></p>\n      <p><strong>Freight Charges:</strong> <span id=\"freight_charges\"></span></p>\n      <p><strong>Selling Costs:</strong> <span id=\"selling_costs\"></span></p>\n      <p><strong>Tax Details:</strong> <span id=\"tax_details\"></span></p>\n      <p><strong>Tax:</strong> <span id=\"tax_amount\"></span></p>\n      <p class=\"final-total\"><strong>Total Due:</strong> <span id=\"total_amount_due\"></span></p>\n    </div>\n  </div>\n\n  <script>\n    // Example JSON (replace this with your generator output)\n    const data = {\n      \"invoice\": {\n        \"header\": {\n          \"invoice_number\": \"90010\",\n          \"invoice_date\": \"2024-01-31\",\n          \"due_date\": \"2024-02-15\",\n          \"po_number\": \"10010\",\n          \"so_or_wo_number\": \"\",\n          \"delivery_or_completion_date\": \"2024-03-10\",\n          \"currency_unit\": \"USD\",\n          \"shipping_or_delivery_terms\": \"\",\n          \"transfer_of_rights_indication\": \"\",\n          \"payment_terms\": \"Immediate wire\"\n        },\n        \"supplier\": {\n          \"supplier_name\": \"Syneitx Global\",\n          \"supplier_number\": \"\",\n          \"supplier_address\": \"PO Box 123, Unknown, CO\",\n          \"supplier_email\": \"john@unknownmail.com\"\n        },\n        \"customer\": {\n          \"customer_name\": \"MediTech Innovations\",\n          \"customer_number\": \"\",\n          \"customer_account_number\": \"\",\n          \"customer_address\": \"\"\n        },\n        \"items\": [\n          {\n            \"product_code\": \"\",\n            \"description\": \"Consulting service; ‘special project’\",\n            \"uom\": \"\",\n            \"quantity\": 2,\n            \"unit_price\": 70000,\n            \"line_total\": 140000\n          }\n        ],\n        \"totals\": {\n          \"subtotal\": 140000,\n          \"discount\": 0,\n          \"freight_charges\": 0,\n          \"selling_costs\": 0,\n          \"tax_details\": \"Not Applicable\",\n          \"tax_amount\": 0,\n          \"total_amount_due\": 140000\n        }\n      }\n    };\n\n    // Bind function\n    function bindData(data) {\n      const inv = data.invoice;\n\n      // Bind header/meta\n      Object.entries(inv.header).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n\n      // Bind supplier & customer\n      Object.entries(inv.supplier).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n      Object.entries(inv.customer).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n\n      // Bind totals\n      Object.entries(inv.totals).forEach(([key, val]) => {\n        const el = document.getElementById(key);\n        if (el) el.textContent = val;\n      });\n\n      // Currency label in table headers\n      document.getElementById(\"currency_label\").textContent = inv.header.currency_unit;\n      document.getElementById(\"currency_label_2\").textContent = inv.header.currency_unit;\n\n      // Render items\n      const tbody = document.getElementById(\"invoice_items\");\n      inv.items.forEach(item => {\n        const tr = document.createElement(\"tr\");\n        tr.innerHTML = `\n          <td>${item.product_code || \"\"}</td>\n          <td>${item.description}</td>\n          <td>${item.uom || \"\"}</td>\n          <td>${item.quantity}</td>\n          <td>${item.unit_price}</td>\n          <td>${item.line_total}</td>\n        `;\n        tbody.appendChild(tr);\n      });\n    }\n\n    // Run binding\n    bindData(data);\n  </script>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "94213780-385c-42e9-83d3-592efce6b80e",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1280,
        9440
      ],
      "id": "2bbb814d-ec5b-4564-b4b1-3827ac436a0a",
      "name": "invoices_services"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Purchase Order</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: <<background_color>>;\n      color: <<text_color>>;\n    }\n    .purchase-order {\n      background: <<po_background>>;\n      border: 1px solid <<border_color>>;\n      padding: 30px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .po-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 30px;\n      padding-bottom: 20px;\n      border-bottom: 3px solid <<primary_color>>;\n    }\n    .po-title {\n      font-size: 32px;\n      font-weight: bold;\n      color: <<header_text_color>>;\n      letter-spacing: 1px;\n    }\n    .company-info {\n      text-align: right;\n      color: <<company_text_color>>;\n    }\n    .company-info h3 {\n      margin: 0 0 10px 0;\n      color: <<company_name_color>>;\n    }\n    .company-info p { margin: 2px 0; }\n\n    .po-details {\n      display: flex;\n      justify-content: space-between;\n      margin: 30px 0;\n      background: <<details_background>>;\n      padding: 20px;\n      border-radius: 5px;\n    }\n    .po-meta p {\n      margin: 8px 0;\n      color: <<meta_text_color>>;\n    }\n    .po-meta strong { color: <<meta_label_color>>; }\n\n    .vendor-info {\n      background: <<vendor_background>>;\n      padding: 20px;\n      border-radius: 5px;\n      margin: 30px 0;\n    }\n    .vendor-info h3 {\n      margin: 0 0 15px 0;\n      color: <<vendor_header_color>>;\n    }\n    .vendor-info p {\n      margin: 3px 0;\n      color: <<vendor_text_color>>;\n    }\n\n    .items-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 30px 0;\n    }\n    .items-table th {\n      background: <<table_header_background>>;\n      color: <<table_header_text_color>>;\n      border: 1px solid <<table_border_color>>;\n      padding: 15px 12px;\n      text-align: left;\n      font-weight: bold;\n    }\n    .items-table td {\n      border: 1px solid <<table_border_color>>;\n      padding: 12px;\n      color: <<table_text_color>>;\n    }\n    .items-table tr:nth-child(even) {\n      background: <<table_row_alternate_background>>;\n    }\n\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n    }\n\n    .total-section {\n      text-align: right;\n      margin: 30px 0;\n      background: <<total_background>>;\n      padding: 20px;\n      border-radius: 5px;\n    }\n    .total-section .final-total {\n      font-size: 24px;\n      font-weight: bold;\n      color: <<total_color>>;\n      border-top: 2px solid <<primary_color>>;\n      padding-top: 15px;\n      margin-top: 15px;\n    }\n\n    .terms-section {\n      background: <<terms_background>>;\n      padding: 20px;\n      border-left: 5px solid <<accent_color>>;\n      margin: 30px 0;\n      color: <<terms_text_color>>;\n    }\n    .authorization {\n      text-align: right;\n      margin-top: 40px;\n      color: <<auth_text_color>>;\n    }\n\n    .logo {\n      width: <<logo_width>>;\n      height: <<logo_height>>;\n      background: <<logo_background>>;\n      color: <<logo_text_color>>;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n      margin-bottom: 10px;\n      background-image: url('<<logo_url>>');\n      background-size: cover;\n      background-position: center;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"purchase-order\">\n    <div class=\"po-header\">\n      <div class=\"po-title\">PURCHASE ORDER</div>\n      <div class=\"company-info\">\n        <div class=\"logo\"><<logo_text>></div>\n        <h3><<company_name>></h3>\n        <p><<department_name>></p>\n        <p><<company_address>></p>\n      </div>\n    </div>\n\n    <div class=\"po-details\">\n      <div class=\"po-meta\">\n        <p><strong>Purchase Order #:</strong> <<po_number>></p>\n        <p><strong>Date:</strong> <<po_date>></p>\n        <!-- Added mandatory fields -->\n        <p><strong>Service Dates:</strong> <<service_dates>></p>\n        <p><strong>Transaction ID (Services Contract Date):</strong> <<transaction_id>></p>\n      </div>\n    </div>\n\n    <div class=\"vendor-info\">\n      <h3>Vendor Information</h3>\n      <p><strong><<vendor_name>></strong></p>\n      <p><<vendor_address>></p>\n      <p>Email: <<vendor_email>></p>\n    </div>\n\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Item</th>\n          <th>Description</th>\n          <th>Quantity</th>\n          <th>Unit Price</th>\n          <th>Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <<po_items>>\n      </tbody>\n    </table>\n\n    <div class=\"total-section\">\n      <div class=\"final-total\">Total PO Value: <<total_amount>></div>\n    </div>\n\n    <div class=\"terms-section\">\n      <p><strong>Terms:</strong> <<payment_terms>></p>\n    </div>\n\n    <div class=\"authorization\">\n      <p><strong>Authorized by:</strong> <<authorized_by>></p>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "58dad027-559c-4f79-bd02-31aa0478746a",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        9760
      ],
      "id": "b79542f1-894b-4100-bf3e-f1d7e8a95bdf",
      "name": "Purchase Order"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Shipping Document (Sending)</title>\n<style>\n  :root{\n    /* Theme tokens (override as needed) */\n    --background: <<background_color>>;\n    --text: <<text_color>>;\n    --panel: <<invoice_background>>;\n    --border: <<border_color>>;\n    --header-bg: <<header_background>>;\n    --header-text: <<header_text_color>>;\n    --company-name: <<company_name_color>>;\n    --company-details: <<company_details_color>>;\n    --meta-text: <<meta_text_color>>;\n    --meta-label: <<meta_label_color>>;\n    --section-bg: <<details_background>>;\n    --party-bg: <<bill_to_background>>;\n    --party-header: <<bill_to_header_color>>;\n    --party-text: <<bill_to_text_color>>;\n    --th-bg: <<table_header_background>>;\n    --th-text: <<table_header_text_color>>;\n    --td-text: <<table_text_color>>;\n    --row-alt: <<table_row_alternate_background>>;\n    --total-bg: <<total_background>>;\n    --total-text: <<total_text_color>>;\n    --final-total: <<final_total_color>>;\n    --accent: <<accent_color>>;\n    --primary: <<primary_color>>;\n    --logo-w: <<logo_width>>;\n    --logo-h: <<logo_height>>;\n    --logo-bg: <<logo_background>>;\n    --logo-text: <<logo_text_color>>;\n  }\n\n  /* Screen layout – centered A4 landscape sheet */\n  body{\n    margin:0; background:var(--background); color:var(--text); font-family: Arial, Helvetica, sans-serif;\n  }\n  .page{\n    width: 297mm;  /* A4 landscape width */\n    min-height: 210mm;\n    margin: 10mm auto;\n    background: var(--panel);\n    border: 2px solid var(--border);\n    box-shadow: 0 4px 10px rgba(0,0,0,.12);\n    padding: 14mm;\n    box-sizing: border-box;\n  }\n\n  /* Print layout */\n  @page {\n    size: A4 landscape;\n    margin: 10mm;\n  }\n  @media print {\n    body { background: #fff; }\n    .page{\n      margin: 0; border: none; box-shadow: none; width: auto; min-height: auto; padding: 0;\n    }\n    .no-print { display: none !important; }\n    thead { display: table-header-group; } /* repeat header on pages */\n    tr, img { page-break-inside: avoid; }\n  }\n\n  .doc-header{\n    background: var(--header-bg);\n    color: var(--header-text);\n    text-align: center;\n    font-size: 26px;\n    font-weight: bold;\n    letter-spacing: 1.5px;\n    padding: 12px 16px;\n    border-radius: 6px;\n    margin-bottom: 12px;\n  }\n\n  .topbar{\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 16px;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  .logo{\n    width: var(--logo-w);\n    height: var(--logo-h);\n    background: var(--logo-bg);\n    color: var(--logo-text);\n    display: flex; align-items: center; justify-content: center;\n    border-radius: 6px;\n    font-weight: bold;\n    background-image: url('<<logo_url>>');\n    background-size: cover;\n    background-position: center;\n  }\n  .co h2{\n    margin:0 0 6px 0; font-size: 20px; color: var(--company-name);\n  }\n  .co p{ margin: 2px 0; color: var(--company-details); font-size: 12px; }\n\n  .meta{\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px 14px;\n    background: var(--section-bg);\n    padding: 10px;\n    border-radius: 6px;\n    margin: 10px 0 12px 0;\n    font-size: 13px;\n  }\n  .kv .k{ color: var(--meta-label); font-weight: 600; }\n  .kv .v{ color: var(--meta-text); }\n\n  .parties{\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 12px;\n    margin-top: 8px;\n  }\n  .card{\n    background: var(--party-bg);\n    padding: 10px;\n    border-radius: 6px;\n  }\n  .card h3{ margin:0 0 6px 0; color: var(--party-header); font-size: 15px; }\n  .card p{ margin:3px 0; color: var(--party-text); font-size: 12.5px; }\n\n  table{\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 14px;\n    font-size: 13px;\n  }\n  th{\n    background: var(--th-bg);\n    color: var(--th-text);\n    border: 1px solid var(--border);\n    padding: 8px;\n    text-align: left;\n  }\n  td{\n    border: 1px solid var(--border);\n    padding: 8px;\n    color: var(--td-text);\n    vertical-align: top;\n  }\n  tbody tr:nth-child(even){ background: var(--row-alt); }\n  .qty, .price, .amount, .uom, .code, .currency { text-align: right; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n\n  .notes{\n    margin-top: 12px;\n    padding: 10px;\n    border-left: 4px solid var(--accent);\n    background: var(--section-bg);\n    font-size: 12.5px;\n    color: var(--meta-text);\n    border-radius: 4px;\n  }\n\n  .signatures{\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 16px;\n    margin-top: 20px;\n  }\n  .sig{\n    border-top: 1px solid var(--border);\n    padding-top: 8px;\n    font-size: 12px;\n    color: var(--meta-text);\n    min-height: 48px;\n  }\n  .sig .label{ color: var(--meta-label); font-weight: 600; display: block; margin-bottom: 4px; }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"doc-header\">SHIPPING DOCUMENT (SENDING)</div>\n\n    <div class=\"topbar\">\n      <div class=\"co\">\n        <h2><<company_name>></h2>\n        <p><<company_address>></p>\n        <p><<company_phone>> • <<company_email>></p>\n      </div>\n      <div class=\"logo\"><<logo_text>></div>\n    </div>\n\n    <!-- Core meta (Mandatory) -->\n    <div class=\"meta\">\n      <div class=\"kv\"><div class=\"k\">Shipping Doc #</div><div class=\"v\"><<Shipping_Document_Number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Document Date</div><div class=\"v\"><<Shipping_Doc_date>></div></div>\n      <div class=\"kv\"><div class=\"k\">Order # (PO/SO)</div><div class=\"v\"><<Purchase_Order_Number>> <<Sales_Order_Number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Shipped</div><div class=\"v\"><<Date_Shipped>></div></div>\n\n      <div class=\"kv\"><div class=\"k\">Carrier</div><div class=\"v\"><<Shipping_carrier>></div></div>\n      <div class=\"kv\"><div class=\"k\">Method</div><div class=\"v\"><<Shipping_method>></div></div>\n      <div class=\"kv\"><div class=\"k\">Tracking #</div><div class=\"v\"><<Tracking_number>></div></div>\n\n      <!-- Optional quick refs -->\n      <div class=\"kv\"><div class=\"k\">Customer #</div><div class=\"v\"><<Customer_Number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Supplier #</div><div class=\"v\"><<Supplier_Number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Delivered</div><div class=\"v\"><<Date_Delivered>></div></div>\n      <div class=\"kv\"><div class=\"k\">Received Date</div><div class=\"v\"><<Received_Date>></div></div>\n    </div>\n\n    <!-- Parties -->\n    <div class=\"parties\">\n      <div class=\"card\">\n        <h3>Customer (Consignee)</h3>\n        <p><strong><<Customer_name>></strong></p>\n        <p><<Customer_Address>></p>\n        <!-- Optional -->\n        <p><em>Consignee’s Name & Address:</em> <<Consignee's_name_and_address>></p>\n      </div>\n      <div class=\"card\">\n        <h3>Supplier (Shipper)</h3>\n        <p><strong><<Supplier_Name>></strong></p>\n        <p><<Supplier_Address>></p>\n        <!-- Optional -->\n        <p><em>Shipper’s Name & Address:</em> <<Shipper's_name_and_address>></p>\n      </div>\n    </div>\n\n    <!-- Line Items -->\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:32%\">Product Description</th>\n          <th class=\"code\" style=\"width:12%\">Product Code</th>\n          <th class=\"uom\" style=\"width:10%\">UOM</th>\n          <th class=\"qty\" style=\"width:10%\">Quantity</th>\n          <th class=\"price\" style=\"width:12%\">Unit Price</th>\n          <th class=\"currency\" style=\"width:10%\">Currency</th>\n          <th class=\"amount\" style=\"width:14%\">Line Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        <!-- Insert one <tr> per item. Keep placeholders as-is for your renderer -->\n        <<invoice_items>>\n        <!-- Example shape for each row your system should render:\n        <tr>\n          <td><<Product_Description>></td>\n          <td class=\"code\"><<Product_Code>></td>\n          <td class=\"uom\"><</*Unit_of_measurement*/>></td>\n          <td class=\"qty\"><<Item_Quantity>></td>\n          <td class=\"price\"><<Item_Price>></td>\n          <td class=\"currency\"><<Currency_Unit>></td>\n          <td class=\"amount\"><<Line_item_amount>></td>\n        </tr>\n        -->\n      </tbody>\n    </table>\n\n    <!-- Shipment/Logistics (Optional blocks) -->\n    <div class=\"notes\">\n      <strong>Bill of Lading #:</strong> <<Bill_of_lading_number>> &nbsp; | &nbsp;\n      <strong>Packaging:</strong> <<Packaging_details>> &nbsp; | &nbsp;\n      <strong>Insurance:</strong> <<Insurance_details>> &nbsp; | &nbsp;\n      <strong>Customs:</strong> <<Customs_information>> &nbsp; | &nbsp;\n      <strong>Proof of Delivery:</strong> <<Proof_of_delivery>> &nbsp; | &nbsp;\n      <strong>Shipping/Delivery Terms:</strong> <<Shipping_or_Delivery_Terms>>\n    </div>\n\n    <!-- Signatures -->\n    <div class=\"signatures\">\n      <div class=\"sig\">\n        <span class=\"label\">Prepared By</span>\n        <<Prepared_By>>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Carrier Representative</span>\n        <<Carrier_Signature>>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Received By (Consignee)</span>\n        <<Received_By>>\n      </div>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "eccee5da-3b59-4a05-962c-551f42e9a543",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        10000
      ],
      "id": "f4d866cb-5764-43ee-a32e-c343e47e5d6c",
      "name": "Shipping Document (Sending)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Shipping Document (Receiving)</title>\n<style>\n  :root{\n    --background: <<background_color>>;\n    --text: <<text_color>>;\n    --panel: <<invoice_background>>;\n    --border: <<border_color>>;\n    --header-bg: <<header_background>>;\n    --header-text: <<header_text_color>>;\n    --company-name: <<company_name_color>>;\n    --company-details: <<company_details_color>>;\n    --meta-text: <<meta_text_color>>;\n    --meta-label: <<meta_label_color>>;\n    --section-bg: <<details_background>>;\n    --party-bg: <<bill_to_background>>;\n    --party-header: <<bill_to_header_color>>;\n    --party-text: <<bill_to_text_color>>;\n    --th-bg: <<table_header_background>>;\n    --th-text: <<table_header_text_color>>;\n    --td-text: <<table_text_color>>;\n    --row-alt: <<table_row_alternate_background>>;\n    --accent: <<accent_color>>;\n    --primary: <<primary_color>>;\n    --logo-w: <<logo_width>>;\n    --logo-h: <<logo_height>>;\n    --logo-bg: <<logo_background>>;\n    --logo-text: <<logo_text_color>>;\n  }\n\n  body{ margin:0; background:var(--background); color:var(--text); font-family: Arial, Helvetica, sans-serif; }\n  .page{\n    width: 297mm; min-height: 210mm; margin: 10mm auto;\n    background: var(--panel); border: 2px solid var(--border); box-shadow: 0 4px 10px rgba(0,0,0,.12);\n    padding: 14mm; box-sizing: border-box;\n  }\n\n  @page { size: A4 landscape; margin: 10mm; }\n  @media print{\n    body{ background:#fff; }\n    .page{ margin:0; border:none; box-shadow:none; width:auto; min-height:auto; padding:0; }\n    .no-print{ display:none !important; }\n    thead{ display: table-header-group; }\n    tr, img{ page-break-inside: avoid; }\n  }\n\n  .doc-header{\n    background: var(--header-bg); color: var(--header-text);\n    text-align: center; font-size: 26px; font-weight: bold; letter-spacing: 1.5px;\n    padding: 12px 16px; border-radius: 6px; margin-bottom: 12px;\n  }\n\n  .topbar{\n    display:grid; grid-template-columns: 1fr auto; gap:16px; align-items:center; margin-bottom:10px;\n  }\n  .logo{\n    width: var(--logo-w); height: var(--logo-h);\n    background: var(--logo-bg); color: var(--logo-text);\n    display:flex; align-items:center; justify-content:center; border-radius:6px; font-weight:bold;\n    background-image:url('<<logo_url>>'); background-size:cover; background-position:center;\n  }\n  .co h2{ margin:0 0 6px 0; font-size:20px; color:var(--company-name); }\n  .co p{ margin:2px 0; color:var(--company-details); font-size:12px; }\n\n  .meta{\n    display:grid; grid-template-columns: repeat(4, 1fr);\n    gap:10px 14px; background:var(--section-bg); padding:10px; border-radius:6px; margin:10px 0 12px 0; font-size:13px;\n  }\n  .kv .k{ color:var(--meta-label); font-weight:600; }\n  .kv .v{ color:var(--meta-text); }\n\n  .parties{ display:grid; grid-template-columns:1fr 1fr; gap:12px; margin-top:8px; }\n  .card{ background:var(--party-bg); padding:10px; border-radius:6px; }\n  .card h3{ margin:0 0 6px 0; color:var(--party-header); font-size:15px; }\n  .card p{ margin:3px 0; color:var(--party-text); font-size:12.5px; }\n\n  table{ width:100%; border-collapse:collapse; margin-top:14px; font-size:13px; }\n  th{ background:var(--th-bg); color:var(--th-text); border:1px solid var(--border); padding:8px; text-align:left; }\n  td{ border:1px solid var(--border); padding:8px; color:var(--td-text); vertical-align:top; }\n  tbody tr:nth-child(even){ background:var(--row-alt); }\n  .mono{ text-align:right; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n\n  .notes, .receiving-notes{\n    margin-top:12px; padding:10px; border-left:4px solid var(--accent); background:var(--section-bg);\n    font-size:12.5px; color:var(--meta-text); border-radius:4px;\n  }\n\n  .signatures{ display:grid; grid-template-columns: repeat(3,1fr); gap:16px; margin-top:20px; }\n  .sig{ border-top:1px solid var(--border); padding-top:8px; font-size:12px; color:var(--meta-text); min-height:48px; }\n  .sig .label{ color:var(--meta-label); font-weight:600; display:block; margin-bottom:4px; }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"doc-header\">SHIPPING DOCUMENT (RECEIVING)</div>\n\n    <div class=\"topbar\">\n      <div class=\"co\">\n        <h2><<company_name>></h2>\n        <p><<company_address>></p>\n        <p><<company_phone>> • <<company_email>></p>\n      </div>\n      <div class=\"logo\"><<logo_text>></div>\n    </div>\n\n    <!-- Core meta (retain shipping refs + receiving fields) -->\n    <div class=\"meta\">\n      <div class=\"kv\"><div class=\"k\">Shipping Doc #</div><div class=\"v\"><<Shipping_Document_Number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Document Date</div><div class=\"v\"><<Shipping_Doc_date>></div></div>\n      <div class=\"kv\"><div class=\"k\">Order # (PO/SO)</div><div class=\"v\"><<Purchase_Order_Number>> <<Sales_Order_Number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Carrier</div><div class=\"v\"><<Shipping_carrier>></div></div>\n\n      <div class=\"kv\"><div class=\"k\">Method</div><div class=\"v\"><<Shipping_method>></div></div>\n      <div class=\"kv\"><div class=\"k\">Tracking #</div><div class=\"v\"><<Tracking_number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Shipped</div><div class=\"v\"><<Date_Shipped>></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Delivered</div><div class=\"v\"><<Date_Delivered>></div></div>\n\n      <div class=\"kv\"><div class=\"k\">Received Date</div><div class=\"v\"><<Received_Date>></div></div>\n      <div class=\"kv\"><div class=\"k\">Proof of Delivery</div><div class=\"v\"><<Proof_of_delivery>></div></div>\n      <div class=\"kv\"><div class=\"k\">Bill of Lading #</div><div class=\"v\"><<Bill_of_lading_number>></div></div>\n      <div class=\"kv\"><div class=\"k\">Customer #</div><div class=\"v\"><<Customer_Number>></div></div>\n    </div>\n\n    <!-- Parties -->\n    <div class=\"parties\">\n      <div class=\"card\">\n        <h3>Customer / Receiver (Consignee)</h3>\n        <p><strong><<Customer_name>></strong></p>\n        <p><<Customer_Address>></p>\n        <p><em>Consignee’s Name & Address:</em> <<Consignee's_name_and_address>></p>\n      </div>\n      <div class=\"card\">\n        <h3>Supplier / Shipper</h3>\n        <p><strong><<Supplier_Name>></strong></p>\n        <p><<Supplier_Address>></p>\n        <p><em>Shipper’s Name & Address:</em> <<Shipper's_name_and_address>></p>\n      </div>\n    </div>\n\n    <!-- Receiving Line Items -->\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:24%\">Product Description</th>\n          <th style=\"width:10%\">Product Code</th>\n          <th style=\"width:8%\">UOM</th>\n          <th class=\"mono\" style=\"width:10%\">Qty Shipped</th>\n          <th class=\"mono\" style=\"width:10%\">Qty Received</th>\n          <th class=\"mono\" style=\"width:10%\">Damaged Qty</th>\n          <th class=\"mono\" style=\"width:10%\">Short/Over</th>\n          <th style=\"width:18%\">Remarks</th>\n        </tr>\n      </thead>\n      <tbody>\n        <!-- Your renderer should expand <<receiving_items>> to one <tr> per line.\n             Example structure for each row is shown below (commented). -->\n        <<receiving_items>>\n\n        <!--\n        <tr>\n          <td><<Product_Description>></td>\n          <td class=\"mono\"><<Product_Code>></td>\n          <td class=\"mono\"><<Unit_of_measurement>></td>\n          <td class=\"mono\"><<Item_Quantity>></td> <!-- Qty Shipped -->\n          <td class=\"mono\"><<Item_Received_Quantity>></td>\n          <td class=\"mono\"><<Item_Damaged_Quantity>></td>\n          <td class=\"mono\"><<Item_Short_Over>></td> <!-- e.g., +2 or -1 -->\n          <td><<Item_Receiving_Remarks>></td>\n        </tr>\n        -->\n      </tbody>\n    </table>\n\n    <!-- Optional Commercials (if you also capture values at receiving) -->\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:20%\">Currency</th>\n          <th class=\"mono\" style=\"width:20%\">Unit Price</th>\n          <th class=\"mono\" style=\"width:20%\">Line Amount</th>\n          <th style=\"width:40%\">Pricing Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        <<receiving_amount_rows>>\n        <!--\n        <tr>\n          <td><<Currency_Unit>></td>\n          <td class=\"mono\"><<Item_Price>></td>\n          <td class=\"mono\"><<Line_item_amount>></td>\n          <td><<Pricing_Remarks>></td>\n        </tr>\n        -->\n      </tbody>\n    </table>\n\n    <!-- Packaging / Compliance / Insurance -->\n    <div class=\"notes\">\n      <strong>Packaging:</strong> <<Packaging_details>> &nbsp; | &nbsp;\n      <strong>Insurance:</strong> <<Insurance_details>> &nbsp; | &nbsp;\n      <strong>Customs:</strong> <<Customs_information>> &nbsp; | &nbsp;\n      <strong>Shipping/Delivery Terms:</strong> <<Shipping_or_Delivery_Terms>>\n    </div>\n\n    <!-- Receiving Checks -->\n    <div class=\"receiving-notes\">\n      <p><strong>Inspection Status:</strong> <<Receiving_Inspection_Status>> (e.g., Accepted / Accepted with Discrepancy / Rejected)</p>\n      <p><strong>Discrepancy Summary:</strong> <<Receiving_Discrepancy_Summary>></p>\n      <p><strong>Condition on Arrival:</strong> <<Receiving_Condition_Notes>></p>\n      <p><strong>Additional Notes:</strong> <<Receiving_Additional_Notes>></p>\n    </div>\n\n    <!-- Signatures -->\n    <div class=\"signatures\">\n      <div class=\"sig\">\n        <span class=\"label\">Received By (Consignee)</span>\n        <<Received_By>>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Checked/Inspected By</span>\n        <<Inspected_By>>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Carrier Representative</span>\n        <<Carrier_Signature>>\n      </div>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "1ce2eeb7-6c01-47e2-a216-c11feb020951",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        10320
      ],
      "id": "4de4cdce-da05-40ba-9085-a0f0d8e37c96",
      "name": "Shipping Document (Receiving)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Order Document</title>\n  <style>\n    :root { /* fallbacks in case tokens are empty */\n      --space: 20px;\n    }\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: <<background_color>>;\n      color: <<text_color>>;\n    }\n    .doc {\n      background: <<invoice_background>>;\n      border: 2px solid <<border_color>>;\n      padding: 30px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .doc-header {\n      background: <<header_background>>;\n      color: <<header_text_color>>;\n      padding: 20px;\n      margin: -30px -30px 30px -30px;\n      text-align: center;\n      font-size: 28px;\n      font-weight: bold;\n      letter-spacing: 2px;\n    }\n    .subtitle {\n      font-size: 14px;\n      opacity: 0.9;\n      margin-top: 4px;\n      letter-spacing: 1px;\n    }\n    .company-info {\n      margin-bottom: 30px;\n      position: relative;\n      min-height: 70px;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: <<company_name_color>>;\n      font-size: 22px;\n    }\n    .company-info p {\n      margin: 2px 0;\n      color: <<company_details_color>>;\n    }\n    .logo {\n      position: absolute;\n      right: 0;\n      top: 0;\n      width: <<logo_width>>;\n      height: <<logo_height>>;\n      background: <<logo_background>>;\n      color: <<logo_text_color>>;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n      background-image: url('<<logo_url>>');\n      background-size: cover;\n      background-position: center;\n    }\n\n    .order-details {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      margin: 30px 0;\n      background: <<details_background>>;\n      padding: 15px;\n      border-radius: 5px;\n    }\n    .meta p {\n      margin: 6px 0;\n      color: <<meta_text_color>>;\n      line-height: 1.25;\n    }\n    .meta strong {\n      color: <<meta_label_color>>;\n    }\n\n    .party-cards {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    .card {\n      background: <<bill_to_background>>;\n      padding: 15px;\n      border-radius: 5px;\n    }\n    .card h3 {\n      margin: 0 0 10px 0;\n      color: <<bill_to_header_color>>;\n    }\n    .card p {\n      margin: 3px 0;\n      color: <<bill_to_text_color>>;\n    }\n\n    .items-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 30px 0;\n      table-layout: fixed;\n      word-wrap: break-word;\n    }\n    .items-table th {\n      background: <<table_header_background>>;\n      color: <<table_header_text_color>>;\n      border: 1px solid <<table_border_color>>;\n      padding: 10px 12px;\n      text-align: left;\n      font-weight: bold;\n    }\n    .items-table td {\n      border: 1px solid <<table_border_color>>;\n      padding: 10px 12px;\n      color: <<table_text_color>>;\n      vertical-align: top;\n    }\n    .items-table tr:nth-child(even) {\n      background: <<table_row_alternate_background>>;\n    }\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n      white-space: nowrap;\n    }\n\n    .total-section {\n      margin: 30px 0;\n      background: <<total_background>>;\n      padding: 20px;\n      border-radius: 5px;\n      display: grid;\n      gap: 6px;\n      justify-items: end;\n    }\n    .total-section p {\n      margin: 0;\n      font-size: 16px;\n      color: <<total_text_color>>;\n    }\n    .final-total {\n      font-size: 20px;\n      font-weight: bold;\n      color: <<final_total_color>>;\n      border-top: 2px solid <<primary_color>>;\n      padding-top: 10px;\n      margin-top: 6px;\n    }\n\n    .terms, .sign {\n      background: <<terms_background>>;\n      padding: 15px;\n      border-left: 4px solid <<accent_color>>;\n      margin: 20px 0 0 0;\n      color: <<terms_text_color>>;\n    }\n    .terms h4, .sign h4 {\n      margin: 0 0 10px 0;\n    }\n    .sign .row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    .sig-line {\n      margin-top: 24px;\n      border-top: 1px solid <<table_border_color>>;\n      padding-top: 8px;\n      color: <<table_text_color>>;\n    }\n\n    /* Print: A4/Letter, landscape-friendly, avoid overflow */\n    @media print {\n      @page { size: A4 landscape; margin: 12mm; }\n      body { max-width: none; padding: 0; }\n      .doc { box-shadow: none; border: 1px solid <<border_color>>; }\n      .items-table tr, .items-table td, .items-table th { page-break-inside: avoid; }\n      .total-section, .terms, .sign { page-break-inside: avoid; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"doc\">\n    <div class=\"doc-header\">\n      ORDER DOCUMENT\n      <div class=\"subtitle\"><<order_type>> <!-- e.g., \"Purchase Order\" or \"Sales Order\" --></div>\n    </div>\n\n    <div class=\"company-info\">\n      <div class=\"logo\"><<logo_text>></div>\n      <h2><<company_name>></h2>\n      <p><<company_address>></p>\n      <p><<company_phone>></p>\n      <p><<company_email>></p>\n    </div>\n\n    <!-- MANDATORY + SELECTIVE FIELDS -->\n    <div class=\"order-details\">\n      <div class=\"meta\">\n        <p><strong>Purchase_Order_Number:</strong> <<Purchase_Order_Number>></p>\n        <p><strong>Sales_Order_Number:</strong> <<Sales_Order_Number>></p>\n        <p><strong>Purchase_Order_Date:</strong> <<Purchase_Order_Date>></p>\n        <p><strong>Sales_Order_Date:</strong> <<Sales_Order_Date>></p>\n        <p><strong>Delivery_Date:</strong> <<Delivery_Date>></p>\n        <p><strong>Currency_Unit:</strong> <<Currency_Unit>></p>\n      </div>\n      <div class=\"meta\">\n        <p><strong>Supplier_Number (opt):</strong> <<Supplier_Number>></p>\n        <p><strong>Customer_Number (opt):</strong> <<Customer_Number>></p>\n        <p><strong>Shipping_or_Delivery_Terms (opt):</strong> <<Shipping_or_Delivery_Terms>></p>\n        <p><strong>Payment_Terms (opt):</strong> <<Payment_Terms>></p>\n      </div>\n    </div>\n\n    <!-- PARTIES -->\n    <div class=\"party-cards\">\n      <div class=\"card\">\n        <h3>Supplier</h3>\n        <p><strong>Supplier_Name:</strong> <<Supplier_Name>></p>\n        <p><em>Supplier_Address (opt):</em> <<Supplier_Address>></p>\n      </div>\n      <div class=\"card\">\n        <h3>Customer</h3>\n        <p><strong>Customer_Name:</strong> <<Customer_Name>></p>\n        <p><em>Customer_Address (opt):</em> <<Customer_Address>></p>\n      </div>\n    </div>\n\n    <!-- ITEMS -->\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Product_Description</th>\n          <th>Item_Quantity</th>\n          <th>Unit_of_measurement</th>\n          <th>Currency_Unit</th>\n          <th>Item_Price</th>\n          <th>Line_Item_Amount (opt)</th>\n          <th>Product_Code (opt)</th>\n        </tr>\n      </thead>\n      <tbody>\n        <<order_items>>\n        <!--\n          Example row format for <<order_items>>:\n          <tr>\n            <td><<Product_Description>></td>\n            <td class=\"amount\"><<Item_Quantity>></td>\n            <td><<Unit_of_measurement>></td>\n            <td><<Currency_Unit>></td>\n            <td class=\"amount\"><<Item_Price>></td>\n            <td class=\"amount\"><<Line_Item_Amount>></td>\n            <td><<Product_Code>></td>\n          </tr>\n        -->\n      </tbody>\n    </table>\n\n    <!-- TOTALS -->\n    <div class=\"total-section\">\n      <p><strong>Subtotal (opt):</strong> <<Subtotal>></p>\n      <p><strong>Tax (opt):</strong> <<Tax>></p>\n      <p><strong>Freight_Charges (opt):</strong> <<Freight_Charges>></p>\n      <p><strong>Discount (opt):</strong> <<Discount>></p>\n      <p class=\"final-total\"><strong>Total_Purchase_Order_Value_:</strong> <<Total_Purchase_Order_Value_>></p>\n    </div>\n\n    <!-- TERMS & CONDITIONS (opt) -->\n    <div class=\"terms\">\n      <h4>Terms_and_Conditions</h4>\n      <div><<Terms_and_Conditions>></div>\n    </div>\n\n    <!-- SIGNATURE (opt) -->\n    <div class=\"sign\">\n      <h4>Signature</h4>\n      <div class=\"row\">\n        <div>\n          <div class=\"sig-line\">Authorized Signatory (Supplier)</div>\n          <div>Name: <<Supplier_Signatory_Name>></div>\n          <div>Date: <<Supplier_Sign_Date>></div>\n        </div>\n        <div>\n          <div class=\"sig-line\">Authorized Signatory (Customer)</div>\n          <div>Name: <<Customer_Signatory_Name>></div>\n          <div>Date: <<Customer_Sign_Date>></div>\n        </div>\n      </div>\n      <div style=\"margin-top:10px;\"><<Signature>></div>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "string"
            },
            {
              "id": "d95f3151-b525-4d31-906e-b0594c8421e1",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        10580
      ],
      "id": "65ca6151-28c7-4ab4-8b58-4ce8120cbe09",
      "name": "Order Document"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "={{ Object.keys($binary ?? {}).join(',') }}",
        "fileName": "pdf.zip"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -2440,
        9080
      ],
      "id": "bbe6f53c-cfe3-4a95-8d03-e69273bc29e0",
      "name": "Compression3"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {}
          ]
        },
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2640,
        9080
      ],
      "id": "08237472-acdc-4d98-91de-bf804986c3a6",
      "name": "Aggregate3"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Edit Fields12').first().json.fileid }}",
            "files": "={{ $json.data }}",
            "doc_type": "pdf"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "project_simulation_id",
              "displayName": "project_simulation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "simulation_run_id",
              "displayName": "simulation_run_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "document_data",
              "displayName": "document_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "doc_type",
              "displayName": "doc_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "files",
              "displayName": "files",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2060,
        9080
      ],
      "id": "00f6e2a4-0971-4e6b-b9e5-f7afb2956c0d",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "document_data",
              "condition": "IS NOT NULL"
            },
            {
              "column": "id",
              "value": "={{ $('Edit Fields12').first().json.fileid }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4360,
        9260
      ],
      "id": "26ea2ea5-12f9-4792-a3b4-567dc2ca3941",
      "name": "Initial",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "Files",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1420,
        10800
      ],
      "id": "a5164ee5-044e-4bd1-b860-636841eb8dfa",
      "name": "Split Out5"
    },
    {
      "parameters": {
        "jsCode": "return items.map((item, i) => {\n  if (!item.binary) return item;\n\n  for (const [prop, bin] of Object.entries(item.binary)) {\n    if (!bin) continue;\n\n    // Use the FileName from JSON if present, else fallback\n    let newName = item.json.FileName || `file_${i + 1}`;\n\n    // Sanitize: remove forbidden characters for filesystem\n    newName = newName.replace(/[/\\\\?%*:|\"<>]/g, '-').trim();\n\n    // Apply it\n    bin.fileName = newName;\n    bin.filePath = newName; // useful for Compression node to preserve name inside ZIP\n  }\n\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        10800
      ],
      "id": "d6efacc1-6bce-41d0-b69c-51baa0861da5",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2260,
        9080
      ],
      "id": "fa2743b5-478f-48a5-b79c-9e141173758a",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "path": "get_pdf",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5500,
        9240
      ],
      "id": "236389ba-7e11-4f5e-aa31-f585fdab9f73",
      "name": "Webhook5",
      "webhookId": "f29fb583-53b3-4aa3-a286-955e1c21da05",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20eb691c-d5f4-4270-8dbb-4652177bc419",
              "name": "fileid",
              "value": "={{ $json.query.file_id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5280,
        9240
      ],
      "id": "6d90e6af-76c4-4504-81c9-fd95ad41c9db",
      "name": "Edit Fields12"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.fileid }}"
            }
          ]
        },
        "options": {
          "outputColumns": "={{ [\"files\"] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -5060,
        9240
      ],
      "id": "3fbf976e-2007-4a68-981a-c323bf576d54",
      "name": "Select rows from a table3",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "03ce2801-589f-46d4-93b7-09dcce417d46",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4840,
        9240
      ],
      "id": "cf3da3bb-c150-4c72-8650-e01d4322f6a0",
      "name": "If4"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "files",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4600,
        8840
      ],
      "id": "0e316d22-8059-4383-adff-2c9e5143de7a",
      "name": "Convert to File14"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2220,
        8840
      ],
      "id": "3da00c76-8de5-40a0-a955-1375aa620a19",
      "name": "Respond to Webhook5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "ALTER TABLE project_simulations\nDROP COLUMN cleansimulation;\n\nALTER TABLE project_simulations\nADD COLUMN cleansimulation JSONB;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -5020,
        8960
      ],
      "id": "4a4863b1-2d47-4e13-bf98-cd1c1debc779",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## soft delete project simulation\n\n### example usage\n\ncurl -X POST https://n8n.simthetic.ai/webhook-test/soft-delete \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"id\": 2}'",
        "height": 620,
        "width": 4660,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4820,
        7160
      ],
      "typeVersion": 1,
      "id": "405584e4-1f62-4499-8138-72226139ee01",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "soft-delete",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4580,
        7380
      ],
      "id": "c73a9503-d5e4-4260-bd4f-0ef350da36f2",
      "name": "Webhook7",
      "webhookId": "379f2751-9b14-47c7-b9e4-def40f117cc3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE project_simulations\nSET is_deleted = TRUE, updated_at = NOW()\nWHERE id = $1;",
        "options": {
          "queryReplacement": "={{ $json.body.id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3140,
        7380
      ],
      "id": "e6bbaa63-c9a4-463f-9baf-fc376b1b97a1",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1880,
        7380
      ],
      "id": "6380d3f2-d032-4865-86b0-112d89b2cdc0",
      "name": "Respond to Webhook6"
    },
    {
      "parameters": {
        "path": "1e3d9e08-b858-475b-b721-7a8dab7f74fd",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4860,
        1060
      ],
      "id": "5a7958e7-ca62-40ee-98f2-fba43951c65a",
      "name": "Webhook8",
      "webhookId": "1e3d9e08-b858-475b-b721-7a8dab7f74fd"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The HTML file is Bank Statement. Verify Deposit Total and withdrawl total calculations. Modify and add new results. Dont change any data other than totals and calculations.\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html. \n\nReverify there are no \n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -620,
        8180
      ],
      "id": "d0f01c72-8624-4640-b8d9-41c6c0191220",
      "name": "AI Agent2",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -700,
        8340
      ],
      "id": "68f37553-3765-4e79-a115-86dc28c829e3",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -600,
        8500
      ],
      "id": "326a31e6-0bd9-491a-9b1c-9cc3913f9b5f",
      "name": "AI Agent16",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -660,
        8700
      ],
      "id": "a4e6b4ca-32e8-4242-8de0-75c4c368057b",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -620,
        9440
      ],
      "id": "77ae5fb0-1a71-493b-816d-9f8589ca36cd",
      "name": "AI Agent17",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -680,
        9640
      ],
      "id": "39a730da-cd65-405e-b4b3-ffe235050ce7",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -600,
        8820
      ],
      "id": "20aee4d6-ba4b-4b8d-9542-f2cd99ec28a8",
      "name": "AI Agent18",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -680,
        8980
      ],
      "id": "3ad45f36-0108-4c83-a005-1ad16dbd07a3",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -580,
        9120
      ],
      "id": "7b14d63b-0183-4e38-ad6a-8300b953c427",
      "name": "AI Agent19",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -660,
        9280
      ],
      "id": "57597115-a02c-4a12-a644-68687562acb6",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -620,
        9760
      ],
      "id": "40dfe8c1-bb25-4312-b34b-f6e016f4a39b",
      "name": "AI Agent20",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -700,
        9920
      ],
      "id": "90fb6fe1-adf1-40ef-a8e0-e9f9a6c63757",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -560,
        10000
      ],
      "id": "10dbf0d4-e23b-4aa0-8615-758cf50f26e8",
      "name": "AI Agent21",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -640,
        10160
      ],
      "id": "2e66d24a-fdc1-44f7-adec-39888584e666",
      "name": "Google Gemini Chat Model6",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -620,
        10320
      ],
      "id": "2cb1c987-a444-4c61-977a-11a2893ad34b",
      "name": "AI Agent22",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -700,
        10480
      ],
      "id": "6514931a-d0ce-45c5-9248-db627d4da4b7",
      "name": "Google Gemini Chat Model7",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -600,
        10580
      ],
      "id": "caf25810-d5a0-4b95-9ba2-5e8ef6f3649a",
      "name": "AI Agent23",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -680,
        10740
      ],
      "id": "5738add9-a187-400e-95fd-0edc2df0c8e9",
      "name": "Google Gemini Chat Model8",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only html and no other data. Dont add any ticks or html or ```html\n\nHTML is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only html and no other data. Dont add any ticks or html or ```html.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -760,
        7860
      ],
      "id": "62dcaa58-1983-4d55-926d-e09c81533a99",
      "name": "AI Agent24",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -840,
        8020
      ],
      "id": "a7237024-0f59-495a-ac1b-3fdc8604a92e",
      "name": "Google Gemini Chat Model9",
      "credentials": {
        "googlePalmApi": {
          "id": "T7DClLev3Ec2hOEo",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2580,
        13720
      ],
      "id": "2e7eed80-5c63-47d2-9cf1-71ad9f0218a8",
      "name": "Loop Over Items3",
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "simulations",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1740,
        13820
      ],
      "id": "050261b3-0795-4e9e-bc91-6e7a1965f19d",
      "name": "Split Out7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://34.59.1.191:8000/html-pdf-converter",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "orientation",
              "value": "portrait"
            },
            {
              "name": "fit_to_page",
              "value": "true"
            },
            {
              "name": "filename",
              "value": "={{ $binary.data.fileName.split('.').slice(0, -1).join('.') }}.pdf"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3660,
        15300
      ],
      "id": "95415ad0-f505-4568-88c0-cdfaf2005eb6",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "jsCode": "const item = items[0].json;\n\nconst keys = Object.keys(item);\n\nconst result = [];\n\nkeys.forEach((key) => {\n  result.push({\n    json: {\n      column: key,\n      value: item[key],\n    },\n  });\n});\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1460,
        14160
      ],
      "id": "a2e1b098-8a55-426e-bfff-0d995fca0c6d",
      "name": "Code10"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e4c2e8e-27b7-48a9-b524-5753b45e20e9",
              "name": "column",
              "value": "={{ $json.docType }}",
              "type": "string"
            },
            {
              "id": "3fd4f590-689a-498b-bfcf-c9d350b3b150",
              "name": "value",
              "value": "={{ $json.data }}",
              "type": "object"
            },
            {
              "id": "901707af-fae4-4a06-81e7-dd3dd94ece8b",
              "name": "companyProfile",
              "value": "={{ $('Initial1').item.json.document_data.companyProfile }}",
              "type": "object"
            },
            {
              "id": "67ff2370-0714-4433-8573-cbd8d9a34124",
              "name": "runindex",
              "value": "={{ $runIndex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1240,
        13840
      ],
      "id": "4e36012b-e0b0-405f-acdd-e4fa0d8a8ed1",
      "name": "Edit Fields16"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "wire",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "146344cf-50b7-4cff-959d-0415ebcd83ce"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ad0f8eb7-2b1e-420f-8d5a-caa9a837467a",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "bank",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5db1bd82-c9a4-4126-87f8-6f8af18d1394",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Invoice (Goods)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3fdb2e47-5c26-4020-a180-528ff4f36e3f",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "expenses",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "66b17d40-652b-44d9-85e7-69cea52454d2",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "disbursement",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fc94af0-bbe9-43a8-bd68-f8e1249b4b71",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Invoices (for Services)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d8268b87-f26c-45ba-9a14-f56b82e043a7",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Purchase Contract Snippet",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6312c7b0-5402-4ba2-9329-25471c68ed1c",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Shipping Document (Sending)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "51e5a37c-7a3d-4cfe-be8a-1aa924e893e6",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Shipping Document (Receiving)",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0b5e2650-269b-439e-9072-f50ac59aaca1",
                    "leftValue": "={{ $json.column }}",
                    "rightValue": "Order Document",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -960,
        13700
      ],
      "id": "f82888ed-72df-45f2-aa87-548c7bc56675",
      "name": "Switch3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the json format is stritcly followed from template_json. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only json and no other data. Dont add any ticks or json \n\ntemplate_json:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        280,
        12280
      ],
      "id": "1220369b-98bf-49f3-821e-4ed4b432b378",
      "name": "AI Agent25"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        200,
        12460
      ],
      "id": "f4491781-7e23-46c6-b412-7309874ae1d6",
      "name": "OpenAI Chat Model7",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 10
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3100,
        14120
      ],
      "id": "183a1bf0-a15b-4309-b55f-6d70cb061db3",
      "name": "Merge3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only json and no other data. Dont add any ticks or json \n\ntemplate_json:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only html file, no ticks or ```html"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        340,
        12960
      ],
      "id": "53d84080-6b1b-423a-86e5-67670482e3e2",
      "name": "AI Agent26"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        300,
        13140
      ],
      "id": "32bc8002-83ce-4e3c-8ce4-6339f05bde5c",
      "name": "OpenAI Chat Model16",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only json and no other data. Dont add any ticks or json \n\ntemplate_json:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        340,
        13280
      ],
      "id": "94518795-15c7-48dc-9dbf-c13e3cc2c7f9",
      "name": "AI Agent27"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        240,
        13460
      ],
      "id": "aeb8f687-db04-4e4b-adec-688d653a01f0",
      "name": "OpenAI Chat Model17",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Expense_sub_Ledger_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1440,
        13280
      ],
      "id": "92c87d7d-82f4-4692-bf4f-c9dc90eebfa4",
      "name": "Convert to File18"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only json and no other data. Dont add any ticks or json \n\ntemplate_json:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        280,
        13580
      ],
      "id": "0954e0de-fba0-4ba1-b184-9aba88446f28",
      "name": "AI Agent28"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        220,
        13760
      ],
      "id": "91d275a3-d2aa-48c0-978b-56179bc7b99a",
      "name": "OpenAI Chat Model18",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Disbursment_listing_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1480,
        13580
      ],
      "id": "bf425fc7-d940-40ed-b214-9a43e0ef1384",
      "name": "Convert to File19"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        280,
        13900
      ],
      "id": "dceb9f85-4d48-4edf-b27a-bd1ab98800d4",
      "name": "AI Agent29"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        200,
        14080
      ],
      "id": "3431e946-ce9a-4a36-89f5-6ce2a487497a",
      "name": "OpenAI Chat Model19",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Invoice_Services_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1520,
        13900
      ],
      "id": "1341bc78-3f03-4714-b6e4-5b19472ec9dd",
      "name": "Convert to File20"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        280,
        14220
      ],
      "id": "fa400ee2-0c80-43c5-9a4e-0bb5516396df",
      "name": "AI Agent30"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        200,
        14380
      ],
      "id": "e8f78653-dfe6-4605-a444-390f93eec069",
      "name": "OpenAI Chat Model20",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Purchase_Order_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1600,
        14220
      ],
      "id": "bc517c13-c9ff-4071-ada8-42221817a6a8",
      "name": "Convert to File21"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        300,
        14460
      ],
      "id": "14c23d96-021a-42de-af25-665789a94e76",
      "name": "AI Agent31"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        220,
        14640
      ],
      "id": "a0ce4cba-d20b-41c2-a38a-08555bfc802a",
      "name": "OpenAI Chat Model21",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Shipping_Document_Sending_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1620,
        14460
      ],
      "id": "9b011eaa-6ff9-4db7-8be1-ec2059ab62a3",
      "name": "Convert to File22"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        260,
        14780
      ],
      "id": "45bf7e8a-b8c8-4601-b294-7478d8aacbaa",
      "name": "AI Agent32"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        200,
        14920
      ],
      "id": "6d52c549-48b8-4ca3-b144-c7e268651766",
      "name": "OpenAI Chat Model22",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Shipping_Document_Recieving_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1660,
        14780
      ],
      "id": "1ba1481b-12a0-4c51-bc5d-02d8748b8877",
      "name": "Convert to File23"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create seperate json files based on value provided. Seek the information from data provided, and create json file for each doument mentioned. Ensure no document is missed and the format is stritcly followed from template. Only create documents of present documents and not any other.  Ensure Recipeient name and company name should be present if required. strictly following branding guidelines. strictly use logo_url for logo. Make with light backgroud for printout with pdf.   Currency should be in dollar, so add $ in front of currency. \n\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}\nThe output needs to be only html and no other data. Dont add any ticks or html \n\nTemplates:\n{{ $json.template_json }}\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        260,
        15040
      ],
      "id": "da3a5362-549f-43ef-ab1a-03b37a86e669",
      "name": "AI Agent33"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        15220
      ],
      "id": "f4b8be39-6d0a-45d8-b63c-2696608a7557",
      "name": "OpenAI Chat Model23",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Order_Document_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1700,
        15040
      ],
      "id": "0bfeba84-5eca-4e92-a4ae-adb1dd412874",
      "name": "Convert to File24"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3860,
        15300
      ],
      "id": "9d2175b5-520b-48ed-aced-077ed154c62b",
      "name": "Aggregate6"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.project_simulation_id }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3480,
        13880
      ],
      "id": "f82e423d-46f6-4584-9748-98ddd20b20bc",
      "name": "Select rows from a table5",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "project_simulation_id",
              "field2": "id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3240,
        13720
      ],
      "id": "77afb92c-e8d2-4b2b-815c-12b2881e7f96",
      "name": "Merge4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ce60c50a-df6d-4908-9630-f920aad9c86f",
              "name": "simulations",
              "value": "={{\n  $json.document_data.simulationsResults[0].simulations.processedRuns\n    .map(run => Object.values(run.processedDocuments || {}))\n    .reduce((acc, arr) => acc.concat(...arr), [])\n}}",
              "type": "array"
            },
            {
              "id": "94d0b360-b005-4dac-82e9-4f31fad3d382",
              "name": "company",
              "value": "={{ $json.input_config.stage1.companies[0] }}",
              "type": "object"
            },
            {
              "id": "a6908ae3-3525-4b62-9d64-5b200fed01d7",
              "name": "company_profile",
              "value": "={{ $json.document_data.companyProfile }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3040,
        13840
      ],
      "id": "59df563d-7ae7-48a2-ae73-1c5aa6f8e91c",
      "name": "Edit Fields17",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create values based on Data and Generic Information provided. Seek the information from data provided, and create json. Ensure the output json format is stritcly followed from template_json.  As it is bank statement or any other statement create some fake entries to look real. The data contains a specific transaction with transaction number and details. Dont change the transactions details. Keep it as is and create fake credit and deposit entries around it. Also give them a valid transaction number. Bank name should be present with bank details on top. strictly following branding guidelines. strictly use logo_url for logo under templates. Currency should be in dollar, so add $ in front of currency.\n\nReverify-\n- Recalcultae and verify Deposit total. To calculate Deposit total, add all entries under deposit or credit\n- Recalcultae and verify Withdrawl total. To calculate Withdrawl total, add all entries under withdrawl or debit\n- Rest all other fields should match as is in data\n\nThe output needs to be only json and no other data. Dont add any ticks or html \n\ntemplate_json:\n{{ $json.template_json.toJsonString() }}\n\n\nData:\n{{ $json.value.toJsonString() }}\n\nGeneric information:\n{{ $('Merge4').item.json.input_config.stage1.companies[0].toJsonString() }}\n{{ $json.companyProfile.toJsonString() }}",
        "options": {
          "systemMessage": "create only json file, no ticks or ```json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        320,
        12640
      ],
      "id": "df069345-c03a-46d9-9960-7194d3a6a373",
      "name": "AI Agent34"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        260,
        12820
      ],
      "id": "32132bf7-22c3-4c64-8033-771032fee13b",
      "name": "OpenAI Chat Model24",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"wireTransferSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"styling\": {\n        \"background_color\": \"<<background_color>>\",\n        \"text_color\": \"<<text_color>>\",\n        \"transfer_background\": \"<<transfer_background>>\",\n        \"border_color\": \"<<border_color>>\",\n        \"primary_color\": \"<<primary_color>>\",\n        \"title_background\": \"<<title_background>>\",\n        \"title_text_color\": \"<<title_text_color>>\",\n        \"account_info_background\": \"<<account_info_background>>\",\n        \"detail_border_color\": \"<<detail_border_color>>\",\n        \"details_background\": \"<<details_background>>\",\n        \"accent_color\": \"<<accent_color>>\",\n        \"table_header_background\": \"<<table_header_background>>\",\n        \"table_border_color\": \"<<table_border_color>>\",\n        \"confirmation_background\": \"<<confirmation_background>>\",\n        \"confirmation_border_color\": \"<<confirmation_border_color>>\"\n      },\n      \"logo\": {\n        \"logo_url\": \"<<logo_url>>\",\n        \"logo_width\": \"<<logo_width>>\",\n        \"logo_height\": \"<<logo_height>>\",\n        \"logo_background\": \"<<logo_background>>\",\n        \"logo_text_color\": \"<<logo_text_color>>\",\n        \"logo_text\": \"<<logo_text>>\"\n      },\n      \"bank_info\": {\n        \"bank_name\": \"<<bank_name>>\",\n        \"bank_address\": \"<<bank_address>>\"\n      },\n      \"requestor\": {\n        \"requestor\": \"<<requestor_name>>\",\n        \"requestor_account_number\": \"<<requestor_account_number>>\",\n        \"requestor_routing_number\": \"<<requestor_routing_number>>\",\n        \"requestor_bank_name\": \"<<requestor_bank_name>>\",\n        \"requestor_address\": \"<<requestor_address>>\"\n      },\n      \"recipient\": {\n        \"recipient\": \"<<recipient_name>>\",\n        \"recipient_account_number\": \"<<recipient_account_number>>\",\n        \"recipient_routing_number\": \"<<recipient_routing_number>>\",\n        \"recipient_bank_name\": \"<<recipient_bank_name>>\",\n        \"recipient_address\": \"<<recipient_address>>\"\n      },\n      \"transaction\": {\n        \"transaction_type\": \"<<transaction_type>>\",\n        \"amount\": \"<<amount>>\",\n        \"currency\": \"<<currency>>\",\n        \"wire_date\": \"<<wire_date>>\",\n        \"transaction_number\": \"<<transaction_number>>\",\n        \"memo_reference\": \"<<memo_reference>>\"\n      },\n      \"confirmation\": {\n        \"confirmation_number\": \"<<confirmation_number>>\",\n        \"confirmation_message\": \"<<confirmation_message>>\"\n      },\n      \"footer\": {\n        \"footer_text\": \"<<footer_text>>\"\n      }\n    }\n  }\n}",
              "type": "string"
            },
            {
              "id": "deed7af2-d464-46a0-a5ff-941739da4d01",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        12280
      ],
      "id": "08611579-b6aa-429f-8cb3-4fd4b174c38e",
      "name": "Wire Transfer1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"document_title\": \"Bank Statement\",\n  \"theme\": {\n    \"background\": \"<<background_color>>\",\n    \"text\": \"<<text_color>>\",\n    \"primary\": \"<<primary_color>>\",\n    \"border\": \"<<border_color>>\",\n    \"muted\": \"<<muted_text_color>>\",\n    \"header_text\": \"<<header_text_color>>\",\n    \"table_head\": \"<<table_head_bg>>\",\n    \"table_head_text\": \"<<table_head_text_color>>\",\n    \"row_alt\": \"<<row_alternate_bg>>\",\n    \"statement_bg\": \"<<statement_bg_color>>\",\n    \"account_info_bg\": \"<<account_info_bg_color>>\",\n    \"withdrawal\": \"<<withdrawal_color>>\",\n    \"deposit\": \"<<deposit_color>>\",\n    \"balance\": \"<<balance_color>>\",\n    \"footer_text\": \"<<footer_text_color>>\",\n    \"logo_bg\": \"<<logo_background>>\"\n  },\n  \"bank\": {\n    \"name\": \"<<bank_name>>\",\n    \"address\": \"<<bank_address>>\",\n    \"logo\": {\n      \"url\": \"<<bank_logo_url>>\",\n      \"width\": \"<<logo_width>>\",\n      \"height\": \"<<logo_height>>\",\n      \"text\": \"<<bank_logo_text>>\",\n      \"text_color\": \"<<logo_text_color>>\"\n    }\n  },\n  \"account\": {\n    \"name\": \"<<account_holder_name>>\",\n    \"address\": \"<<account_holder_address>>\",\n    \"number\": \"<<account_number>>\",\n    \"type\": \"<<account_type>>\"\n  },\n  \"statement_period\": {\n    \"from\": \"<<start_date>>\",\n    \"to\": \"<<end_date>>\"\n  },\n  \"summary\": {\n    \"opening_balance\": \"<<opening_balance>>\",\n    \"closing_balance\": \"<<closing_balance>>\",\n    \"deposit_totals\": \"<<deposit_totals>>\",\n    \"withdrawal_totals\": \"<<withdrawal_totals>>\",\n    \"fees_total\": \"<<fees_total>>\",\n    \"interest_earned\": \"<<interest_earned>>\",\n    \"interest_paid\": \"<<interest_paid>>\"\n  },\n  \"transactions\": [\n    {\n      \"date\": \"<<transaction_date>>\",\n      \"transaction_number\": \"<<transaction_id>>\",\n      \"description\": \"<<transaction_description>>\",\n      \"debit_amount\": \"<<debit_amount>>\",\n      \"credit_amount\": \"<<credit_amount>>\",\n      \"fees\": \"<<fees_amount>>\",\n      \"interest\": \"<<interest_amount>>\",\n      \"balance\": \"<<post_transaction_balance>>\",\n      \"is_debit\": \"<<true_or_false>>\",\n      \"is_credit\": \"<<true_or_false>>\"\n    },\n    {\n      \"date\": \"<<transaction_date>>\",\n      \"transaction_number\": \"<<transaction_id>>\",\n      \"description\": \"<<transaction_description>>\",\n      \"debit_amount\": \"<<debit_amount>>\",\n      \"credit_amount\": \"<<credit_amount>>\",\n      \"fees\": \"<<fees_amount>>\",\n      \"interest\": \"<<interest_amount>>\",\n      \"balance\": \"<<post_transaction_balance>>\",\n      \"is_debit\": \"<<true_or_false>>\",\n      \"is_credit\": \"<<true_or_false>>\"\n    }\n    // … add more transaction objects as needed\n  ],\n  \"notes\": {\n    \"alerts\": \"<<alerts_text>>\",\n    \"closure_details\": \"<<closure_details>>\"\n  },\n  \"footer_text\": \"<<footer_text>>\"\n}",
              "type": "object"
            },
            {
              "id": "4cf173b8-2b0e-4333-a7f8-d997418deea0",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        12640
      ],
      "id": "9c9f15a6-d40e-497f-993e-2e313a621c95",
      "name": "Bank_Statement1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"invoice\": {\n    \"document_type\": \"<<document_type>>\",\n    \"logo_url\": \"<<logo_url>>\",\n    \"currency\": \"<<currency>>\",\n    \"company\": {\n      \"name\": \"<<company_name>>\",\n      \"address\": \"<<company_address>>\",\n      \"contact\": \"<<company_contact>>\",\n      \"details\": \"<<company_details>>\"\n    },\n    \"meta\": {\n      \"invoice_number\": \"<<invoice_number>>\",\n      \"invoice_date\": \"<<invoice_date>>\",\n      \"due_date\": \"<<due_date>>\",\n      \"po_number\": \"<<po_number>>\",\n      \"delivery_date\": \"<<delivery_date>>\",\n      \"currency_unit\": \"<<currency_unit>>\",\n      \"shipping_terms\": \"<<shipping_terms>>\",\n      \"payment_terms\": \"<<payment_terms>>\"\n    },\n    \"recipient\": {\n      \"label\": \"<<recipient_label>>\",\n      \"name\": \"<<recipient_name>>\",\n      \"customer_number\": \"<<customer_number>>\",\n      \"account_number\": \"<<account_number>>\",\n      \"address\": \"<<recipient_address>>\"\n    },\n    \"items\": [\n      {\n        \"product_code\": \"<<product_code>>\",\n        \"description\": \"<<item_description>>\",\n        \"uom\": \"<<unit_of_measurement>>\",\n        \"quantity\": \"<<quantity>>\",\n        \"unit_price\": \"<<unit_price>>\",\n        \"line_total\": \"<<line_total>>\"\n      }\n    ],\n    \"totals\": {\n      \"subtotal\": \"<<subtotal>>\",\n      \"discount\": \"<<discount>>\",\n      \"freight_charges\": \"<<freight_charges>>\",\n      \"tax_details\": \"<<tax_details>>\",\n      \"tax_amount\": \"<<tax_amount>>\",\n      \"total_due\": \"<<total_due>>\"\n    },\n    \"notes\": [\n      \"<<note_1>>\",\n      \"<<note_2>>\"\n    ]\n  }\n}",
              "type": "string"
            },
            {
              "id": "3ecc8651-4c0b-4153-a07b-b1643bc30335",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        12960
      ],
      "id": "b11e37fc-f3d6-46b0-8457-69e68e0bf0f0",
      "name": "Invoice(Goods)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"logo_url\": \"<<logo_url>>\",\n  \"company_name\": \"<<company_name>>\",\n  \"company_address\": \"<<company_address>>\",\n  \"company_phone\": \"<<company_phone>>\",\n  \"company_email\": \"<<company_email>>\",\n  \"ledger_id\": \"<<ledger_id>>\",\n  \"entity_name\": \"<<entity_name>>\",\n  \"period_start\": \"<<period_start>>\",\n  \"period_end\": \"<<period_end>>\",\n  \"base_currency\": \"<<base_currency>>\",\n  \"prepared_on\": \"<<prepared_on>>\",\n  \"prepared_by\": \"<<prepared_by>>\",\n  \"approval_status\": \"<<approval_status>>\",\n  \"department_name\": \"<<department_name>>\",\n  \"cost_center_code\": \"<<cost_center_code>>\",\n  \"project_code\": \"<<project_code>>\",\n  \"expense_items\": [\n    {\n      \"txn_date\": \"<<txn_date>>\",\n      \"vendor_payee\": \"<<vendor_payee>>\",\n      \"expense_category\": \"<<expense_category>>\",\n      \"description\": \"<<description>>\",\n      \"gl_account\": \"<<gl_account>>\",\n      \"quantity\": \"<<quantity>>\",\n      \"unit_cost\": \"<<unit_cost>>\",\n      \"tax_amount\": \"<<tax_amount>>\",\n      \"line_total\": \"<<line_total>>\",\n      \"transaction_number\": \"<<transaction_number>>\"\n    }\n  ],\n  \"category_summary\": [\n    {\n      \"category\": \"<<category>>\",\n      \"pre_tax\": \"<<pre_tax>>\",\n      \"tax\": \"<<tax>>\",\n      \"total\": \"<<total>>\"\n    }\n  ],\n  \"tax_summary\": [\n    {\n      \"tax_code\": \"<<tax_code>>\",\n      \"rate\": \"<<rate>>\",\n      \"taxable_amount\": \"<<taxable_amount>>\",\n      \"tax_amount\": \"<<tax_amount>>\"\n    }\n  ],\n  \"account_summary\": [\n    {\n      \"account_number\": \"<<account_number>>\",\n      \"account_name\": \"<<account_name>>\",\n      \"opening_balance\": \"<<opening_balance>>\",\n      \"debits\": \"<<debits>>\",\n      \"credits\": \"<<credits>>\",\n      \"ending_balance\": \"<<ending_balance>>\"\n    }\n  ],\n  \"subtotal_pretax\": \"<<subtotal_pretax>>\",\n  \"total_tax\": \"<<total_tax>>\",\n  \"gross_total\": \"<<gross_total>>\",\n  \"non_reimbursable_total\": \"<<non_reimbursable_total>>\",\n  \"advances_applied\": \"<<advances_applied>>\",\n  \"net_payable\": \"<<net_payable>>\",\n  \"fx_difference\": \"<<fx_difference>>\",\n  \"journal_entries\": [\n    {\n      \"account\": \"<<account>>\",\n      \"description\": \"<<description>>\",\n      \"debit\": \"<<debit>>\",\n      \"credit\": \"<<credit>>\"\n    }\n  ],\n  \"policy_notes\": \"<<policy_notes>>\",\n  \"approval_trail\": [\n    {\n      \"role\": \"<<role>>\",\n      \"name\": \"<<name>>\",\n      \"action\": \"<<action>>\",\n      \"date_time\": \"<<date_time>>\",\n      \"remarks\": \"<<remarks>>\"\n    }\n  ]\n}",
              "type": "string"
            },
            {
              "id": "d9ed6ffd-fd66-467d-b2c1-2df0b603e15a",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        13280
      ],
      "id": "df8df6a2-2c32-4619-a1b2-4dd56b3df382",
      "name": "Expenses Sub-Ledger1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"branding\": {\n    \"logo_url\": \"<<logo_url>>\",\n    \"logo_width\": \"<<logo_width>>\",\n    \"logo_height\": \"<<logo_height>>\",\n    \"font_family\": \"<<font_family>>\",\n    \"primary_color\": \"<<primary_color>>\"\n  },\n  \"colors\": {\n    \"background_color\": \"<<background_color>>\",\n    \"text_color\": \"<<text_color>>\",\n    \"invoice_background\": \"<<invoice_background>>\",\n    \"border_color\": \"<<border_color>>\",\n    \"header_background\": \"<<header_background>>\",\n    \"header_text_color\": \"<<header_text_color>>\",\n    \"company_name_color\": \"<<company_name_color>>\",\n    \"company_details_color\": \"<<company_details_color>>\",\n    \"details_background\": \"<<details_background>>\",\n    \"table_border_color\": \"<<table_border_color>>\",\n    \"table_header_background\": \"<<table_header_background>>\",\n    \"table_header_text_color\": \"<<table_header_text_color>>\",\n    \"table_text_color\": \"<<table_text_color>>\",\n    \"table_row_alternate_background\": \"<<table_row_alternate_background>>\",\n    \"total_background\": \"<<total_background>>\",\n    \"final_total_color\": \"<<final_total_color>>\"\n  },\n  \"company\": {\n    \"name\": \"<<company_name>>\",\n    \"address\": \"<<company_address>>\",\n    \"phone\": \"<<company_phone>>\",\n    \"email\": \"<<company_email>>\"\n  },\n  \"report_info\": {\n    \"start_date\": \"<<report_start_date>>\",\n    \"end_date\": \"<<report_end_date>>\",\n    \"bank_account\": \"<<bank_account>>\",\n    \"prepared_on\": \"<<prepared_on>>\",\n    \"prepared_by\": \"<<prepared_by>>\"\n  },\n  \"disbursements\": [\n    {\n      \"date\": \"<<disbursement_date>>\",\n      \"voucher\": \"<<voucher_number>>\",\n      \"payee\": \"<<payee_name>>\",\n      \"vendor_number\": \"<<vendor_number>>\",\n      \"mode\": \"<<payment_mode>>\",\n      \"instrument\": \"<<instrument_number>>\",\n      \"gl_account\": \"<<gl_account>>\",\n      \"project\": \"<<project_or_cost_center>>\",\n      \"description\": \"<<description>>\",\n      \"gross_amount\": \"<<gross_amount>>\",\n      \"withholding\": \"<<withholding>>\",\n      \"net_paid\": \"<<net_paid>>\",\n      \"status\": \"<<status>>\",\n      \"approved_by\": \"<<approved_by>>\"\n    }\n  ],\n  \"recipient\": {\n    \"name\": \"<<recipient_name>>\",\n    \"company\": \"<<recipient_company>>\"\n  }\n}",
              "type": "string"
            },
            {
              "id": "ee7794c6-872b-4558-8bef-a67f3c3c5acc",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        13580
      ],
      "id": "16d68321-7909-4187-a7f3-ffd5d48c85e5",
      "name": "Disbursement Listing1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"document_type\": \"<<document_type>>\",\n  \"currency_symbol\": \"<<currency_symbol>>\",\n  \"branding\": {\n    \"logo_url\": \"<<logo_url>>\"\n  },\n  \"theme\": {\n    \"primary_color\": \"<<primary_color>>\",\n    \"secondary_color\": \"<<secondary_color>>\",\n    \"accent_color\": \"<<accent_color>>\",\n    \"background_color\": \"<<background_color>>\",\n    \"text_color\": \"<<text_color>>\"\n  },\n  \"invoice\": {\n    \"header\": {\n      \"invoice_number\": \"<<invoice_number>>\",\n      \"invoice_date\": \"<<invoice_date>>\",\n      \"due_date\": \"<<due_date>>\",\n      \"po_number\": \"<<po_number>>\",\n      \"so_or_wo_number\": \"<<so_or_wo_number>>\",\n      \"delivery_or_completion_date\": \"<<delivery_or_completion_date>>\",\n      \"currency_unit\": \"<<currency_unit>>\",\n      \"shipping_or_delivery_terms\": \"<<shipping_or_delivery_terms>>\",\n      \"transfer_of_rights_indication\": \"<<transfer_of_rights_indication>>\",\n      \"payment_terms\": \"<<payment_terms>>\"\n    },\n    \"supplier\": {\n      \"supplier_name\": \"<<supplier_name>>\",\n      \"supplier_number\": \"<<supplier_number>>\",\n      \"supplier_address\": \"<<supplier_address>>\",\n      \"supplier_email\": \"<<supplier_email>>\",\n      \"supplier_phone\": \"<<supplier_phone>>\"\n    },\n    \"customer\": {\n      \"customer_name\": \"<<customer_name>>\",\n      \"customer_number\": \"<<customer_number>>\",\n      \"customer_account_number\": \"<<customer_account_number>>\",\n      \"customer_address\": \"<<customer_address>>\",\n      \"customer_email\": \"<<customer_email>>\",\n      \"customer_phone\": \"<<customer_phone>>\"\n    },\n    \"items\": [\n      {\n        \"product_code\": \"<<product_code>>\",\n        \"description\": \"<<item_description>>\",\n        \"uom\": \"<<unit_of_measure>>\",\n        \"quantity\": \"<<quantity>>\",\n        \"unit_price\": \"<<unit_price>>\",\n        \"line_total\": \"<<line_total>>\"\n      }\n    ],\n    \"totals\": {\n      \"subtotal\": \"<<subtotal>>\",\n      \"discount\": \"<<discount>>\",\n      \"freight_charges\": \"<<freight_charges>>\",\n      \"selling_costs\": \"<<selling_costs>>\",\n      \"tax_details\": \"<<tax_details>>\",\n      \"tax_amount\": \"<<tax_amount>>\",\n      \"total_amount_due\": \"<<total_amount_due>>\"\n    }\n  },\n  \"notes\": \"<<notes>>\",\n  \"footer\": \"<<footer>>\"\n}",
              "type": "string"
            },
            {
              "id": "94213780-385c-42e9-83d3-592efce6b80e",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        13900
      ],
      "id": "30c1e5be-5b00-43b8-9656-429b27c66b42",
      "name": "invoices_services1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"branding\": {\n    \"logo_url\": \"<<logo_url>>\",\n    \"font_family\": \"<<font_family>>\",\n    \"document_style\": \"<<document_style>>\"\n  },\n  \"colors\": {\n    \"primary_color\": \"<<primary_color>>\",\n    \"secondary_color\": \"<<secondary_color>>\"\n  },\n  \"company\": {\n    \"company_name\": \"<<company_name>>\",\n    \"department_name\": \"<<department_name>>\",\n    \"company_address\": \"<<company_address>>\"\n  },\n  \"vendor\": {\n    \"vendor_name\": \"<<vendor_name>>\",\n    \"vendor_address\": \"<<vendor_address>>\",\n    \"vendor_email\": \"<<vendor_email>>\"\n  },\n  \"data\": {\n    \"amount\": \"<<amount>>\",\n    \"source\": \"<<source>>\",\n    \"file_type\": \"<<file_type>>\",\n    \"service_dates\": \"<<service_dates>>\",\n    \"transaction_id\": \"<<transaction_id>>\"\n  }\n}",
              "type": "string"
            },
            {
              "id": "58dad027-559c-4f79-bd02-31aa0478746a",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        14220
      ],
      "id": "04787f00-28b7-45bb-957f-4801d04e3c50",
      "name": "Purchase Order1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"document\": {\n    \"type\": \"<<document_type>>\",\n    \"template\": \"<<template_name>>\"\n  },\n  \"branding\": {\n    \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-3.svg\",\n    \"font_family\": \"Inter\",\n    \"document_style\": \"formal\"\n  },\n  \"colors\": {\n    \"primary_color\": \"#334155\",\n    \"secondary_color\": \"#0F172A\"\n  },\n  \"company_info\": {\n    \"company_name\": \"<<company_name>>\",\n    \"company_address\": \"<<company_address>>\",\n    \"company_phone\": \"<<company_phone>>\",\n    \"company_email\": \"<<company_email>>\"\n  },\n  \"document_details\": {\n    \"shipping_document_number\": \"<<shipping_document_number>>\",\n    \"shipping_doc_date\": \"<<shipping_doc_date>>\",\n    \"purchase_order_number\": \"<<purchase_order_number>>\",\n    \"sales_order_number\": \"<<sales_order_number>>\",\n    \"date_shipped\": \"<<date_shipped>>\",\n    \"shipping_carrier\": \"<<shipping_carrier>>\",\n    \"shipping_method\": \"<<shipping_method>>\",\n    \"tracking_number\": \"<<tracking_number>>\",\n    \"customer_number\": \"<<customer_number>>\",\n    \"supplier_number\": \"<<supplier_number>>\",\n    \"date_delivered\": \"<<date_delivered>>\",\n    \"received_date\": \"<<received_date>>\"\n  },\n  \"parties\": {\n    \"customer\": {\n      \"customer_name\": \"<<customer_name>>\",\n      \"customer_address\": \"<<customer_address>>\",\n      \"consignee_name_and_address\": \"<<consignee_name_and_address>>\"\n    },\n    \"supplier\": {\n      \"supplier_name\": \"<<supplier_name>>\",\n      \"supplier_address\": \"<<supplier_address>>\",\n      \"shipper_name_and_address\": \"<<shipper_name_and_address>>\"\n    }\n  },\n  \"line_items\": [\n    {\n      \"product_description\": \"<<product_description>>\",\n      \"product_code\": \"<<product_code>>\",\n      \"unit_of_measurement\": \"<<unit_of_measurement>>\",\n      \"item_quantity\": \"<<item_quantity>>\",\n      \"item_price\": \"<<item_price>>\",\n      \"line_item_amount\": \"<<line_item_amount>>\"\n    }\n  ],\n  \"logistics\": {\n    \"bill_of_lading_number\": \"<<bill_of_lading_number>>\",\n    \"packaging_details\": \"<<packaging_details>>\",\n    \"insurance_details\": \"<<insurance_details>>\",\n    \"customs_information\": \"<<customs_information>>\",\n    \"proof_of_delivery\": \"<<proof_of_delivery>>\",\n    \"shipping_or_delivery_terms\": \"<<shipping_or_delivery_terms>>\"\n  },\n  \"signatures\": {\n    \"prepared_by\": \"<<prepared_by>>\",\n    \"carrier_signature\": \"<<carrier_signature>>\",\n    \"received_by\": \"<<received_by>>\"\n  }\n}",
              "type": "string"
            },
            {
              "id": "eccee5da-3b59-4a05-962c-551f42e9a543",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        14460
      ],
      "id": "de122873-91e9-4b97-ade6-338ff481329d",
      "name": "Shipping Document (Sending)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"branding\": {\n    \"logo_url\": \"<<logo_url>>\",\n    \"font_family\": \"<<font_family>>\",\n    \"document_style\": \"<<document_style>>\"\n  },\n  \"colors\": {\n    \"primary_color\": \"<<primary_color>>\",\n    \"secondary_color\": \"<<secondary_color>>\"\n  },\n  \"company_info\": {\n    \"company_name\": \"<<company_name>>\",\n    \"company_address\": \"<<company_address>>\",\n    \"company_phone\": \"<<company_phone>>\",\n    \"company_email\": \"<<company_email>>\"\n  },\n  \"document_info\": {\n    \"shipping_document_number\": \"<<shipping_document_number>>\",\n    \"shipping_doc_date\": \"<<shipping_doc_date>>\",\n    \"purchase_order_number\": \"<<purchase_order_number>>\",\n    \"sales_order_number\": \"<<sales_order_number>>\",\n    \"shipping_carrier\": \"<<shipping_carrier>>\",\n    \"shipping_method\": \"<<shipping_method>>\",\n    \"tracking_number\": \"<<tracking_number>>\",\n    \"date_shipped\": \"<<date_shipped>>\",\n    \"date_delivered\": \"<<date_delivered>>\",\n    \"received_date\": \"<<received_date>>\",\n    \"proof_of_delivery\": \"<<proof_of_delivery>>\",\n    \"bill_of_lading_number\": \"<<bill_of_lading_number>>\",\n    \"customer_number\": \"<<customer_number>>\",\n    \"supplier_number\": \"<<supplier_number>>\"\n  },\n  \"parties\": {\n    \"customer_name\": \"<<customer_name>>\",\n    \"customer_address\": \"<<customer_address>>\",\n    \"consignee_name_and_address\": \"<<consignee_name_and_address>>\",\n    \"supplier_name\": \"<<supplier_name>>\",\n    \"supplier_address\": \"<<supplier_address>>\",\n    \"shipper_name_and_address\": \"<<shipper_name_and_address>>\"\n  },\n  \"receiving_items\": [\n    {\n      \"product_description\": \"<<product_description>>\",\n      \"product_code\": \"<<product_code>>\",\n      \"unit_of_measurement\": \"<<unit_of_measurement>>\",\n      \"qty_shipped\": \"<<qty_shipped>>\",\n      \"qty_received\": \"<<qty_received>>\",\n      \"damaged_qty\": \"<<damaged_qty>>\",\n      \"short_over\": \"<<short_over>>\",\n      \"remarks\": \"<<remarks>>\"\n    }\n  ],\n  \"receiving_amounts\": [\n    {\n      \"currency\": \"<<currency>>\",\n      \"unit_price\": \"<<unit_price>>\",\n      \"line_amount\": \"<<line_amount>>\",\n      \"pricing_notes\": \"<<pricing_notes>>\"\n    }\n  ],\n  \"additional_info\": {\n    \"packaging_details\": \"<<packaging_details>>\",\n    \"insurance_details\": \"<<insurance_details>>\",\n    \"customs_information\": \"<<customs_information>>\",\n    \"shipping_or_delivery_terms\": \"<<shipping_or_delivery_terms>>\",\n    \"receiving_inspection_status\": \"<<receiving_inspection_status>>\",\n    \"receiving_discrepancy_summary\": \"<<receiving_discrepancy_summary>>\",\n    \"receiving_condition_notes\": \"<<receiving_condition_notes>>\",\n    \"receiving_additional_notes\": \"<<receiving_additional_notes>>\"\n  },\n  \"signatures\": {\n    \"received_by\": \"<<received_by>>\",\n    \"inspected_by\": \"<<inspected_by>>\",\n    \"carrier_signature\": \"<<carrier_signature>>\"\n  }\n}",
              "type": "string"
            },
            {
              "id": "1ce2eeb7-6c01-47e2-a216-c11feb020951",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        14780
      ],
      "id": "30d979c2-43f0-4137-a8bd-8fe4a8da27af",
      "name": "Shipping Document (Receiving)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7668adf6-3027-4ba8-9c86-6b7077814236",
              "name": "column",
              "value": "={{ $json.column }}",
              "type": "string"
            },
            {
              "id": "82f6813f-0a51-47a5-9477-b7f112be74c5",
              "name": "value",
              "value": "={{ $json.value }}",
              "type": "object"
            },
            {
              "id": "9858b188-50e8-47a1-8fac-858f6f2e8a53",
              "name": "companyProfile",
              "value": "={{ $json.companyProfile }}",
              "type": "object"
            },
            {
              "id": "c0c77da2-eccf-4a4c-b18e-476577b3ed73",
              "name": "template_json",
              "value": "={\n  \"branding\": {\n    \"logo_url\": \"<<logo_url>>\",\n    \"font_family\": \"<<font_family>>\",\n    \"document_style\": \"<<document_style>>\"\n  },\n  \"colors\": {\n    \"primary_color\": \"<<primary_color>>\",\n    \"secondary_color\": \"<<secondary_color>>\"\n  },\n  \"company\": {\n    \"company_name\": \"<<company_name>>\",\n    \"company_address\": \"<<company_address>>\",\n    \"company_phone\": \"<<company_phone>>\",\n    \"company_email\": \"<<company_email>>\"\n  },\n  \"purchase_order\": {\n    \"purchase_order_number\": \"<<purchase_order_number>>\",\n    \"purchase_order_date\": \"<<purchase_order_date>>\",\n    \"sales_order_number\": \"<<sales_order_number>>\",\n    \"sales_order_date\": \"<<sales_order_date>>\",\n    \"delivery_date\": \"<<delivery_date>>\",\n    \"currency_unit\": \"<<currency_unit>>\",\n    \"supplier_number\": \"<<supplier_number>>\",\n    \"customer_number\": \"<<customer_number>>\",\n    \"shipping_terms\": \"<<shipping_terms>>\",\n    \"payment_terms\": \"<<payment_terms>>\"\n  },\n  \"supplier\": {\n    \"supplier_name\": \"<<supplier_name>>\",\n    \"supplier_address\": \"<<supplier_address>>\"\n  },\n  \"customer\": {\n    \"customer_name\": \"<<customer_name>>\",\n    \"customer_address\": \"<<customer_address>>\"\n  },\n  \"items\": [\n    {\n      \"description\": \"<<item_description>>\",\n      \"quantity\": \"<<quantity>>\",\n      \"unit_of_measure\": \"<<unit_of_measure>>\",\n      \"unit_price\": \"<<unit_price>>\",\n      \"line_total\": \"<<line_total>>\",\n      \"product_code\": \"<<product_code>>\"\n    }\n  ],\n  \"totals\": {\n    \"subtotal\": \"<<subtotal>>\",\n    \"tax\": \"<<tax>>\",\n    \"freight_charges\": \"<<freight_charges>>\",\n    \"discount\": \"<<discount>>\",\n    \"total_value\": \"<<total_value>>\"\n  },\n  \"terms_conditions\": \"<<terms_conditions>>\",\n  \"signatures\": {\n    \"supplier_signatory_name\": \"<<supplier_signatory_name>>\",\n    \"supplier_sign_date\": \"<<supplier_sign_date>>\",\n    \"customer_signatory_name\": \"<<customer_signatory_name>>\",\n    \"customer_sign_date\": \"<<customer_sign_date>>\"\n  }\n}",
              "type": "string"
            },
            {
              "id": "d95f3151-b525-4d31-906e-b0594c8421e1",
              "name": "runindex",
              "value": "={{ $json.runindex }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        15040
      ],
      "id": "cd68db17-9242-4b46-9cbb-582ad1df82ef",
      "name": "Order Document1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Edit Fields18').first().json.fileid }}",
            "files": "={{ $json.data[1] }}",
            "doc_type": "pdf",
            "cleanpdffiles": "={{ $json.data[0] }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "project_simulation_id",
              "displayName": "project_simulation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "simulation_run_id",
              "displayName": "simulation_run_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "document_data",
              "displayName": "document_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "doc_type",
              "displayName": "doc_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "files",
              "displayName": "files",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cleanpdffiles",
              "displayName": "cleanpdffiles",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "cleansimulation",
              "displayName": "cleansimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1400,
        13580
      ],
      "id": "691fc20f-55cd-4520-b3b6-7d89197c18af",
      "name": "Update rows in a table1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "document_data",
              "condition": "IS NOT NULL"
            },
            {
              "column": "id",
              "value": "={{ $('Edit Fields18').first().json.fileid }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3720,
        13720
      ],
      "id": "095667fa-8dbb-463b-925b-ecfdd39a3734",
      "name": "Initial1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1840,
        13580
      ],
      "id": "a3350717-5afb-47d7-a779-11bd8e4345d0",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "path": "get_pdf",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5040,
        13500
      ],
      "id": "52c35663-52f5-47e4-8dc4-bed21c101e05",
      "name": "Webhook6",
      "webhookId": "f29fb583-53b3-4aa3-a286-955e1c21da05"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20eb691c-d5f4-4270-8dbb-4652177bc419",
              "name": "fileid",
              "value": "={{ $json.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4800,
        13700
      ],
      "id": "e5816186-ecf3-4e6c-9a53-d41af358a148",
      "name": "Edit Fields18"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 10,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.fileid }}"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "files",
            "cleanpdffiles",
            "file_name"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4580,
        13700
      ],
      "id": "df7fe01a-05bc-4042-96f2-dcaac96cc940",
      "name": "Select rows from a table6",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "03ce2801-589f-46d4-93b7-09dcce417d46",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "d2c6b351-7769-4a81-ab16-9b535b06ae33",
              "leftValue": "={{ $json.cleanpdffiles }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4360,
        13700
      ],
      "id": "2ed5eb85-2d00-48ea-8c7b-b77e889320c8",
      "name": "If5"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "files",
        "options": {
          "fileName": "={{ $json.file_name+'.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3800,
        13180
      ],
      "id": "44a79b01-106d-46fc-80b5-a10bf9980018",
      "name": "Convert to File25"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1480,
        13220
      ],
      "id": "30fa72fc-58c1-4cb5-afe1-3e5f0ee985fe",
      "name": "Respond to Webhook7"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "ALTER TABLE project_simulations\nDROP COLUMN cleansimulation;\n\nALTER TABLE project_simulations\nADD COLUMN cleansimulation JSONB;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -5100,
        13040
      ],
      "id": "b911d32a-31c5-4412-b0a0-a7aeefaaba6b",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The json file is Bank Statement. Verify Deposit Total and withdrawl total calculations. Modify and add new results. Dont change any data other than totals and calculations. Dont change json format, only modify values.\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json. \n\nReverify there are no errors\n\njson is :\n{{ $json.output }}\n\n",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Do not add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        680,
        12640
      ],
      "id": "bbc19e02-e3d7-4e13-aaf6-e06cc5e80c7a",
      "name": "AI Agent35"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        600,
        12800
      ],
      "id": "8694edd7-8267-4d7c-ad39-f9587de760de",
      "name": "Google Gemini Chat Model10",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        700,
        12960
      ],
      "id": "2e3d2840-4799-4730-b957-7fa011b2dd5a",
      "name": "AI Agent36"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        640,
        13160
      ],
      "id": "d10d3e97-02e7-45fa-a60d-554fc8a37986",
      "name": "Google Gemini Chat Model11",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        680,
        13900
      ],
      "id": "bd02785a-9c09-40b7-b6bf-2e59b3799a8a",
      "name": "AI Agent37"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        620,
        14100
      ],
      "id": "9a9a442b-9a71-423b-ae82-336cf3e09e42",
      "name": "Google Gemini Chat Model12",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        700,
        13280
      ],
      "id": "40347164-3f53-4b8c-8083-4d35506ac8dd",
      "name": "AI Agent38"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        620,
        13440
      ],
      "id": "d2ba927d-3ada-4aba-b136-c12c367111f8",
      "name": "Google Gemini Chat Model13",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        720,
        13580
      ],
      "id": "4cd76747-5e12-4289-91e1-ccbed0be68a1",
      "name": "AI Agent39"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        640,
        13740
      ],
      "id": "ddcb1e6b-44c7-443e-b58c-b92493a63b68",
      "name": "Google Gemini Chat Model14",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        680,
        14220
      ],
      "id": "5702dcbd-eb5f-4946-9f08-38facdc9a5f0",
      "name": "AI Agent40"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        600,
        14380
      ],
      "id": "146f220d-2f14-4624-9ecc-44f965212576",
      "name": "Google Gemini Chat Model15",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        740,
        14460
      ],
      "id": "af4c6f51-2ae2-4c98-8d13-dd030f9bc442",
      "name": "AI Agent41"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        660,
        14620
      ],
      "id": "b875858c-29ec-4057-bac6-5f9ed9a24d8a",
      "name": "Google Gemini Chat Model16",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        680,
        14780
      ],
      "id": "dd7a3fe6-4bf4-4c32-aea0-0ea4e1ab3c57",
      "name": "AI Agent42"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        600,
        14940
      ],
      "id": "f377517b-dad5-4283-9d58-18394a069f6a",
      "name": "Google Gemini Chat Model17",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add calcuation if wrong. Dont change anything else or modify structure\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        700,
        15040
      ],
      "id": "36106351-e550-4afc-8ef5-587b21f25ae9",
      "name": "AI Agent43"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        620,
        15200
      ],
      "id": "96eb2b69-d89d-4585-a1d2-7479952eca0e",
      "name": "Google Gemini Chat Model18",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Verify all calcuation  and totals.  Modify and add new results. Dont change anything else\n\nThe output needs to be only json and no other data. Dont add any ticks or json or ```json\n\njson is :\n{{ $json.output }}",
        "options": {
          "systemMessage": "The output needs to be only json and no other data. Dont add any ticks or json or ```json.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        600,
        12280
      ],
      "id": "413c9de4-5fe3-4b26-9be3-d5e0d841f77f",
      "name": "AI Agent44",
      "disabled": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        520,
        12440
      ],
      "id": "9dedba52-2221-4df8-8a4c-24ffbf8bcc38",
      "name": "Google Gemini Chat Model19",
      "credentials": {
        "googlePalmApi": {
          "id": "c28F1j8I35UhbEla",
          "name": "Marisa:Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Bank Statement Generator</title>\n</head>\n<body>\n  <div id=\"statement-container\"></div>\n\n  <script>\n    // JSON DATA VARIABLE - Replace this with your actual data\n    const STATEMENT_DATA = {{ $json.formattedResponse.toJsonString() }};\n\n    // Function to generate transaction rows\n    function generateTransactionRows(transactions) {\n      return transactions.map(transaction => {\n        const debitClass = transaction.is_debit ? ' withdrawal' : '';\n        const creditClass = transaction.is_credit ? ' deposit' : '';\n        const debitAmount = transaction.is_debit ? transaction.debit_amount : '';\n        const creditAmount = transaction.is_credit ? transaction.credit_amount : '';\n        \n        return `\n        <tr>\n          <td>${transaction.date}</td>\n          <td>${transaction.transaction_number}</td>\n          <td>${transaction.description}</td>\n          <td class=\"amount${debitClass}\">${debitAmount}</td>\n          <td class=\"amount${creditClass}\">${creditAmount}</td>\n          <td class=\"amount\">${transaction.fees}</td>\n          <td class=\"amount\">${transaction.interest}</td>\n          <td class=\"amount balance\">${transaction.balance}</td>\n        </tr>`;\n      }).join('');\n    }\n\n    // Function to generate complete HTML\n    function generateBankStatement(data) {\n      const transactionRows = generateTransactionRows(data.transactions);\n      \n      return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>${data.document_title}</title>\n  <style>\n    :root{\n      --background: ${data.theme.background};\n      --text: ${data.theme.text};\n      --primary: ${data.theme.primary};\n      --border: ${data.theme.border};\n      --muted: ${data.theme.muted};\n      --header-text: ${data.theme.header_text};\n      --table-head: ${data.theme.table_head};\n      --table-head-text: ${data.theme.table_head_text};\n      --row-alt: ${data.theme.row_alt};\n      --statement-bg: ${data.theme.statement_bg};\n      --account-info-bg: ${data.theme.account_info_bg};\n      --withdrawal: ${data.theme.withdrawal};\n      --deposit: ${data.theme.deposit};\n      --balance: ${data.theme.balance};\n      --footer-text: ${data.theme.footer_text};\n      --logo-bg: ${data.theme.logo_bg};\n    }\n\n    body{ font-family: Arial, sans-serif; max-width: 900px; margin:0 auto; padding:20px; background:var(--background); color:var(--text); }\n    .statement{ background:var(--statement-bg); padding:30px; border:1px solid var(--border); box-shadow:0 2px 5px rgba(0,0,0,.1); }\n\n    .header{ display:flex; align-items:center; margin-bottom:24px; border-bottom:2px solid var(--primary); padding-bottom:16px; }\n    .logo{ width: ${data.bank.logo.width}px; height: ${data.bank.logo.height}px; background:var(--logo-bg); border-radius:6px; margin-right:16px; display:flex; align-items:center; justify-content:center; color:${data.bank.logo.text_color}; font-weight:bold;\n      background-image:url('${data.bank.logo.url}'); background-size:cover; background-position:center; }\n    .bank-info h1{ margin:0; font-size:24px; color:var(--header-text); }\n    .bank-info p{ margin:6px 0 0; color:var(--muted); font-size:13px; }\n\n    .account-info{ display:flex; justify-content:space-between; gap:16px; margin:18px 0; background:var(--account-info-bg); padding:14px; border-radius:6px; }\n    .account-details h3{ margin:0 0 8px; color:var(--header-text);}\n    .account-details p{ margin:4px 0; }\n    .statement-period{ text-align:right; font-size:14px; }\n    .statement-period p{ margin:4px 0; }\n\n    .summary{ display:grid; grid-template-columns: repeat(2,1fr); gap:12px; border:1px solid var(--border); border-radius:6px; padding:12px; margin:18px 0 6px; }\n    .summary h4{ grid-column:1/-1; margin:0 0 8px; color:var(--header-text);}\n    .kv{ display:flex; justify-content:space-between; border-bottom:1px dashed var(--border); padding:6px 0; }\n    .kv:last-child{ border-bottom:none; }\n\n    .transactions-table{ width:100%; border-collapse:collapse; margin:18px 0; font-size:14px; }\n    .transactions-table th{ background:var(--table-head); color:var(--table-head-text); border:1px solid var(--border); padding:10px; text-align:left; }\n    .transactions-table td{ border:1px solid var(--border); padding:10px; vertical-align:top; }\n    .transactions-table tr:nth-child(even){ background:var(--row-alt); }\n    .amount{ text-align:right; font-family:monospace; }\n    .withdrawal{ color:var(--withdrawal); }\n    .deposit{ color:var(--deposit); }\n    .balance{ font-weight:bold; color:var(--balance); }\n\n    .notes{ margin-top:16px; padding:12px; border:1px solid var(--border); border-radius:6px; }\n    .notes h4{ margin:0 0 8px; color:var(--header-text); }\n\n    .footer{ margin-top:24px; padding-top:12px; border-top:1px solid var(--border); color:var(--footer-text); font-size:12px; }\n  </style>\n</head>\n<body>\n  <div class=\"statement\">\n\n    <!-- HEADER -->\n    <div class=\"header\">\n      <div class=\"logo\">${data.bank.logo.text}</div>\n      <div class=\"bank-info\">\n        <h1>${data.bank.name}</h1>\n        <p>${data.bank.address}</p>\n      </div>\n    </div>\n\n    <!-- ACCOUNT + PERIOD -->\n    <div class=\"account-info\">\n      <div class=\"account-details\">\n        <h3>${data.account.name}</h3>\n        <p>${data.account.address}</p>\n        <p><strong>Account Number:</strong> ${data.account.number}</p>\n        <p><strong>Account Type:</strong> ${data.account.type}</p>\n      </div>\n      <div class=\"statement-period\">\n        <p><strong>Statement Period:</strong></p>\n        <p><strong>${data.statement_period.from} through ${data.statement_period.to}</strong></p>\n      </div>\n    </div>\n\n    <!-- SUMMARY -->\n    <div class=\"summary\">\n      <h4>Statement Summary</h4>\n      <div class=\"kv\"><span>Opening / Beginning / Previous Balance</span><span class=\"amount\">${data.summary.opening_balance}</span></div>\n      <div class=\"kv\"><span>Closing / Ending Balance</span><span class=\"amount balance\">${data.summary.closing_balance}</span></div>\n      <div class=\"kv\"><span>Deposit / Credit Totals</span><span class=\"amount deposit\">${data.summary.deposit_totals}</span></div>\n      <div class=\"kv\"><span>Withdrawal / Debit Totals</span><span class=\"amount withdrawal\">${data.summary.withdrawal_totals}</span></div>\n      <div class=\"kv\"><span>Fees Charged (Total)</span><span class=\"amount\">${data.summary.fees_total}</span></div>\n      <div class=\"kv\"><span>Interest Earned (Total)</span><span class=\"amount\">${data.summary.interest_earned}</span></div>\n      <div class=\"kv\"><span>Interest Paid (Total)</span><span class=\"amount\">${data.summary.interest_paid}</span></div>\n    </div>\n\n    <!-- TRANSACTIONS -->\n    <table class=\"transactions-table\">\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Transaction No.</th>\n          <th>Description</th>\n          <th>Debit</th>\n          <th>Credit</th>\n          <th>Fees</th>\n          <th>Interest</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        ${transactionRows}\n      </tbody>\n    </table>\n\n    <!-- NOTES -->\n    <div class=\"notes\">\n      <h4>Account Alerts</h4>\n      <p>${data.notes.alerts}</p>\n      <h4>Account Closure Details</h4>\n      <p>${data.notes.closure_details}</p>\n    </div>\n\n    <div class=\"footer\">\n      <p>${data.footer_text}</p>\n    </div>\n  </div>\n</body>\n</html>`;\n    }\n\n    // Generate and display the bank statement\n    function renderStatement() {\n      const container = document.getElementById('statement-container');\n      const generatedHTML = generateBankStatement(STATEMENT_DATA);\n      \n      // Replace current document with generated HTML\n      document.open();\n      document.write(generatedHTML);\n      document.close();\n    }\n\n    // Generate statement when page loads\n    document.addEventListener('DOMContentLoaded', renderStatement);\n\n    // Also provide functions for external use\n    window.generateBankStatementHTML = generateBankStatement;\n    window.downloadStatement = function() {\n      const html = generateBankStatement(STATEMENT_DATA);\n      const blob = new Blob([html], { type: 'text/html' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'bank_statement.html';\n      a.click();\n      URL.revokeObjectURL(url);\n    };\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1260,
        12640
      ],
      "id": "e0d3fc5b-2f81-45b0-805c-3de2b08cfe04",
      "name": "Edit Fields19"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Bank_statement_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1480,
        12640
      ],
      "id": "ce684f70-9d05-42e5-aa75-f983dfe728c1",
      "name": "Convert to File3"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        12640
      ],
      "id": "fc07cec4-07e0-4b14-a19a-e2f854bc8b4f",
      "name": "Code12",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Wire Transfer</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: #f9fafb;\n      color: #1e293b;\n    }\n    .wire-transfer {\n      background: #ffffff;\n      border: 1px solid #cbd5e1;\n      padding: 30px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      border-radius: 8px;\n    }\n    .header {\n      display: flex;\n      align-items: center;\n      margin-bottom: 30px;\n      border-bottom: 2px solid #334155;\n      padding-bottom: 20px;\n      gap: 15px;\n    }\n    .logo {\n      width: 80px;\n      height: 40px;\n      background: #f1f5f9;\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #334155;\n      font-weight: bold;\n      background-size: cover;\n      background-position: center;\n      flex: 0 0 auto;\n    }\n    .bank-info h1 {\n      margin: 0;\n      font-size: 24px;\n      color: #0f172a;\n    }\n    .bank-info p {\n      margin: 5px 0 0 0;\n      color: #64748b;\n      font-size: 14px;\n    }\n    .transfer-title {\n      text-align: center;\n      background: #334155;\n      color: #ffffff;\n      padding: 15px;\n      margin: 20px 0;\n      border-radius: 5px;\n      font-size: 22px;\n      font-weight: bold;\n      letter-spacing: 1px;\n    }\n\n    .parties {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      margin: 20px 0;\n    }\n    .panel {\n      background: #f8fafc;\n      padding: 16px;\n      border-radius: 8px;\n      border: 1px solid #e2e8f0;\n    }\n    .panel h3 {\n      margin: 0 0 12px 0;\n      color: #0f172a;\n      font-size: 16px;\n    }\n    .row {\n      display: flex;\n      justify-content: space-between;\n      gap: 16px;\n      padding: 6px 0;\n      border-bottom: 1px dotted #e2e8f0;\n    }\n    .row:last-child { border-bottom: none; }\n    .label { font-weight: bold; color: #374151; }\n    .value { color: #1f2937; font-family: monospace; }\n\n    .transfer-details {\n      background: #f8fafc;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 20px 0;\n      border-left: 4px solid #3b82f6;\n    }\n    .transfer-details h3 {\n      margin: 0 0 12px 0;\n      color: #0f172a;\n    }\n    .detail-row {\n      display: grid;\n      grid-template-columns: 240px 1fr;\n      gap: 16px;\n      margin: 10px 0;\n      padding: 8px 0;\n      border-bottom: 1px dotted #e2e8f0;\n    }\n    .detail-row:last-child { border-bottom: none; }\n\n    .transaction-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 20px 0;\n    }\n    .transaction-table th {\n      background: #f1f5f9;\n      border: 1px solid #d1d5db;\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: #374151;\n    }\n    .transaction-table td {\n      border: 1px solid #d1d5db;\n      padding: 12px;\n      color: #1f2937;\n    }\n    .transaction-table tr:nth-child(even) {\n      background: #f9fafb;\n    }\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n      color: #059669;\n    }\n    .amount.withdrawal { color: #dc2626; }\n    .balance { color: #1d4ed8; font-weight: bold; }\n\n    .confirmation {\n      background: #ecfdf5;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 30px 0;\n      text-align: center;\n      border: 2px solid #10b981;\n    }\n    .confirmation h3 {\n      margin: 0 0 10px 0;\n      color: #065f46;\n    }\n    .confirmation-number {\n      font-size: 18px;\n      font-weight: bold;\n      color: #047857;\n      font-family: monospace;\n      background: #ffffff;\n      padding: 10px;\n      border-radius: 4px;\n      display: inline-block;\n      margin: 10px 0;\n    }\n\n    .footer {\n      margin-top: 30px;\n      padding-top: 15px;\n      border-top: 1px solid #e5e7eb;\n      color: #6b7280;\n      font-size: 12px;\n      text-align: center;\n    }\n\n    @media print {\n      body { max-width: none; background-color: white; }\n      .wire-transfer { box-shadow: none; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wire-transfer\">\n    <div class=\"header\">\n      <div class=\"logo\" id=\"logo\"></div>\n      <div class=\"bank-info\">\n        <h1 id=\"bank_name\"></h1>\n        <p id=\"bank_address\"></p>\n      </div>\n    </div>\n\n    <div class=\"transfer-title\">\n      WIRE TRANSFER CONFIRMATION\n    </div>\n\n    <div class=\"parties\">\n      <div class=\"panel\">\n        <h3>Requestor</h3>\n        <div class=\"row\"><span class=\"label\">Name</span><span class=\"value\" id=\"requestor\"></span></div>\n        <div class=\"row\"><span class=\"label\">Account Number</span><span class=\"value\" id=\"requestor_account_number\"></span></div>\n        <div class=\"row\"><span class=\"label\">Routing Number</span><span class=\"value\" id=\"requestor_routing_number\"></span></div>\n        <div class=\"row\"><span class=\"label\">Bank Name</span><span class=\"value\" id=\"requestor_bank_name\"></span></div>\n        <div class=\"row\"><span class=\"label\">Address</span><span class=\"value\" id=\"requestor_address\"></span></div>\n      </div>\n\n      <div class=\"panel\">\n        <h3>Recipient</h3>\n        <div class=\"row\"><span class=\"label\">Name</span><span class=\"value\" id=\"recipient\"></span></div>\n        <div class=\"row\"><span class=\"label\">Account Number</span><span class=\"value\" id=\"recipient_account_number\"></span></div>\n        <div class=\"row\"><span class=\"label\">Routing Number</span><span class=\"value\" id=\"recipient_routing_number\"></span></div>\n        <div class=\"row\"><span class=\"label\">Bank Name</span><span class=\"value\" id=\"recipient_bank_name\"></span></div>\n        <div class=\"row\"><span class=\"label\">Address</span><span class=\"value\" id=\"recipient_address\"></span></div>\n      </div>\n    </div>\n\n    <div class=\"transfer-details\">\n      <h3>Transfer Details</h3>\n      <div class=\"detail-row\">\n        <span class=\"label\">Transaction Type / Category</span>\n        <span class=\"value\" id=\"transaction_type\"></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Amount</span>\n        <span class=\"value amount withdrawal\" id=\"amount\"></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Currency</span>\n        <span class=\"value\" id=\"currency\"></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Wire Date</span>\n        <span class=\"value\" id=\"wire_date\"></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Transaction / Reference Number</span>\n        <span class=\"value\" id=\"transaction_number\"></span>\n      </div>\n      <div class=\"detail-row\">\n        <span class=\"label\">Memo / Reference</span>\n        <span class=\"value\" id=\"memo_reference\"></span>\n      </div>\n    </div>\n\n    <div class=\"confirmation\">\n      <h3>Transfer Completed Successfully</h3>\n      <p>Confirmation Number:</p>\n      <div class=\"confirmation-number\" id=\"confirmation_number\"></div>\n      <p id=\"confirmation_message\"></p>\n    </div>\n\n    <div class=\"footer\">\n      <p id=\"footer_text\"></p>\n    </div>\n  </div>\n\n  <script>\n    // Your JSON Data Variable - Replace placeholders with actual values\n    const jsonData ={{ $json.formattedResponse.toJsonString() }} ;\n\n    // Function to flatten nested JSON structure\n    function flattenData(data) {\n      const flattened = {};\n      \n      if (data.wireTransferSchema && data.wireTransferSchema.properties) {\n        const properties = data.wireTransferSchema.properties;\n        \n        // Flatten all nested objects\n        Object.keys(properties).forEach(section => {\n          if (typeof properties[section] === 'object') {\n            Object.keys(properties[section]).forEach(key => {\n              flattened[key] = properties[section][key];\n            });\n          }\n        });\n      }\n      \n      return flattened;\n    }\n\n    // Function to populate the template with JSON data\n    function populateTemplate() {\n      // Flatten the nested JSON structure\n      const flatData = flattenData(jsonData);\n      \n      // Set logo\n      const logoElement = document.getElementById('logo');\n      if (flatData.logo_url) {\n        logoElement.style.backgroundImage = `url('${flatData.logo_url}')`;\n        logoElement.textContent = '';\n      } else {\n        logoElement.textContent = flatData.logo_text || 'BANK';\n      }\n\n      // Apply dynamic styling if available\n      if (flatData.background_color) {\n        document.body.style.backgroundColor = flatData.background_color;\n      }\n      if (flatData.transfer_background) {\n        document.querySelector('.wire-transfer').style.backgroundColor = flatData.transfer_background;\n      }\n\n      // Populate all other fields\n      Object.keys(flatData).forEach(key => {\n        const element = document.getElementById(key);\n        if (element) {\n          if (key === 'amount' || key === 'withdrawal_amount' || key === 'account_balance') {\n            element.textContent = flatData[key] ? `${flatData[key]}` : '';\n          } else if (key === 'deposit_amount') {\n            element.textContent = flatData[key] ? `${flatData[key]}` : '';\n          } else {\n            element.textContent = flatData[key] || '';\n          }\n        }\n      });\n    }\n\n    // Populate the template when page loads\n    document.addEventListener('DOMContentLoaded', populateTemplate);\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        12280
      ],
      "id": "f0a5d7bb-b1f7-4905-9100-7f08aebbfcbb",
      "name": "Edit Fields20"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Wire_Transfer_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1420,
        12280
      ],
      "id": "53e2cd2e-e163-4a17-aa9b-e421cc14876b",
      "name": "Convert to File16"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        12280
      ],
      "id": "94e17d70-6be2-42dc-b762-52391566b0e5",
      "name": "Code14",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice (Goods)</title>\n  <style>\n    body { \n      font-family: Arial, sans-serif; \n      max-width: 800px; \n      margin: 0 auto; \n      padding: 20px; \n      background: #ffffff;\n      color: #333;\n      line-height: 1.4;\n    }\n    @media print {\n      body { background: white; }\n    }\n    .document-header { \n      text-align: center; \n      font-size: 28px; \n      font-weight: bold; \n      margin-bottom: 30px; \n      color: #2c3e50;\n      text-transform: uppercase;\n    }\n    .logo { \n      max-height: 80px; \n      display: block; \n      margin: 0 auto 30px auto;\n      object-fit: contain;\n    }\n    .company-info { \n      margin-bottom: 25px; \n      padding: 15px;\n      background: #f8f9fa;\n      border-left: 4px solid #3498db;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: #2c3e50;\n      font-size: 22px;\n    }\n    .company-info p {\n      margin: 5px 0;\n      color: #555;\n    }\n    .meta-grid { \n      display: grid; \n      grid-template-columns: 1fr 1fr; \n      gap: 20px; \n      margin-bottom: 25px; \n      background: #f8f9fa;\n      padding: 20px;\n      border-radius: 5px;\n    }\n    .meta-section h3 {\n      margin: 0 0 15px 0;\n      color: #2c3e50;\n      border-bottom: 2px solid #3498db;\n      padding-bottom: 5px;\n    }\n    .meta-section p {\n      margin: 8px 0;\n      display: flex;\n      justify-content: space-between;\n    }\n    .meta-section strong {\n      color: #2c3e50;\n      min-width: 140px;\n    }\n    .customer-section {\n      margin-bottom: 25px;\n      padding: 15px;\n      background: #f8f9fa;\n      border-left: 4px solid #e74c3c;\n    }\n    .customer-section h3 {\n      margin: 0 0 15px 0;\n      color: #2c3e50;\n    }\n    .items-table { \n      width: 100%; \n      border-collapse: collapse; \n      margin-bottom: 25px; \n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    }\n    .items-table th, .items-table td { \n      border: 1px solid #ddd; \n      padding: 12px; \n      text-align: left; \n    }\n    .items-table th { \n      background: #34495e; \n      color: white;\n      font-weight: bold;\n      text-transform: uppercase;\n      font-size: 12px;\n    }\n    .items-table tr:nth-child(even) {\n      background: #f8f9fa;\n    }\n    .items-table tr:hover {\n      background: #e8f4fd;\n    }\n    .total-section { \n      text-align: right; \n      margin-top: 30px;\n      padding: 20px;\n      background: #f8f9fa;\n      border-radius: 5px;\n    }\n    .total-section p {\n      margin: 8px 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .total-section strong {\n      color: #2c3e50;\n      min-width: 150px;\n      text-align: left;\n    }\n    .final-total { \n      font-size: 20px; \n      font-weight: bold; \n      margin-top: 15px;\n      padding-top: 15px;\n      border-top: 2px solid #3498db;\n      color: #2c3e50;\n    }\n    .currency {\n      font-weight: bold;\n      color: #27ae60;\n    }\n    .notes-section {\n      margin-top: 30px;\n      padding: 15px;\n      background: #fff3cd;\n      border-left: 4px solid #ffc107;\n    }\n    .notes-section h4 {\n      margin: 0 0 10px 0;\n      color: #856404;\n    }\n    /* Specific styles for different document types */\n    .statement-entry {\n      display: flex;\n      justify-content: space-between;\n      padding: 8px 0;\n      border-bottom: 1px solid #eee;\n    }\n    .statement-date {\n      font-weight: bold;\n      color: #2c3e50;\n    }\n    .statement-amount {\n      font-weight: bold;\n    }\n    .statement-amount.positive {\n      color: #27ae60;\n    }\n    .statement-amount.negative {\n      color: #e74c3c;\n    }\n  </style>\n</head>\n<body>\n  <!-- Logo placeholder -->\n  <img src=\"\" alt=\"Company Logo\" class=\"logo\" id=\"company_logo\" style=\"display: none;\" />\n  \n  <div class=\"document\">\n    <div class=\"document-header\" id=\"document_header\">INVOICE (GOODS)</div>\n\n    <!-- Company/Supplier Info -->\n    <div class=\"company-info\" id=\"company_section\">\n      <h2 id=\"company_name\"></h2>\n      <p id=\"company_address\"></p>\n      <p id=\"company_contact\"></p>\n      <p id=\"company_details\"></p>\n    </div>\n\n    <!-- Document Meta Information -->\n    <div class=\"meta-grid\" id=\"meta_section\">\n      <div class=\"meta-section\">\n        <h3>Document Details</h3>\n        <div id=\"document_meta\"></div>\n      </div>\n      <div class=\"meta-section\">\n        <h3>Additional Information</h3>\n        <div id=\"additional_meta\"></div>\n      </div>\n    </div>\n\n    <!-- Recipient/Customer Info -->\n    <div class=\"customer-section\" id=\"recipient_section\">\n      <h3 id=\"recipient_label\">Recipient:</h3>\n      <div id=\"recipient_details\"></div>\n    </div>\n\n    <!-- Items/Transactions Table -->\n    <table class=\"items-table\" id=\"items_table\" style=\"display: none;\">\n      <thead id=\"table_header\"></thead>\n      <tbody id=\"table_body\"></tbody>\n    </table>\n\n    <!-- Statement Entries (for bank statements, etc.) -->\n    <div id=\"statement_entries\" style=\"display: none;\"></div>\n\n    <!-- Totals/Summary -->\n    <div class=\"total-section\" id=\"totals_section\" style=\"display: none;\">\n      <div id=\"totals_content\"></div>\n    </div>\n\n    <!-- Notes/Additional Information -->\n    <div class=\"notes-section\" id=\"notes_section\" style=\"display: none;\">\n      <h4>Notes:</h4>\n      <div id=\"notes_content\"></div>\n    </div>\n  </div>\n\n  <script>\n    // This will be populated by your AI system\n    // Replace this entire line with: const TEMPLATE_DATA = [your JSON data];\n    const TEMPLATE_DATA = {{ $json.formattedResponse.toJsonString() }};\n    \n    function formatCurrency(amount, currency = 'USD') {\n      if (amount === null || amount === undefined || amount === '') return '';\n      \n      // Ensure amount is a number\n      const numAmount = parseFloat(amount);\n      if (isNaN(numAmount)) return amount;\n      \n      // Add dollar sign for USD or if currency is not specified\n      if (currency === 'USD' || currency === '$' || !currency) {\n        return '$' + numAmount.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n      }\n      \n      return currency + ' ' + numAmount.toLocaleString();\n    }\n    \n    function formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('en-US');\n    }\n    \n    function populateTemplate(data) {\n      if (!data) {\n        console.error('No data provided to template');\n        return;\n      }\n      \n      // Handle nested structure - check if data has invoice/document key\n      let documentData = data;\n      if (data.invoice) {\n        documentData = data.invoice;\n      } else if (data.document) {\n        documentData = data.document;\n      } else if (data.statement) {\n        documentData = data.statement;\n      } else if (data.quote) {\n        documentData = data.quote;\n      } else if (data.purchase_order) {\n        documentData = data.purchase_order;\n      }\n      \n      // Set logo if provided\n      if (documentData.logo_url) {\n        const logo = document.getElementById('company_logo');\n        logo.src = documentData.logo_url;\n        logo.style.display = 'block';\n      }\n      \n      \n      // Populate company info\n      if (documentData.company) {\n        document.getElementById('company_name').textContent = documentData.company.name || '';\n        document.getElementById('company_address').textContent = documentData.company.address || '';\n        document.getElementById('company_contact').textContent = documentData.company.contact || '';\n        document.getElementById('company_details').textContent = documentData.company.details || '';\n      }\n      \n      // Populate document meta information\n      if (documentData.meta) {\n        const docMeta = document.getElementById('document_meta');\n        const addMeta = document.getElementById('additional_meta');\n        \n        // Clear existing content\n        docMeta.innerHTML = '';\n        addMeta.innerHTML = '';\n        \n        // Split meta fields between two columns\n        const metaKeys = Object.keys(documentData.meta);\n        const midPoint = Math.ceil(metaKeys.length / 2);\n        \n        metaKeys.slice(0, midPoint).forEach(key => {\n          const p = document.createElement('p');\n          p.innerHTML = `<strong>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}:</strong> <span>${documentData.meta[key]}</span>`;\n          docMeta.appendChild(p);\n        });\n        \n        metaKeys.slice(midPoint).forEach(key => {\n          const p = document.createElement('p');\n          p.innerHTML = `<strong>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}:</strong> <span>${documentData.meta[key]}</span>`;\n          addMeta.appendChild(p);\n        });\n      }\n      \n      // Populate recipient info\n      if (documentData.recipient) {\n        const recipientDetails = document.getElementById('recipient_details');\n        const recipientLabel = document.getElementById('recipient_label');\n        \n        // Clear existing content\n        recipientDetails.innerHTML = '';\n        \n        // Set appropriate label\n        recipientLabel.textContent = documentData.recipient.label || 'Recipient:';\n        \n        // Add recipient information\n        Object.entries(documentData.recipient).forEach(([key, value]) => {\n          if (key !== 'label' && value) {\n            const p = document.createElement('p');\n            if (key === 'name') {\n              p.innerHTML = `<strong>${value}</strong>`;\n            } else {\n              p.innerHTML = `<strong>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}:</strong> ${value}`;\n            }\n            recipientDetails.appendChild(p);\n          }\n        });\n      }\n      \n      // Handle items table\n      if (documentData.items && documentData.items.length > 0) {\n        const table = document.getElementById('items_table');\n        const header = document.getElementById('table_header');\n        const body = document.getElementById('table_body');\n        \n        // Clear existing content\n        header.innerHTML = '';\n        body.innerHTML = '';\n        \n        table.style.display = 'table';\n        \n        // Create header row\n        if (documentData.items[0]) {\n          const headerRow = document.createElement('tr');\n          Object.keys(documentData.items[0]).forEach(key => {\n            const th = document.createElement('th');\n            th.textContent = key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n            headerRow.appendChild(th);\n          });\n          header.appendChild(headerRow);\n        }\n        \n        // Create data rows\n        documentData.items.forEach(item => {\n          const row = document.createElement('tr');\n          Object.entries(item).forEach(([key, value]) => {\n            const td = document.createElement('td');\n            if (key.includes('amount') || key.includes('price') || key.includes('total') || key.includes('cost')) {\n              td.innerHTML = `<span class=\"currency\">${formatCurrency(value, documentData.currency)}</span>`;\n            } else if (key.includes('date')) {\n              td.textContent = formatDate(value);\n            } else {\n              td.textContent = value || '';\n            }\n            row.appendChild(td);\n          });\n          body.appendChild(row);\n        });\n      }\n      \n      // Handle statement entries (for bank statements)\n      if (documentData.entries && documentData.entries.length > 0) {\n        const entriesContainer = document.getElementById('statement_entries');\n        entriesContainer.innerHTML = '';\n        entriesContainer.style.display = 'block';\n        \n        documentData.entries.forEach(entry => {\n          const entryDiv = document.createElement('div');\n          entryDiv.className = 'statement-entry';\n          \n          const dateSpan = document.createElement('span');\n          dateSpan.className = 'statement-date';\n          dateSpan.textContent = formatDate(entry.date);\n          \n          const descSpan = document.createElement('span');\n          descSpan.textContent = entry.description || '';\n          \n          const amountSpan = document.createElement('span');\n          amountSpan.className = `statement-amount ${parseFloat(entry.amount) >= 0 ? 'positive' : 'negative'}`;\n          amountSpan.textContent = formatCurrency(entry.amount, documentData.currency);\n          \n          entryDiv.appendChild(dateSpan);\n          entryDiv.appendChild(descSpan);\n          entryDiv.appendChild(amountSpan);\n          \n          entriesContainer.appendChild(entryDiv);\n        });\n      }\n      \n      // Handle totals\n      if (documentData.totals) {\n        const totalsSection = document.getElementById('totals_section');\n        const totalsContent = document.getElementById('totals_content');\n        \n        // Clear existing content\n        totalsContent.innerHTML = '';\n        \n        totalsSection.style.display = 'block';\n        \n        Object.entries(documentData.totals).forEach(([key, value]) => {\n          const p = document.createElement('p');\n          const isTotal = key.toLowerCase().includes('total');\n          p.className = isTotal ? 'final-total' : '';\n          \n          if (key.includes('amount') || key.includes('total') || key.includes('due') || key.includes('balance')) {\n            p.innerHTML = `<strong>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}:</strong> <span class=\"currency\">${formatCurrency(value, documentData.currency)}</span>`;\n          } else {\n            p.innerHTML = `<strong>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}:</strong> <span>${value}</span>`;\n          }\n          \n          totalsContent.appendChild(p);\n        });\n      }\n      \n      // Handle notes\n      if (documentData.notes) {\n        const notesSection = document.getElementById('notes_section');\n        const notesContent = document.getElementById('notes_content');\n        \n        // Clear existing content\n        notesContent.innerHTML = '';\n        \n        notesSection.style.display = 'block';\n        \n        if (Array.isArray(documentData.notes)) {\n          documentData.notes.forEach(note => {\n            if (note && note.trim()) { // Only add non-empty notes\n              const p = document.createElement('p');\n              p.textContent = note;\n              notesContent.appendChild(p);\n            }\n          });\n        } else if (documentData.notes) {\n          notesContent.textContent = documentData.notes;\n        }\n      }\n    }\n    \n    // Initialize template with data\n    if (typeof TEMPLATE_DATA !== 'undefined' && TEMPLATE_DATA !== null) {\n      populateTemplate(TEMPLATE_DATA);\n    }\n    \n    // Function to update template with new data (for external use)\n    window.updateTemplate = function(newData) {\n      populateTemplate(newData);\n    };\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1260,
        12960
      ],
      "id": "3b96b1c4-e8a9-475c-bf54-4894aacbdd4c",
      "name": "Edit Fields21"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "={{ $('Edit Fields16').item.json.companyProfile.company_name }}_Invoice_Goods_run-{{ $('Edit Fields16').item.json.runindex.toNumber() + 1}}_{{ $now.format('MMM-dd-yy')}}.html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1480,
        12960
      ],
      "id": "017dafa1-3c56-4f6b-8c6b-350db3dd9901",
      "name": "Convert to File15"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        12960
      ],
      "id": "dc60107c-9238-46da-90da-176d7e44d9fc",
      "name": "Code15",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Expenses Sub-Ledger</title>\n  <style>\n    /* Force landscape on print/PDF */\n    @page { size: A4 landscape; margin: 14mm; }\n    @media print { \n      body { -webkit-print-color-adjust: exact; }\n      .items-table th { position: sticky; top: 0; }\n    }\n\n    *, *::before, *::after { box-sizing: border-box; }\n\n    :root { --gap: 18px; }\n\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 100%;\n      margin: 0 auto;\n      padding: 16px;\n      background-color: #f9fafb;\n      color: #1e293b;\n    }\n\n    .ledger {\n      background: #ffffff;\n      border: 2px solid #334155;\n      padding: 16px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      border-radius: 8px;\n    }\n\n    .ledger-header {\n      background: #334155;\n      color: #f8fafc;\n      padding: 10px 12px;\n      margin: -16px -16px 16px -16px;\n      text-align: center;\n      font-size: 20px;\n      font-weight: bold;\n      letter-spacing: 1.2px;\n      border-top-left-radius: 8px;\n      border-top-right-radius: 8px;\n    }\n\n    .company-info {\n      margin-bottom: 12px;\n      display: flex;\n      align-items: flex-start;\n      gap: var(--gap);\n    }\n    .company-info h2 {\n      margin: 0 0 4px 0;\n      color: #334155;\n      font-size: 18px;\n      line-height: 1.2;\n    }\n    .company-info p { margin: 2px 0; color: #64748b; }\n    .company-info p:empty { display: none; }\n\n    .logo {\n      width: 90px;\n      height: 40px;\n      background: transparent;\n      color: #334155;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n      flex-shrink: 0;\n    }\n\n    .report-details {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: 10px 18px;\n      margin: 12px 0 10px;\n      background: #e0e7ff;\n      padding: 10px;\n      border-radius: 6px;\n      font-size: 12px;\n    }\n    .report-details p { margin: 0; color: #475569; }\n    .report-details p:empty { display: none; }\n    .report-details strong { color: #1e293b; }\n\n    .entity-block {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 10px 18px;\n      background: #f0f5ff;\n      padding: 10px;\n      border-radius: 6px;\n      margin: 12px 0;\n      font-size: 12px;\n    }\n    .entity-block h3 {\n      grid-column: 1 / -1;\n      margin: 0 0 6px 0;\n      color: #334155;\n      font-size: 14px;\n    }\n    .entity-block p { margin: 0; color: #475569; }\n    .entity-block p:empty { display: none; }\n\n    /* Table Layout - Slimmed columns, fixed layout, wrap long text */\n    .items-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 12px 0;\n      font-size: 11px;\n      table-layout: fixed;\n      word-break: break-word;\n    }\n    .items-table th {\n      background: #334155;\n      color: #f8fafc;\n      border: 1px solid #64748b;\n      padding: 6px 5px;\n      text-align: left;\n      font-weight: bold;\n      white-space: nowrap;\n    }\n    .items-table td {\n      border: 1px solid #64748b;\n      padding: 6px 5px;\n      color: #334155;\n      vertical-align: top;\n    }\n    .items-table tr:nth-child(even) { background: #e0e7ff; }\n    .num, .amount { text-align: right; font-family: monospace; white-space: nowrap; }\n    .col-desc { white-space: normal; }\n\n    /* Panels / Summaries */\n    .summary-grid {\n      display: grid;\n      grid-template-columns: 1.3fr 1.2fr 1fr;\n      gap: 12px;\n      align-items: start;\n      margin-top: 6px;\n    }\n    .panel {\n      background: #eef2ff;\n      padding: 10px;\n      border-radius: 6px;\n    }\n    .panel h4 { margin: 0 0 8px 0; color: #1e40af; font-size: 14px; }\n\n    .mini-table {\n      width: 100%;\n      border-collapse: collapse;\n      font-size: 11px;\n      margin-top: 6px;\n      table-layout: fixed;\n    }\n    .mini-table th, .mini-table td {\n      border: 1px solid #64748b;\n      padding: 6px;\n      text-align: left;\n      word-break: break-word;\n    }\n    .mini-table th { background: #334155; color: #f8fafc; }\n\n    .totals p { margin: 4px 0; font-size: 12px; color: #475569; display: flex; justify-content: space-between; }\n    .totals .final-total { font-size: 15px; font-weight: bold; color: #1e40af; border-top: 2px solid #334155; padding-top: 6px; margin-top: 6px; }\n\n    .muted { color: #64748b; font-size: 10px; }\n\n    .notes { background: #e0e7ff; padding: 10px; border-left: 4px solid #3b82f6; margin-top: 12px; color: #334155; border-radius: 6px; font-size: 11px; }\n    .notes:empty { display: none; }\n  </style>\n  <script>\n    const jsonData = {{ $json.formattedResponse.toJsonString() }};\n    \n    function populateTemplate() {\n      // Helper function to safely get value or return empty string/default\n      function safeValue(value, defaultValue = '') {\n        return (value !== null && value !== undefined && value !== '') ? value : defaultValue;\n      }\n\n      // Populate company info\n      document.getElementById('company-name').textContent = safeValue(jsonData.company_name);\n      document.getElementById('company-address').textContent = safeValue(jsonData.company_address);\n      document.getElementById('company-phone').textContent = safeValue(jsonData.company_phone);\n      document.getElementById('company-email').textContent = safeValue(jsonData.company_email);\n      \n      // Hide empty company info paragraphs\n      ['company-address', 'company-phone', 'company-email'].forEach(id => {\n        const element = document.getElementById(id);\n        if (!element.textContent.trim()) {\n          element.style.display = 'none';\n        }\n      });\n\n      // Handle logo URL\n      const logoElement = document.querySelector('.logo');\n      if (logoElement && jsonData.logo_url) {\n        logoElement.style.backgroundImage = `url('${jsonData.logo_url}')`;\n      }\n      \n      // Populate report details\n      document.getElementById('ledger-id').textContent = safeValue(jsonData.ledger_id);\n      document.getElementById('entity-name').textContent = safeValue(jsonData.entity_name);\n      document.getElementById('period-start').textContent = safeValue(jsonData.period_start);\n      document.getElementById('period-end').textContent = safeValue(jsonData.period_end);\n      document.getElementById('base-currency').textContent = safeValue(jsonData.base_currency);\n      document.getElementById('prepared-on').textContent = safeValue(jsonData.prepared_on);\n      document.getElementById('prepared-by').textContent = safeValue(jsonData.prepared_by, 'N/A');\n      document.getElementById('approval-status').textContent = safeValue(jsonData.approval_status, 'Pending');\n      \n      // Populate department info\n      document.getElementById('department-name').textContent = safeValue(jsonData.department_name, 'N/A');\n      document.getElementById('cost-center').textContent = safeValue(jsonData.cost_center_code, 'N/A');\n      document.getElementById('project-code').textContent = safeValue(jsonData.project_code, 'N/A');\n      \n      // Handle expense_items array\n      if (jsonData.expense_items && Array.isArray(jsonData.expense_items)) {\n        let expenseRows = '';\n        jsonData.expense_items.forEach(item => {\n          expenseRows += `\n            <tr>\n              <td>${safeValue(item.txn_date)}</td>\n              <td>${safeValue(item.vendor_payee)}</td>\n              <td>${safeValue(item.expense_category)}</td>\n              <td class=\"col-desc\">${safeValue(item.description)}</td>\n              <td>${safeValue(item.gl_account)}</td>\n              <td class=\"num\">${safeValue(item.quantity)}</td>\n              <td class=\"amount\">${safeValue(item.unit_cost, '$0.00')}</td>\n              <td class=\"amount\">${safeValue(item.tax_amount, '$0.00')}</td>\n              <td class=\"amount\">${safeValue(item.line_total, '$0.00')}</td>\n              <td>${safeValue(item.transaction_number)}</td>\n            </tr>`;\n        });\n        const expenseTableBody = document.querySelector('.items-table tbody');\n        if (expenseTableBody) {\n          expenseTableBody.innerHTML = expenseRows;\n        }\n      }\n      \n      // Handle category_summary array\n      if (jsonData.category_summary && Array.isArray(jsonData.category_summary)) {\n        let categoryRows = '';\n        jsonData.category_summary.forEach(item => {\n          categoryRows += `\n            <tr>\n              <td>${safeValue(item.category)}</td>\n              <td>${safeValue(item.pre_tax, '$0.00')}</td>\n              <td>${safeValue(item.tax, '$0.00')}</td>\n              <td>${safeValue(item.total, '$0.00')}</td>\n            </tr>`;\n        });\n        const categoryTable = document.querySelector('.panel .mini-table tbody');\n        if (categoryTable) {\n          categoryTable.innerHTML = categoryRows;\n        }\n      }\n      \n      // Handle tax_summary array\n      if (jsonData.tax_summary && Array.isArray(jsonData.tax_summary)) {\n        let taxRows = '';\n        jsonData.tax_summary.forEach(item => {\n          const rate = safeValue(item.rate) ? `${item.rate}%` : '0%';\n          const taxCode = safeValue(item.tax_code, 'No Tax');\n          taxRows += `\n            <tr>\n              <td>${taxCode}</td>\n              <td>${rate}</td>\n              <td>${safeValue(item.taxable_amount, '$0.00')}</td>\n              <td>${safeValue(item.tax_amount, '$0.00')}</td>\n            </tr>`;\n        });\n        const taxTables = document.querySelectorAll('.panel .mini-table tbody');\n        if (taxTables[1]) {\n          taxTables[1].innerHTML = taxRows;\n        }\n      }\n      \n      // Handle account_summary array\n      if (jsonData.account_summary && Array.isArray(jsonData.account_summary)) {\n        let accountRows = '';\n        jsonData.account_summary.forEach(item => {\n          accountRows += `\n            <tr>\n              <td>${safeValue(item.account_number)}</td>\n              <td>${safeValue(item.account_name)}</td>\n              <td>${safeValue(item.opening_balance, '$0.00')}</td>\n              <td>${safeValue(item.debits, '$0.00')}</td>\n              <td>${safeValue(item.credits, '$0.00')}</td>\n              <td>${safeValue(item.ending_balance, '$0.00')}</td>\n            </tr>`;\n        });\n        const accountTable = document.querySelectorAll('.panel .mini-table tbody')[2];\n        if (accountTable) {\n          accountTable.innerHTML = accountRows;\n        }\n      }\n      \n      // Populate totals\n      document.getElementById('subtotal-pretax').textContent = safeValue(jsonData.subtotal_pretax, '$0.00');\n      document.getElementById('total-tax').textContent = safeValue(jsonData.total_tax, '$0.00');\n      document.getElementById('gross-total').textContent = safeValue(jsonData.gross_total, '$0.00');\n      document.getElementById('non-reimbursable').textContent = safeValue(jsonData.non_reimbursable_total, '$0.00');\n      document.getElementById('advances-applied').textContent = safeValue(jsonData.advances_applied, '$0.00');\n      document.getElementById('net-payable').textContent = safeValue(jsonData.net_payable, '$0.00');\n      document.getElementById('base-currency-footer').textContent = safeValue(jsonData.base_currency);\n      document.getElementById('fx-difference').textContent = safeValue(jsonData.fx_difference, '$0.00');\n      \n      // Handle journal_entries array\n      if (jsonData.journal_entries && Array.isArray(jsonData.journal_entries)) {\n        let journalRows = '';\n        jsonData.journal_entries.forEach(item => {\n          journalRows += `\n            <tr>\n              <td>${safeValue(item.account)}</td>\n              <td>${safeValue(item.description)}</td>\n              <td>${safeValue(item.debit, '$0.00')}</td>\n              <td>${safeValue(item.credit, '$0.00')}</td>\n            </tr>`;\n        });\n        const journalTable = document.querySelector('.panel[style*=\"margin-top:10px\"] .mini-table tbody');\n        if (journalTable) {\n          journalTable.innerHTML = journalRows;\n        }\n      }\n      \n      // Handle notes\n      const notesElement = document.querySelector('.notes');\n      const policyNotes = safeValue(jsonData.policy_notes);\n      if (policyNotes) {\n        notesElement.innerHTML = `<strong>Notes & Policy References:</strong> ${policyNotes}`;\n      } else {\n        notesElement.style.display = 'none';\n      }\n      \n      // Handle approval_trail array\n      if (jsonData.approval_trail && Array.isArray(jsonData.approval_trail)) {\n        let approvalRows = '';\n        if (jsonData.approval_trail.length === 0) {\n          approvalRows = '<tr><td colspan=\"5\" style=\"text-align:center;color:#64748b;\">No approval trail data</td></tr>';\n        } else {\n          jsonData.approval_trail.forEach(item => {\n            approvalRows += `\n              <tr>\n                <td>${safeValue(item.role)}</td>\n                <td>${safeValue(item.name)}</td>\n                <td>${safeValue(item.action)}</td>\n                <td>${safeValue(item.date_time)}</td>\n                <td>${safeValue(item.remarks)}</td>\n              </tr>`;\n          });\n        }\n        const approvalTables = document.querySelectorAll('.panel .mini-table tbody');\n        const approvalTable = approvalTables[approvalTables.length - 1];\n        if (approvalTable) {\n          approvalTable.innerHTML = approvalRows;\n        }\n      }\n    }\n    \n    // Auto-populate when page loads\n    window.addEventListener('DOMContentLoaded', populateTemplate);\n  </script>\n</head>\n<body>\n  <div class=\"ledger\">\n    <div class=\"ledger-header\">EXPENSES SUB-LEDGER</div>\n\n    <!-- Company Info -->\n    <div class=\"company-info\">\n      <div class=\"logo\"></div>\n      <div>\n        <h2 id=\"company-name\"></h2>\n        <p id=\"company-address\"></p>\n        <p id=\"company-phone\"></p>\n        <p id=\"company-email\"></p>\n      </div>\n    </div>\n\n    <!-- Report Meta -->\n    <div class=\"report-details\">\n      <p><strong>Ledger ID:</strong> <span id=\"ledger-id\"></span></p>\n      <p><strong>Entity:</strong> <span id=\"entity-name\"></span></p>\n      <p><strong>Period Start:</strong> <span id=\"period-start\"></span></p>\n      <p><strong>Period End:</strong> <span id=\"period-end\"></span></p>\n      <p><strong>Base Currency:</strong> <span id=\"base-currency\"></span></p>\n      <p><strong>Prepared On:</strong> <span id=\"prepared-on\"></span></p>\n      <p><strong>Prepared By:</strong> <span id=\"prepared-by\"></span></p>\n      <p><strong>Approval Status:</strong> <span id=\"approval-status\"></span></p>\n    </div>\n\n    <!-- Department / Allocation -->\n    <div class=\"entity-block\">\n      <h3>Department / Allocation</h3>\n      <p><strong>Department:</strong> <span id=\"department-name\"></span></p>\n      <p><strong>Cost Center:</strong> <span id=\"cost-center\"></span></p>\n      <p><strong>Project / Job:</strong> <span id=\"project-code\"></span></p>\n    </div>\n\n    <!-- Line Items Table -->\n    <table class=\"items-table\">\n      <colgroup>\n        <col style=\"width: 7%\">\n        <col style=\"width: 14%\">\n        <col style=\"width: 10%\">\n        <col style=\"width: 22%\">\n        <col style=\"width: 15%\">\n        <col style=\"width: 6%\">\n        <col style=\"width: 8%\">\n        <col style=\"width: 6%\">\n        <col style=\"width: 8%\">\n        <col style=\"width: 10%\">\n      </colgroup>\n      <thead>\n        <tr>\n          <th>Txn Date</th>\n          <th>Vendor / Payee</th>\n          <th>Expense Category</th>\n          <th>Description</th>\n          <th>GL Account</th>\n          <th>Qty</th>\n          <th>Unit Cost</th>\n          <th>Tax</th>\n          <th>Line Total</th>\n          <th>Transaction #</th>\n        </tr>\n      </thead>\n      <tbody>\n        <!-- Expense rows will be populated by JavaScript -->\n      </tbody>\n    </table>\n\n    <!-- Summaries -->\n    <div class=\"summary-grid\">\n      <!-- Category Summary -->\n      <div class=\"panel\">\n        <h4>Category Summary</h4>\n        <table class=\"mini-table\">\n          <thead>\n            <tr><th>Category</th><th>Pre-Tax</th><th>Tax</th><th>Total</th></tr>\n          </thead>\n          <tbody>\n            <!-- Category rows will be populated by JavaScript -->\n          </tbody>\n        </table>\n\n        <h4 style=\"margin-top:8px;\">Tax Summary</h4>\n        <table class=\"mini-table\">\n          <thead>\n            <tr><th>Tax Code</th><th>Rate</th><th>Taxable</th><th>Tax</th></tr>\n          </thead>\n          <tbody>\n            <!-- Tax rows will be populated by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Account Summary -->\n      <div class=\"panel\">\n        <h4>Account Summary</h4>\n        <table class=\"mini-table\">\n          <thead>\n            <tr>\n              <th>GL Account #</th>\n              <th>GL Account Name</th>\n              <th>Opening Balance</th>\n              <th>Debits</th>\n              <th>Credits</th>\n              <th>Ending Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            <!-- Account rows will be populated by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Totals / Liability -->\n      <div class=\"panel totals\">\n        <p><span><strong>Pre-Tax Subtotal</strong></span><span class=\"amount\" id=\"subtotal-pretax\"></span></p>\n        <p><span><strong>Total Tax</strong></span><span class=\"amount\" id=\"total-tax\"></span></p>\n        <p class=\"final-total\"><span><strong>Gross Total</strong></span><span class=\"amount\" id=\"gross-total\"></span></p>\n        <p><span>Non-Reimbursable</span><span class=\"amount\" id=\"non-reimbursable\"></span></p>\n        <p><span>Advances Applied</span><span class=\"amount\" id=\"advances-applied\"></span></p>\n        <p class=\"final-total\"><span><strong>Net Payable</strong></span><span class=\"amount\" id=\"net-payable\"></span></p>\n        <p class=\"muted\"><em>Base Currency: <span id=\"base-currency-footer\"></span> | FX Diff: <span id=\"fx-difference\"></span></em></p>\n      </div>\n    </div>\n\n    <!-- Journal Export -->\n    <div class=\"panel\" style=\"margin-top:10px;\">\n      <h4>Journal Export</h4>\n      <table class=\"mini-table\">\n        <thead>\n          <tr><th>Account</th><th>Description</th><th>Debit</th><th>Credit</th></tr>\n        </thead>\n        <tbody>\n          <!-- Journal rows will be populated by JavaScript -->\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Notes -->\n    <div class=\"notes\">\n      <!-- Notes will be populated by JavaScript -->\n    </div>\n\n    <!-- Approval Trail -->\n    <div class=\"panel\" style=\"margin-top:10px;\">\n      <h4>Approval Trail</h4>\n      <table class=\"mini-table\">\n        <thead>\n          <tr><th>Role</th><th>Name</th><th>Action</th><th>Date/Time</th><th>Remarks</th></tr>\n        </thead>\n        <tbody>\n          <!-- Approval rows will be populated by JavaScript -->\n        </tbody>\n      </table>\n    </div>\n  </div>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1180,
        13280
      ],
      "id": "bfae6cf7-8df6-44d1-a295-b5672445c048",
      "name": "Edit Fields22"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        13280
      ],
      "id": "327b8b16-ec1c-4f8c-b3b5-f87847b7ce9d",
      "name": "Code16",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Disbursement Listing</title>\n  <style>\n    /* Force landscape layout for printing */\n    @page {\n      size: A4 landscape;\n      margin: 12mm;\n    }\n    @media print {\n      body { background: #fff !important; }\n      .no-print { display: none !important; }\n    }\n\n    body {\n      font-family: var(--font-family);\n      margin: 0 auto;\n      padding: 12px;\n      background-color: var(--background-color);\n      color: var(--text-color);\n    }\n\n    .report {\n      background: var(--invoice-background);\n      border: 1px solid var(--border-color);\n      padding: 20px;\n    }\n\n    .report-header {\n      background: var(--header-background);\n      color: var(--header-text-color);\n      padding: 14px;\n      margin: -20px -20px 20px -20px;\n      text-align: center;\n      font-size: 22px;\n      font-weight: bold;\n      letter-spacing: 1px;\n    }\n\n    .company-info {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 14px;\n    }\n    .company-info h2 {\n      margin: 0 0 6px 0;\n      color: var(--company-name-color);\n      font-size: 18px;\n    }\n    .company-info p {\n      margin: 2px 0;\n      font-size: 12px;\n      color: var(--company-details-color);\n    }\n    .logo {\n      width: var(--logo-width);\n      height: var(--logo-height);\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n\n    .filters {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px 20px;\n      margin: 12px 0;\n      background: var(--details-background);\n      padding: 10px 12px;\n      border-radius: 4px;\n      font-size: 12px;\n    }\n    .filters p { margin: 0; }\n\n    .table-wrap {\n      overflow-x: auto;\n      border: 1px solid var(--table-border-color);\n      border-radius: 4px;\n      margin-top: 12px;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      font-size: 12px;\n    }\n    th, td {\n      padding: 6px 8px;\n      border: 1px solid var(--table-border-color);\n    }\n    th {\n      background: var(--table-header-background);\n      color: var(--table-header-text-color);\n      font-weight: bold;\n      text-align: left;\n      white-space: nowrap;\n    }\n    td { color: var(--table-text-color); }\n    tr:nth-child(even) td { background: var(--table-row-alternate-background); }\n    .right { text-align: right; font-family: monospace; }\n    .center { text-align: center; }\n\n    .totals {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: flex-end;\n      gap: 24px;\n      margin: 14px 0;\n      background: var(--total-background);\n      padding: 12px 14px;\n      border-radius: 4px;\n      font-size: 13px;\n    }\n    .final-total {\n      font-size: 16px;\n      font-weight: bold;\n      color: var(--final-total-color);\n      border-top: 2px solid var(--final-total-color);\n      padding-top: 4px;\n    }\n\n    .summary {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 12px;\n      margin-top: 14px;\n    }\n    .card {\n      border: 1px solid var(--border-color);\n      border-radius: 4px;\n      padding: 8px;\n      font-size: 12px;\n      background: var(--details-background);\n    }\n    .card h4 {\n      margin: 0 0 6px 0;\n      font-size: 13px;\n    }\n    .mini {\n      width: 100%;\n      border-collapse: collapse;\n      font-size: 12px;\n    }\n    .mini th, .mini td {\n      padding: 4px 6px;\n      border: 1px dashed var(--table-border-color);\n    }\n    .mini th {\n      background: transparent;\n      color: var(--table-header-text-color);\n      text-align: left;\n    }\n\n    .controls {\n      margin-bottom: 20px;\n      text-align: center;\n    }\n    .controls button {\n      background: var(--primary-color);\n      color: white;\n      border: none;\n      padding: 10px 20px;\n      margin: 0 10px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    .controls button:hover {\n      opacity: 0.8;\n    }\n\n    .recipient-info {\n      margin-top: 20px;\n      padding: 10px;\n      background: var(--details-background);\n      border-radius: 4px;\n      font-size: 12px;\n    }\n    .recipient-info h4 {\n      margin: 0 0 6px 0;\n      color: var(--company-name-color);\n    }\n  </style>\n</head>\n<body>\n\n  <div class=\"report\" id=\"report\">\n    <div class=\"report-header\">DISBURSEMENT LISTING</div>\n\n    <div class=\"company-info\">\n      <div>\n        <h2 id=\"companyName\"><<company_name>></h2>\n        <p id=\"companyAddress\"><<company_address>></p>\n        <p>Phone: <span id=\"companyPhone\"><<company_phone>></span></p>\n        <p>Email: <span id=\"companyEmail\"><<company_email>></span></p>\n      </div>\n      <div class=\"logo\" id=\"companyLogo\"></div>\n    </div>\n\n    <div class=\"filters\">\n      <p><strong>Period:</strong> <span id=\"reportStartDate\"><<report_start_date>></span> to <span id=\"reportEndDate\"><<report_end_date>></span></p>\n      <p><strong>Bank A/c:</strong> <span id=\"bankAccount\"><<bank_account>></span></p>\n      <p><strong>Prepared On:</strong> <span id=\"preparedOn\"><<prepared_on>></span></p>\n      <p><strong>Prepared By:</strong> <span id=\"preparedBy\"><<prepared_by>></span></p>\n    </div>\n\n    <div class=\"table-wrap\">\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Voucher #</th>\n            <th>Payee</th>\n            <th>Vendor #</th>\n            <th>Mode</th>\n            <th>Instr./UTR</th>\n            <th>GL Account</th>\n            <th>Project / CC</th>\n            <th>Description</th>\n            <th class=\"right\">Gross</th>\n            <th class=\"right\">Withholding/TDS</th>\n            <th class=\"right\">Net Paid</th>\n            <th class=\"center\">Status</th>\n            <th class=\"center\">Approved By</th>\n          </tr>\n        </thead>\n        <tbody id=\"disbursementRows\">\n          <!-- Disbursement rows will be populated here -->\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"totals\">\n      <p><strong>Total Payees:</strong> <span id=\"totalPayees\">0</span></p>\n      <p><strong>Gross Disbursed:</strong> $<span id=\"totalGross\">0.00</span></p>\n      <p><strong>Total Withholding/TDS:</strong> $<span id=\"totalWithholding\">0.00</span></p>\n      <p class=\"final-total\">Net Disbursed: $<span id=\"totalNet\">0.00</span></p>\n    </div>\n\n    <div class=\"summary\">\n      <div class=\"card\">\n        <h4>Summary by Payment Mode</h4>\n        <table class=\"mini\" id=\"summaryByMode\">\n          <tr><th>Mode</th><th>Amount</th></tr>\n        </table>\n      </div>\n      <div class=\"card\">\n        <h4>Summary by Payee (Top 10)</h4>\n        <table class=\"mini\" id=\"summaryByPayee\">\n          <tr><th>Payee</th><th>Amount</th></tr>\n        </table>\n      </div>\n      <div class=\"card\">\n        <h4>Summary by GL Account</h4>\n        <table class=\"mini\" id=\"summaryByGL\">\n          <tr><th>GL Account</th><th>Amount</th></tr>\n        </table>\n      </div>\n    </div>\n\n    <div class=\"recipient-info\" id=\"recipientInfo\">\n      <h4>Report Recipient</h4>\n      <p><strong>Name:</strong> <span id=\"recipientName\"><<recipient_name>></span></p>\n      <p><strong>Company:</strong> <span id=\"recipientCompany\"><<recipient_company>></span></p>\n    </div>\n  </div>\n\n  <script>\n    // Template JSON Data with placeholders\n    const templateJsonData = {{ $json.formattedResponse.toJsonString() }};\n\n\n\n    // Function to apply CSS custom properties from JSON data\n    function applyBrandingStyles(jsonData) {\n      const root = document.documentElement;\n      \n      // Apply branding styles\n      if (jsonData.branding) {\n        root.style.setProperty('--font-family', jsonData.branding.font_family || 'Inter, Arial, sans-serif');\n        root.style.setProperty('--primary-color', jsonData.branding.primary_color || '#334155');\n        root.style.setProperty('--logo-width', jsonData.branding.logo_width || '80px');\n        root.style.setProperty('--logo-height', jsonData.branding.logo_height || '50px');\n      }\n\n      // Apply color styles\n      if (jsonData.colors) {\n        Object.entries(jsonData.colors).forEach(([key, value]) => {\n          const cssVar = '--' + key.replace(/_/g, '-');\n          root.style.setProperty(cssVar, value);\n        });\n      }\n    }\n\n    // Function to generate the report from JSON data\n    function generateDisbursementReport(jsonData) {\n      // Apply branding and color styles\n      applyBrandingStyles(jsonData);\n\n      // Update company information\n      document.getElementById('companyName').textContent = jsonData.company.name;\n      document.getElementById('companyAddress').textContent = jsonData.company.address;\n      document.getElementById('companyPhone').textContent = jsonData.company.phone;\n      document.getElementById('companyEmail').textContent = jsonData.company.email;\n      \n      // Update logo\n      if (jsonData.branding && jsonData.branding.logo_url && !jsonData.branding.logo_url.includes('<<')) {\n        document.getElementById('companyLogo').style.backgroundImage = `url('${jsonData.branding.logo_url}')`;\n      }\n\n      // Update report information\n      document.getElementById('reportStartDate').textContent = jsonData.report_info.start_date;\n      document.getElementById('reportEndDate').textContent = jsonData.report_info.end_date;\n      document.getElementById('bankAccount').textContent = jsonData.report_info.bank_account;\n      document.getElementById('preparedOn').textContent = jsonData.report_info.prepared_on;\n      document.getElementById('preparedBy').textContent = jsonData.report_info.prepared_by;\n\n      // Update recipient information\n      if (jsonData.recipient) {\n        document.getElementById('recipientName').textContent = jsonData.recipient.name;\n        document.getElementById('recipientCompany').textContent = jsonData.recipient.company;\n      }\n\n      // Generate disbursement table rows\n      const disbursementRows = document.getElementById('disbursementRows');\n      disbursementRows.innerHTML = '';\n      \n      if (jsonData.disbursements && Array.isArray(jsonData.disbursements)) {\n        jsonData.disbursements.forEach(item => {\n          // Handle placeholder values\n          const grossAmount = typeof item.gross_amount === 'number' ? item.gross_amount : 0;\n          const withholding = typeof item.withholding === 'number' ? item.withholding : 0;\n          const netPaid = typeof item.net_paid === 'number' ? item.net_paid : 0;\n\n          const row = document.createElement('tr');\n          row.innerHTML = `\n            <td>${item.date}</td>\n            <td>${item.voucher}</td>\n            <td>${item.payee}</td>\n            <td>${item.vendor_number}</td>\n            <td>${item.mode}</td>\n            <td>${item.instrument}</td>\n            <td>${item.gl_account}</td>\n            <td>${item.project}</td>\n            <td>${item.description}</td>\n            <td class=\"right\">$${grossAmount.toFixed ? grossAmount.toFixed(2) : grossAmount}</td>\n            <td class=\"right\">$${withholding.toFixed ? withholding.toFixed(2) : withholding}</td>\n            <td class=\"right\">$${netPaid.toFixed ? netPaid.toFixed(2) : netPaid}</td>\n            <td class=\"center\">${item.status}</td>\n            <td class=\"center\">${item.approved_by}</td>\n          `;\n          disbursementRows.appendChild(row);\n        });\n\n        // Calculate totals only if we have valid numeric data\n        const validDisbursements = jsonData.disbursements.filter(d => \n          typeof d.gross_amount === 'number' && \n          typeof d.withholding === 'number' && \n          typeof d.net_paid === 'number'\n        );\n\n        const totalPayees = new Set(validDisbursements.map(d => d.payee)).size;\n        const totalGross = validDisbursements.reduce((sum, d) => sum + d.gross_amount, 0);\n        const totalWithholding = validDisbursements.reduce((sum, d) => sum + d.withholding, 0);\n        const totalNet = validDisbursements.reduce((sum, d) => sum + d.net_paid, 0);\n\n        // Update totals\n        document.getElementById('totalPayees').textContent = totalPayees;\n        document.getElementById('totalGross').textContent = totalGross.toFixed(2);\n        document.getElementById('totalWithholding').textContent = totalWithholding.toFixed(2);\n        document.getElementById('totalNet').textContent = totalNet.toFixed(2);\n\n        // Generate summaries only with valid data\n        if (validDisbursements.length > 0) {\n          generateSummaries(validDisbursements);\n        }\n      }\n    }\n\n    // Function to generate summary tables\n    function generateSummaries(disbursements) {\n      // Generate summary by payment mode\n      const modesSummary = {};\n      disbursements.forEach(d => {\n        if (!modesSummary[d.mode]) {\n          modesSummary[d.mode] = 0;\n        }\n        modesSummary[d.mode] += d.net_paid;\n      });\n      \n      const summaryByMode = document.getElementById('summaryByMode');\n      summaryByMode.innerHTML = '<tr><th>Mode</th><th>Amount</th></tr>';\n      Object.entries(modesSummary).forEach(([mode, amount]) => {\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>${mode}</td><td>$${amount.toFixed(2)}</td>`;\n        summaryByMode.appendChild(row);\n      });\n\n      // Generate summary by payee\n      const payeesSummary = {};\n      disbursements.forEach(d => {\n        if (!payeesSummary[d.payee]) {\n          payeesSummary[d.payee] = 0;\n        }\n        payeesSummary[d.payee] += d.net_paid;\n      });\n      \n      const summaryByPayee = document.getElementById('summaryByPayee');\n      summaryByPayee.innerHTML = '<tr><th>Payee</th><th>Amount</th></tr>';\n      Object.entries(payeesSummary)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 10)\n        .forEach(([payee, amount]) => {\n          const row = document.createElement('tr');\n          row.innerHTML = `<td>${payee}</td><td>$${amount.toFixed(2)}</td>`;\n          summaryByPayee.appendChild(row);\n        });\n\n      // Generate summary by GL account\n      const glSummary = {};\n      disbursements.forEach(d => {\n        if (!glSummary[d.gl_account]) {\n          glSummary[d.gl_account] = 0;\n        }\n        glSummary[d.gl_account] += d.net_paid;\n      });\n      \n      const summaryByGL = document.getElementById('summaryByGL');\n      summaryByGL.innerHTML = '<tr><th>GL Account</th><th>Amount</th></tr>';\n      Object.entries(glSummary).forEach(([gl, amount]) => {\n        const row = document.createElement('tr');\n        row.innerHTML = `<td>${gl}</td><td>$${amount.toFixed(2)}</td>`;\n        summaryByGL.appendChild(row);\n      });\n    }\n\n    // Function to generate report (can be called from button or externally)\n    function generateReport() {\n      // Use sample data for demonstration, replace with templateJsonData for template use\n      generateDisbursementReport(templateJsonData);\n    }\n\n    // Auto-generate report on page load\n    document.addEventListener('DOMContentLoaded', function() {\n      generateReport();\n    });\n\n\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1260,
        13580
      ],
      "id": "a42780a9-0792-461d-8f87-8e76807af95c",
      "name": "Edit Fields23"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        13580
      ],
      "id": "09508a53-5eae-4a5c-9466-0bc198ded92c",
      "name": "Code17",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice Template</title>\n  <style>\n    body { \n      font-family: Arial, sans-serif; \n      max-width: 800px; \n      margin: 0 auto; \n      padding: 20px; \n      background: #ffffff; \n      color: #000000; \n    }\n    .header-section {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 30px;\n      border-bottom: 2px solid #000;\n      padding-bottom: 20px;\n    }\n    .logo-section img {\n      max-height: 80px;\n      max-width: 200px;\n    }\n    .invoice-header { \n      text-align: right;\n      font-size: 28px; \n      font-weight: bold; \n    }\n    .company-info { \n      margin-bottom: 20px; \n      background: #f9f9f9;\n      padding: 15px;\n      border-left: 4px solid #000;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: #000;\n    }\n    .meta-grid { \n      display: grid; \n      grid-template-columns: 1fr 1fr; \n      gap: 20px; \n      margin-bottom: 20px; \n      background: #f5f5f5;\n      padding: 15px;\n    }\n    .customer-section {\n      background: #f9f9f9;\n      padding: 15px;\n      margin-bottom: 20px;\n      border: 1px solid #ddd;\n    }\n    .customer-section h3 {\n      margin: 0 0 10px 0;\n      color: #000;\n      border-bottom: 1px solid #ccc;\n      padding-bottom: 5px;\n    }\n    .items-table { \n      width: 100%; \n      border-collapse: collapse; \n      margin-bottom: 20px; \n    }\n    .items-table th, .items-table td { \n      border: 1px solid #000; \n      padding: 12px 8px; \n      text-align: left; \n    }\n    .items-table th { \n      background: #e0e0e0; \n      font-weight: bold;\n    }\n    .items-table tr:nth-child(even) {\n      background: #f9f9f9;\n    }\n    .total-section { \n      text-align: right; \n      margin-top: 20px; \n      background: #f5f5f5;\n      padding: 20px;\n      border: 1px solid #ddd;\n    }\n    .total-line {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 8px;\n      padding: 5px 0;\n    }\n    .final-total { \n      font-size: 20px; \n      font-weight: bold; \n      margin-top: 15px;\n      padding-top: 15px;\n      border-top: 2px solid #000;\n    }\n    .notes-section {\n      margin-top: 30px;\n      padding: 15px;\n      background: #f9f9f9;\n      border-left: 4px solid #000;\n    }\n    .footer-section {\n      margin-top: 30px;\n      text-align: center;\n      font-size: 12px;\n      color: #666;\n      border-top: 1px solid #ccc;\n      padding-top: 15px;\n    }\n  </style>\n</head>\n<body>\n  <!-- OPTION 1: Replace the invoiceData object below with your actual JSON data -->\n  <script>\n    const invoiceData = {{ $json.formattedResponse.toJsonString() }};\n  </script>\n\n  <div class=\"invoice\">\n    <!-- Header with Logo and Title -->\n    <div class=\"header-section\">\n      <div class=\"logo-section\">\n        <img id=\"company_logo\" src=\"\" alt=\"Company Logo\" style=\"display: none;\" onerror=\"this.style.display='none'\" />\n      </div>\n      <div class=\"invoice-header\" id=\"document_title\">INVOICE (Services)</div>\n    </div>\n\n    <!-- Supplier Information -->\n    <div class=\"company-info\">\n      <h2 id=\"supplier_name\">Company Name</h2>\n      <p id=\"supplier_address\">Company Address</p>\n      <p id=\"supplier_email\">company@email.com</p>\n      <p id=\"supplier_phone\">Phone Number</p>\n      <p><strong>Supplier Number:</strong> <span id=\"supplier_number\">-</span></p>\n    </div>\n\n    <!-- Invoice Meta Information -->\n    <div class=\"meta-grid\">\n      <div>\n        <p><strong>Invoice #:</strong> <span id=\"invoice_number\">-</span></p>\n        <p><strong>Invoice Date:</strong> <span id=\"invoice_date\">-</span></p>\n        <p><strong>Due Date:</strong> <span id=\"due_date\">-</span></p>\n        <p><strong>PO Number:</strong> <span id=\"po_number\">-</span></p>\n        <p><strong>SO/WO Number:</strong> <span id=\"so_or_wo_number\">-</span></p>\n      </div>\n      <div>\n        <p><strong>Delivery / Completion Date:</strong> <span id=\"delivery_or_completion_date\">-</span></p>\n        <p><strong>Currency Unit:</strong> <span id=\"currency_unit\">-</span></p>\n        <p><strong>Shipping / Delivery Terms:</strong> <span id=\"shipping_or_delivery_terms\">-</span></p>\n        <p><strong>Transfer of Rights:</strong> <span id=\"transfer_of_rights_indication\">-</span></p>\n        <p><strong>Payment Terms:</strong> <span id=\"payment_terms\">-</span></p>\n      </div>\n    </div>\n\n    <!-- Customer Information -->\n    <div class=\"customer-section\">\n      <h3>Bill To:</h3>\n      <p><strong><span id=\"customer_name\">Customer Name</span></strong></p>\n      <p><strong>Customer Number:</strong> <span id=\"customer_number\">-</span></p>\n      <p><strong>Customer Account #:</strong> <span id=\"customer_account_number\">-</span></p>\n      <p id=\"customer_address\">Customer Address</p>\n      <p id=\"customer_email\">customer@email.com</p>\n      <p id=\"customer_phone\">Customer Phone</p>\n    </div>\n\n    <!-- Items Table -->\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Product Code</th>\n          <th>Description</th>\n          <th>UoM</th>\n          <th>Quantity</th>\n          <th>Unit Price</th>\n          <th>Line Item Amount</th>\n        </tr>\n      </thead>\n      <tbody id=\"invoice_items\">\n        <tr>\n          <td colspan=\"6\" style=\"text-align: center; font-style: italic; color: #666;\">Loading invoice items...</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Totals Section -->\n    <div class=\"total-section\">\n      <div class=\"total-line\">\n        <span><strong>Subtotal:</strong></span>\n        <span id=\"subtotal\">$0.00</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Discount:</strong></span>\n        <span id=\"discount\">$0.00</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Freight Charges:</strong></span>\n        <span id=\"freight_charges\">$0.00</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Selling Costs:</strong></span>\n        <span id=\"selling_costs\">$0.00</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Tax Details:</strong></span>\n        <span id=\"tax_details\">-</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Tax:</strong></span>\n        <span id=\"tax_amount\">$0.00</span>\n      </div>\n      <div class=\"total-line final-total\">\n        <span><strong>Total Due:</strong></span>\n        <span id=\"total_amount_due\">$0.00</span>\n      </div>\n    </div>\n\n    <!-- Notes Section -->\n    <div class=\"notes-section\">\n      <h4>Notes:</h4>\n      <p id=\"notes_content\">Invoice notes will appear here.</p>\n    </div>\n\n    <!-- Footer -->\n    <div class=\"footer-section\" id=\"footer_content\">\n      <p>Thank you for your business!</p>\n    </div>\n  </div>\n\n  <!-- JavaScript Data Binding -->\n  <script>\n    // Data binding function\n    function bindInvoiceData(invoiceData) {\n      // Apply theme colors if provided\n      if (invoiceData.theme) {\n        const theme = invoiceData.theme;\n        \n        if (theme.primary_color) {\n          document.querySelectorAll('.header-section').forEach(el => {\n            el.style.borderBottomColor = theme.primary_color;\n          });\n          document.querySelectorAll('.company-info').forEach(el => {\n            el.style.borderLeftColor = theme.primary_color;\n          });\n          document.querySelectorAll('.company-info h2').forEach(el => {\n            el.style.color = theme.primary_color;\n          });\n          document.querySelectorAll('.customer-section h3').forEach(el => {\n            el.style.color = theme.primary_color;\n          });\n          document.querySelectorAll('.final-total').forEach(el => {\n            el.style.borderTopColor = theme.primary_color;\n          });\n          document.querySelectorAll('.notes-section').forEach(el => {\n            el.style.borderLeftColor = theme.primary_color;\n          });\n          document.querySelectorAll('.items-table th, .items-table td').forEach(el => {\n            el.style.borderColor = theme.primary_color;\n          });\n        }\n        \n        if (theme.secondary_color) {\n          // Force light colors for print-friendly backgrounds, ignore dark secondary colors\n          const lightSecondaryColor = theme.secondary_color === '#0F172A' ? '#f8fafc' : theme.secondary_color;\n          document.querySelectorAll('.company-info, .meta-grid, .customer-section, .total-section, .notes-section').forEach(el => {\n            el.style.backgroundColor = lightSecondaryColor;\n          });\n          document.querySelectorAll('.items-table tr:nth-child(even)').forEach(el => {\n            el.style.backgroundColor = lightSecondaryColor;\n          });\n        }\n        \n        if (theme.accent_color) {\n          // Force light colors for table headers, ignore dark accent colors\n          const lightAccentColor = theme.accent_color === '#0F172A' ? '#e2e8f0' : theme.accent_color;\n          document.querySelectorAll('.items-table th').forEach(el => {\n            el.style.backgroundColor = lightAccentColor;\n          });\n        }\n        \n        if (theme.background_color) {\n          document.body.style.backgroundColor = theme.background_color;\n        }\n        \n        if (theme.text_color) {\n          document.body.style.color = theme.text_color;\n        }\n      }\n\n      // Bind company logo\n      if (invoiceData.branding && invoiceData.branding.logo_url) {\n        const logoImg = document.getElementById('company_logo');\n        if (logoImg) {\n          logoImg.src = invoiceData.branding.logo_url;\n          logoImg.style.display = 'block';\n        }\n      }\n\n\n      // Bind all simple fields\n      const invoice = invoiceData.invoice;\n      \n      // Header/Meta fields\n      if (invoice && invoice.header) {\n        Object.entries(invoice.header).forEach(([key, val]) => {\n          const el = document.getElementById(key);\n          if (el && val !== null && val !== undefined && val !== \"\") {\n            el.textContent = val;\n          }\n        });\n      }\n\n      // Supplier fields\n      if (invoice && invoice.supplier) {\n        Object.entries(invoice.supplier).forEach(([key, val]) => {\n          const el = document.getElementById(key);\n          if (el && val !== null && val !== undefined && val !== \"\") {\n            el.textContent = val;\n          }\n        });\n      }\n\n      // Customer fields\n      if (invoice && invoice.customer) {\n        Object.entries(invoice.customer).forEach(([key, val]) => {\n          const el = document.getElementById(key);\n          if (el && val !== null && val !== undefined && val !== \"\") {\n            el.textContent = val;\n          }\n        });\n      }\n\n      // Currency symbol\n      const currencySymbol = invoiceData.currency_symbol || '$';\n      \n      // Totals fields with currency\n      if (invoice && invoice.totals) {\n        Object.entries(invoice.totals).forEach(([key, val]) => {\n          const el = document.getElementById(key);\n          if (el && val !== null && val !== undefined) {\n            if (key !== 'tax_details') {\n              // Clean up currency values - remove existing currency symbols\n              let cleanValue = val;\n              if (typeof cleanValue === 'string') {\n                cleanValue = cleanValue.replace(/[$,]/g, '');\n              }\n              const numValue = parseFloat(cleanValue);\n              if (!isNaN(numValue)) {\n                el.textContent = currencySymbol + numValue.toLocaleString();\n              } else {\n                el.textContent = val;\n              }\n            } else {\n              el.textContent = val;\n            }\n          }\n        });\n      }\n\n      // Render items table\n      const tbody = document.getElementById('invoice_items');\n      if (tbody && invoice && invoice.items && invoice.items.length > 0) {\n        tbody.innerHTML = ''; // Clear existing items\n        invoice.items.forEach(item => {\n          const tr = document.createElement('tr');\n          \n          // Clean up unit_price and line_total - remove currency symbols and parse\n          let unitPrice = item.unit_price;\n          let lineTotal = item.line_total;\n          \n          // If the values are strings with currency symbols, clean them\n          if (typeof unitPrice === 'string') {\n            unitPrice = unitPrice.replace(/[$,]/g, '');\n          }\n          if (typeof lineTotal === 'string') {\n            lineTotal = lineTotal.replace(/[$,]/g, '');\n          }\n          \n          // Parse to numbers\n          unitPrice = parseFloat(unitPrice) || 0;\n          lineTotal = parseFloat(lineTotal) || 0;\n          \n          tr.innerHTML = `\n            <td>${item.product_code || ''}</td>\n            <td>${item.description || ''}</td>\n            <td>${item.uom || ''}</td>\n            <td>${item.quantity || ''}</td>\n            <td>${currencySymbol}${unitPrice.toLocaleString()}</td>\n            <td>${currencySymbol}${lineTotal.toLocaleString()}</td>\n          `;\n          tbody.appendChild(tr);\n        });\n      }\n\n      // Handle notes section\n      if (invoiceData.notes) {\n        const notesEl = document.getElementById('notes_content');\n        if (notesEl) notesEl.textContent = invoiceData.notes;\n      }\n\n      // Handle footer\n      if (invoiceData.footer) {\n        const footerEl = document.getElementById('footer_content');\n        if (footerEl) footerEl.innerHTML = invoiceData.footer;\n      }\n    }\n\n    // Auto-bind data when page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      if (typeof invoiceData !== 'undefined') {\n        bindInvoiceData(invoiceData);\n      }\n    });\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1280,
        13900
      ],
      "id": "e1b5fd89-f63b-4020-8f5e-caf22a775701",
      "name": "Edit Fields24"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        13900
      ],
      "id": "3ee64580-0f0e-40bf-97b4-982b14096550",
      "name": "Code18",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Invoice Template</title>\n  <style>\n    body { \n      font-family: Arial, sans-serif; \n      max-width: 800px; \n      margin: 0 auto; \n      padding: 20px; \n      background: #ffffff; \n      color: #000000; \n    }\n    .header-section {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 30px;\n      border-bottom: 2px solid #000;\n      padding-bottom: 20px;\n    }\n    .logo-section img {\n      max-height: 80px;\n      max-width: 200px;\n    }\n    .invoice-header { \n      text-align: right;\n      font-size: 28px; \n      font-weight: bold; \n    }\n    .company-info { \n      margin-bottom: 20px; \n      background: #f9f9f9;\n      padding: 15px;\n      border-left: 4px solid #000;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: #000;\n    }\n    .meta-grid { \n      display: grid; \n      grid-template-columns: 1fr 1fr; \n      gap: 20px; \n      margin-bottom: 20px; \n      background: #f5f5f5;\n      padding: 15px;\n    }\n    .customer-section {\n      background: #f9f9f9;\n      padding: 15px;\n      margin-bottom: 20px;\n      border: 1px solid #ddd;\n    }\n    .customer-section h3 {\n      margin: 0 0 10px 0;\n      color: #000;\n      border-bottom: 1px solid #ccc;\n      padding-bottom: 5px;\n    }\n    .items-table { \n      width: 100%; \n      border-collapse: collapse; \n      margin-bottom: 20px; \n    }\n    .items-table th, .items-table td { \n      border: 1px solid #000; \n      padding: 12px 8px; \n      text-align: left; \n    }\n    .items-table th { \n      background: #e0e0e0; \n      font-weight: bold;\n    }\n    .items-table tr:nth-child(even) {\n      background: #f9f9f9;\n    }\n    .total-section { \n      text-align: right; \n      margin-top: 20px; \n      background: #f5f5f5;\n      padding: 20px;\n      border: 1px solid #ddd;\n    }\n    .total-line {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 8px;\n      padding: 5px 0;\n    }\n    .final-total { \n      font-size: 20px; \n      font-weight: bold; \n      margin-top: 15px;\n      padding-top: 15px;\n      border-top: 2px solid #000;\n    }\n    .notes-section {\n      margin-top: 30px;\n      padding: 15px;\n      background: #f9f9f9;\n      border-left: 4px solid #000;\n    }\n    .footer-section {\n      margin-top: 30px;\n      text-align: center;\n      font-size: 12px;\n      color: #666;\n      border-top: 1px solid #ccc;\n      padding-top: 15px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"invoice\">\n    <!-- Header with Logo and Title -->\n    <div class=\"header-section\">\n      <div class=\"logo-section\">\n        <img id=\"company_logo\" src=\"\" alt=\"Company Logo\" style=\"display: none;\" onerror=\"this.style.display='none'\" />\n      </div>\n      <div class=\"invoice-header\">INVOICE</div>\n    </div>\n\n    <!-- Supplier Information -->\n    <div class=\"company-info\">\n      <h2 id=\"company_name\">Your Company Name</h2>\n      <p id=\"company_address\">123 Business Street</p>\n      <p>City, State 12345</p>\n      <p>Phone: (555) 123-4567</p>\n      <p>Email: billing@yourcompany.com</p>\n      <p id=\"department_name\" style=\"display: none;\"></p>\n    </div>\n\n    <!-- Invoice Meta Information -->\n    <div class=\"meta-grid\">\n      <div>\n        <p><strong>Transaction ID:</strong> <span id=\"transaction_id\">-</span></p>\n        <p><strong>Service Dates:</strong> <span id=\"service_dates\">-</span></p>\n        <p><strong>Source:</strong> <span id=\"source\">-</span></p>\n      </div>\n      <div>\n        <p><strong>File Type:</strong> <span id=\"file_type\">-</span></p>\n        <p><strong>Invoice Date:</strong> <span id=\"invoice_date\">-</span></p>\n        <p><strong>Due Date:</strong> <span id=\"due_date\">-</span></p>\n      </div>\n    </div>\n\n    <!-- Customer Information -->\n    <div class=\"customer-section\">\n      <h3>Bill To:</h3>\n      <p><strong id=\"vendor_name\">Customer Name</strong></p>\n      <p id=\"vendor_address\">Customer Address</p>\n      <p>City, State 12345</p>\n      <p id=\"vendor_email\">customer@email.com</p>\n      <p>(555) 987-6543</p>\n    </div>\n\n    <!-- Items Table -->\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Description</th>\n          <th>Service Period</th>\n          <th>Source</th>\n          <th>Amount</th>\n        </tr>\n      </thead>\n      <tbody id=\"invoice_items\">\n        <tr>\n          <td id=\"item_description\">Professional Services</td>\n          <td id=\"item_service_dates\">-</td>\n          <td id=\"item_source\">-</td>\n          <td id=\"item_amount\">$0.00</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Totals Section -->\n    <div class=\"total-section\">\n      <div class=\"total-line\">\n        <span><strong>Subtotal:</strong></span>\n        <span id=\"subtotal\">$0.00</span>\n      </div>\n      <div class=\"total-line\">\n        <span><strong>Tax (if applicable):</strong></span>\n        <span id=\"tax_amount\">$0.00</span>\n      </div>\n      <div class=\"total-line final-total\">\n        <span><strong>Total Due:</strong></span>\n        <span id=\"total_amount_due\">$0.00</span>\n      </div>\n    </div>\n\n    <!-- Notes Section -->\n    <div class=\"notes-section\">\n      <h4>Payment Information:</h4>\n      <p>Please remit payment within 30 days of invoice date.</p>\n      <p>Thank you for your business!</p>\n    </div>\n\n    <!-- Footer -->\n    <div class=\"footer-section\">\n      <p>Thank you for choosing our services!</p>\n    </div>\n  </div>\n\n  <script>\n    const invoiceData = {{ $json.formattedResponse.toJsonString() }};\n\n    function bindInvoiceData(data) {\n      // Apply branding\n      if (data.branding) {\n        // Apply logo\n        if (data.branding.logo_url) {\n          const logoImg = document.getElementById('company_logo');\n          if (logoImg) {\n            logoImg.src = data.branding.logo_url;\n            logoImg.style.display = 'block';\n          }\n        }\n        \n        // Apply font family\n        if (data.branding.font_family) {\n          document.body.style.fontFamily = data.branding.font_family + \", Arial, sans-serif\";\n        }\n      }\n\n      // Apply colors\n      if (data.colors) {\n        if (data.colors.primary_color) {\n          const primaryColor = data.colors.primary_color;\n          \n          // Apply primary color to borders and accents\n          document.querySelectorAll('.header-section').forEach(el => {\n            el.style.borderBottomColor = primaryColor;\n          });\n          document.querySelectorAll('.company-info').forEach(el => {\n            el.style.borderLeftColor = primaryColor;\n          });\n          document.querySelectorAll('.company-info h2').forEach(el => {\n            el.style.color = primaryColor;\n          });\n          document.querySelectorAll('.customer-section h3').forEach(el => {\n            el.style.color = primaryColor;\n          });\n          document.querySelectorAll('.final-total').forEach(el => {\n            el.style.borderTopColor = primaryColor;\n          });\n          document.querySelectorAll('.notes-section').forEach(el => {\n            el.style.borderLeftColor = primaryColor;\n          });\n          document.querySelectorAll('.items-table th, .items-table td').forEach(el => {\n            el.style.borderColor = primaryColor;\n          });\n        }\n        \n        if (data.colors.secondary_color) {\n          const secondaryColor = data.colors.secondary_color;\n          \n          // For dark colors, use a lighter version for backgrounds\n          const lightSecondaryColor = secondaryColor === '#0F172A' ? '#f8fafc' : secondaryColor;\n          \n          // Apply secondary color to backgrounds\n          document.querySelectorAll('.company-info, .meta-grid, .customer-section, .total-section, .notes-section').forEach(el => {\n            el.style.backgroundColor = lightSecondaryColor;\n          });\n          document.querySelectorAll('.items-table tr:nth-child(even)').forEach(el => {\n            el.style.backgroundColor = lightSecondaryColor;\n          });\n          document.querySelectorAll('.items-table th').forEach(el => {\n            el.style.backgroundColor = lightSecondaryColor;\n          });\n        }\n      }\n\n      // Bind company information\n      if (data.company) {\n        if (data.company.company_name) {\n          document.getElementById('company_name').textContent = data.company.company_name;\n        }\n        if (data.company.company_address) {\n          document.getElementById('company_address').textContent = data.company.company_address;\n        }\n        if (data.company.department_name) {\n          const deptEl = document.getElementById('department_name');\n          deptEl.textContent = data.company.department_name;\n          deptEl.style.display = 'block';\n        }\n      }\n\n      // Bind vendor information\n      if (data.vendor) {\n        if (data.vendor.vendor_name) {\n          document.getElementById('vendor_name').textContent = data.vendor.vendor_name;\n        }\n        if (data.vendor.vendor_address) {\n          document.getElementById('vendor_address').textContent = data.vendor.vendor_address;\n        }\n        if (data.vendor.vendor_email) {\n          document.getElementById('vendor_email').textContent = data.vendor.vendor_email;\n        }\n      }\n\n      // Bind data fields\n      if (data.data) {\n        // Set current date as invoice date\n        const currentDate = new Date().toLocaleDateString();\n        const dueDateObj = new Date();\n        dueDateObj.setDate(dueDateObj.getDate() + 30);\n        const dueDate = dueDateObj.toLocaleDateString();\n        \n        document.getElementById('invoice_date').textContent = currentDate;\n        document.getElementById('due_date').textContent = dueDate;\n        \n        // Bind transaction ID\n        if (data.data.transaction_id) {\n          document.getElementById('transaction_id').textContent = data.data.transaction_id;\n        }\n        \n        // Bind service dates\n        if (data.data.service_dates) {\n          document.getElementById('service_dates').textContent = data.data.service_dates;\n          document.getElementById('item_service_dates').textContent = data.data.service_dates;\n        }\n        \n        // Bind source\n        if (data.data.source) {\n          document.getElementById('source').textContent = data.data.source;\n          document.getElementById('item_source').textContent = data.data.source;\n        }\n        \n        // Bind file type\n        if (data.data.file_type) {\n          document.getElementById('file_type').textContent = data.data.file_type;\n        }\n        \n        // Bind amount\n        if (data.data.amount) {\n          let amount = data.data.amount;\n          \n          // Clean up amount - remove existing currency symbols\n          if (typeof amount === 'string') {\n            amount = amount.replace(/[$,]/g, '');\n          }\n          \n          const numValue = parseFloat(amount);\n          if (!isNaN(numValue)) {\n            const formattedAmount = '$' + numValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\n            \n            document.getElementById('item_amount').textContent = formattedAmount;\n            document.getElementById('subtotal').textContent = formattedAmount;\n            document.getElementById('total_amount_due').textContent = formattedAmount;\n          }\n        }\n      }\n    }\n\n    // Auto-bind data when page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      if (typeof invoiceData !== 'undefined') {\n        bindInvoiceData(invoiceData);\n      }\n    });\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1340,
        14220
      ],
      "id": "9098df05-6a0c-4059-ada0-42cfbbe8c156",
      "name": "Edit Fields25"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        14220
      ],
      "id": "696ea6d9-a8b5-4f91-922a-33cfd03fb459",
      "name": "Code19",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Shipping Document (Sending)</title>\n<style>\n  :root{\n    /* Theme tokens */\n    --background: #f9fafb;\n    --text: #1f2937;\n    --panel: #ffffff;\n    --border: #d1d5db;\n    --header-bg: var(--primary-color);\n    --header-text: #ffffff;\n    --company-name: var(--primary-color);\n    --company-details: #4b5563;\n    --meta-text: #475569;\n    --meta-label: var(--secondary-color);\n    --section-bg: #f3f4f6;\n    --party-bg: #e0e7ff;\n    --party-header: var(--secondary-color);\n    --party-text: #1e293b;\n    --th-bg: #c7d2fe;\n    --th-text: #1e293b;\n    --td-text: #374151;\n    --row-alt: #e0e7ff;\n    --total-bg: var(--primary-color);\n    --total-text: #f9fafb;\n    --final-total: var(--secondary-color);\n    --accent: var(--primary-color);\n    --logo-w: 120px;\n    --logo-h: 60px;\n    --logo-bg: #e0e7ff;\n    --logo-text: transparent;\n  }\n\n  /* Screen layout — centered A4 landscape sheet */\n  body{\n    margin:0; background:var(--background); color:var(--text); font-family: var(--font-family), Arial, Helvetica, sans-serif;\n  }\n  .page{\n    width: 297mm;  /* A4 landscape width */\n    min-height: 210mm;\n    margin: 10mm auto;\n    background: var(--panel);\n    border: 2px solid var(--border);\n    box-shadow: 0 4px 10px rgba(0,0,0,.12);\n    padding: 14mm;\n    box-sizing: border-box;\n  }\n\n  /* Print layout */\n  @page {\n    size: A4 landscape;\n    margin: 10mm;\n  }\n  @media print {\n    body { background: #fff; }\n    .page{\n      margin: 0; border: none; box-shadow: none; width: auto; min-height: auto; padding: 0;\n    }\n    .no-print { display: none !important; }\n    thead { display: table-header-group; } /* repeat header on pages */\n    tr, img { page-break-inside: avoid; }\n  }\n\n  .doc-header{\n    background: var(--header-bg);\n    color: var(--header-text);\n    text-align: center;\n    font-size: 26px;\n    font-weight: bold;\n    letter-spacing: 1.5px;\n    padding: 12px 16px;\n    border-radius: 6px;\n    margin-bottom: 12px;\n  }\n\n  .topbar{\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 16px;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  .logo{\n    width: var(--logo-w);\n    height: var(--logo-h);\n    background: var(--logo-bg);\n    color: var(--logo-text);\n    display: flex; align-items: center; justify-content: center;\n    border-radius: 6px;\n    font-weight: bold;\n    background-image: var(--logo-url);\n    background-size: cover;\n    background-position: center;\n  }\n  .co h2{\n    margin:0 0 6px 0; font-size: 20px; color: var(--company-name);\n  }\n  .co p{ margin: 2px 0; color: var(--company-details); font-size: 12px; }\n\n  .meta{\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px 14px;\n    background: var(--section-bg);\n    padding: 10px;\n    border-radius: 6px;\n    margin: 10px 0 12px 0;\n    font-size: 13px;\n  }\n  .kv .k{ color: var(--meta-label); font-weight: 600; }\n  .kv .v{ color: var(--meta-text); }\n\n  .parties{\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 12px;\n    margin-top: 8px;\n  }\n  .card{\n    background: var(--party-bg);\n    padding: 10px;\n    border-radius: 6px;\n  }\n  .card h3{ margin:0 0 6px 0; color: var(--party-header); font-size: 15px; }\n  .card p{ margin:3px 0; color: var(--party-text); font-size: 12.5px; }\n\n  table{\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 14px;\n    font-size: 13px;\n  }\n  th{\n    background: var(--th-bg);\n    color: var(--th-text);\n    border: 1px solid var(--border);\n    padding: 8px;\n    text-align: left;\n  }\n  td{\n    border: 1px solid var(--border);\n    padding: 8px;\n    color: var(--td-text);\n    vertical-align: top;\n  }\n  tbody tr:nth-child(even){ background: var(--row-alt); }\n  .qty, .price, .amount, .uom, .code { text-align: right; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n\n  .notes{\n    margin-top: 12px;\n    padding: 10px;\n    border-left: 4px solid var(--accent);\n    background: var(--section-bg);\n    font-size: 12.5px;\n    color: var(--meta-text);\n    border-radius: 4px;\n  }\n\n  .signatures{\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 16px;\n    margin-top: 20px;\n  }\n  .sig{\n    border-top: 1px solid var(--border);\n    padding-top: 8px;\n    font-size: 12px;\n    color: var(--meta-text);\n    min-height: 48px;\n  }\n  .sig .label{ color: var(--meta-label); font-weight: 600; display: block; margin-bottom: 4px; }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"doc-header\">SHIPPING DOCUMENT (SENDING)</div>\n\n    <div class=\"topbar\">\n      <div class=\"co\">\n        <h2 id=\"company-name\"></h2>\n        <p id=\"company-address\"></p>\n        <p><span id=\"company-phone\"></span> • <span id=\"company-email\"></span></p>\n      </div>\n      <div class=\"logo\" id=\"logo\"></div>\n    </div>\n\n    <!-- Core meta (Mandatory) -->\n    <div class=\"meta\">\n      <div class=\"kv\"><div class=\"k\">Shipping Doc #</div><div class=\"v\" id=\"shipping-document-number\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Document Date</div><div class=\"v\" id=\"shipping-doc-date\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Order # (PO/SO)</div><div class=\"v\"><span id=\"purchase-order-number\"></span> <span id=\"sales-order-number\"></span></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Shipped</div><div class=\"v\" id=\"date-shipped\"></div></div>\n\n      <div class=\"kv\"><div class=\"k\">Carrier</div><div class=\"v\" id=\"shipping-carrier\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Method</div><div class=\"v\" id=\"shipping-method\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Tracking #</div><div class=\"v\" id=\"tracking-number\"></div></div>\n\n      <!-- Optional quick refs -->\n      <div class=\"kv\"><div class=\"k\">Customer #</div><div class=\"v\" id=\"customer-number\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Supplier #</div><div class=\"v\" id=\"supplier-number\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Date Delivered</div><div class=\"v\" id=\"date-delivered\"></div></div>\n      <div class=\"kv\"><div class=\"k\">Received Date</div><div class=\"v\" id=\"received-date\"></div></div>\n    </div>\n\n    <!-- Parties -->\n    <div class=\"parties\">\n      <div class=\"card\">\n        <h3>Customer (Consignee)</h3>\n        <p><strong id=\"customer-name\"></strong></p>\n        <p id=\"customer-address\"></p>\n        <!-- Optional -->\n        <p><em>Consignee's Name & Address:</em> <span id=\"consignee-name-and-address\"></span></p>\n      </div>\n      <div class=\"card\">\n        <h3>Supplier (Shipper)</h3>\n        <p><strong id=\"supplier-name\"></strong></p>\n        <p id=\"supplier-address\"></p>\n        <!-- Optional -->\n        <p><em>Shipper's Name & Address:</em> <span id=\"shipper-name-and-address\"></span></p>\n      </div>\n    </div>\n\n    <!-- Line Items -->\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:40%\">Product Description</th>\n          <th class=\"code\" style=\"width:12%\">Product Code</th>\n          <th class=\"uom\" style=\"width:8%\">UOM</th>\n          <th class=\"qty\" style=\"width:10%\">Quantity</th>\n          <th class=\"price\" style=\"width:15%\">Unit Price</th>\n          <th class=\"amount\" style=\"width:15%\">Line Amount</th>\n        </tr>\n      </thead>\n      <tbody id=\"line-items-table\">\n      </tbody>\n    </table>\n\n    <!-- Shipment/Logistics (Optional blocks) -->\n    <div class=\"notes\">\n      <strong>Bill of Lading #:</strong> <span id=\"bill-of-lading-number\"></span> &nbsp; | &nbsp;\n      <strong>Packaging:</strong> <span id=\"packaging-details\"></span> &nbsp; | &nbsp;\n      <strong>Insurance:</strong> <span id=\"insurance-details\"></span> &nbsp; | &nbsp;\n      <strong>Customs:</strong> <span id=\"customs-information\"></span> &nbsp; | &nbsp;\n      <strong>Proof of Delivery:</strong> <span id=\"proof-of-delivery\"></span> &nbsp; | &nbsp;\n      <strong>Shipping/Delivery Terms:</strong> <span id=\"shipping-or-delivery-terms\"></span>\n    </div>\n\n    <!-- Signatures -->\n    <div class=\"signatures\">\n      <div class=\"sig\">\n        <span class=\"label\">Prepared By</span>\n        <span id=\"prepared-by\"></span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Carrier Representative</span>\n        <span id=\"carrier-signature\"></span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Received By (Consignee)</span>\n        <span id=\"received-by\"></span>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // JSON data variable - replace this with your actual JSON data\n    const jsonData = {{ $json.formattedResponse.toJsonString() }};\n\n    // Function to populate the document with JSON data\n    function populateDocument(data) {\n      // Set CSS custom properties for colors and branding\n      const root = document.documentElement;\n      root.style.setProperty('--primary-color', data.colors?.primary_color || '#334155');\n      root.style.setProperty('--secondary-color', data.colors?.secondary_color || '#0F172A');\n      root.style.setProperty('--font-family', data.branding?.font_family || 'Inter');\n      root.style.setProperty('--logo-url', `url('${data.branding?.logo_url || ''}')`);\n\n      // Populate company info\n      document.getElementById('company-name').textContent = data.company_info?.company_name || '';\n      document.getElementById('company-address').textContent = data.company_info?.company_address || '';\n      document.getElementById('company-phone').textContent = data.company_info?.company_phone || '';\n      document.getElementById('company-email').textContent = data.company_info?.company_email || '';\n\n      // Populate document details\n      document.getElementById('shipping-document-number').textContent = data.document_details?.shipping_document_number || '';\n      document.getElementById('shipping-doc-date').textContent = data.document_details?.shipping_doc_date || '';\n      document.getElementById('purchase-order-number').textContent = data.document_details?.purchase_order_number || '';\n      document.getElementById('sales-order-number').textContent = data.document_details?.sales_order_number || '';\n      document.getElementById('date-shipped').textContent = data.document_details?.date_shipped || '';\n      document.getElementById('shipping-carrier').textContent = data.document_details?.shipping_carrier || '';\n      document.getElementById('shipping-method').textContent = data.document_details?.shipping_method || '';\n      document.getElementById('tracking-number').textContent = data.document_details?.tracking_number || '';\n      document.getElementById('customer-number').textContent = data.document_details?.customer_number || '';\n      document.getElementById('supplier-number').textContent = data.document_details?.supplier_number || '';\n      document.getElementById('date-delivered').textContent = data.document_details?.date_delivered || '';\n      document.getElementById('received-date').textContent = data.document_details?.received_date || '';\n\n      // Populate parties\n      document.getElementById('customer-name').textContent = data.parties?.customer?.customer_name || '';\n      document.getElementById('customer-address').textContent = data.parties?.customer?.customer_address || '';\n      document.getElementById('consignee-name-and-address').textContent = data.parties?.customer?.consignee_name_and_address || '';\n      document.getElementById('supplier-name').textContent = data.parties?.supplier?.supplier_name || '';\n      document.getElementById('supplier-address').textContent = data.parties?.supplier?.supplier_address || '';\n      document.getElementById('shipper-name-and-address').textContent = data.parties?.supplier?.shipper_name_and_address || '';\n\n      // Populate line items\n      const tableBody = document.getElementById('line-items-table');\n      tableBody.innerHTML = '';\n      \n      if (data.line_items && data.line_items.length > 0) {\n        data.line_items.forEach(item => {\n          const row = document.createElement('tr');\n          \n          // Parse price and calculate if needed\n // Handle both string and number formats for price\nlet unitPrice = 0;\nif (item.item_price) {\n  if (typeof item.item_price === 'string') {\n    unitPrice = parseFloat(item.item_price.replace('$', ''));\n  } else {\n    unitPrice = parseFloat(item.item_price);\n  }\n}\n          const quantity = item.item_quantity ? parseInt(item.item_quantity) : 0;\n          const lineAmount = item.line_item_amount ? item.line_item_amount : `$${(unitPrice * quantity).toLocaleString()}`;\n          \n          row.innerHTML = `\n            <td>${item.product_description || ''}</td>\n            <td class=\"code\">${item.product_code || ''}</td>\n            <td class=\"uom\">${item.unit_of_measurement || 'pcs'}</td>\n            <td class=\"qty\">${item.item_quantity || ''}</td>\n            <td class=\"price\">${item.item_price || '$0.00'}</td>\n            <td class=\"amount\">${lineAmount}</td>\n          `;\n          tableBody.appendChild(row);\n        });\n      }\n\n      // Populate logistics\n      document.getElementById('bill-of-lading-number').textContent = data.logistics?.bill_of_lading_number || 'BOL-394820';\n      document.getElementById('packaging-details').textContent = data.logistics?.packaging_details || 'Crated and Palletized';\n      document.getElementById('insurance-details').textContent = data.logistics?.insurance_details || 'Full Coverage';\n      document.getElementById('customs-information').textContent = data.logistics?.customs_information || 'N/A';\n      document.getElementById('proof-of-delivery').textContent = data.logistics?.proof_of_delivery || 'Pending';\n      document.getElementById('shipping-or-delivery-terms').textContent = data.logistics?.shipping_or_delivery_terms || 'FOB Origin';\n\n      // Populate signatures\n      document.getElementById('prepared-by').textContent = data.signatures?.prepared_by || 'John Anderson';\n      document.getElementById('carrier-signature').textContent = data.signatures?.carrier_signature || 'Rachel Meyers';\n      document.getElementById('received-by').textContent = data.signatures?.received_by || 'Michael Lee';\n    }\n\n    // Populate the document when the page loads\n    document.addEventListener('DOMContentLoaded', function() {\n      populateDocument(jsonData);\n    });\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1340,
        14460
      ],
      "id": "510ddc6d-bdf3-4d14-b75b-8d6fe91d50b8",
      "name": "Edit Fields26"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        14460
      ],
      "id": "13c0c779-771b-47ff-a286-7d6a95380031",
      "name": "Code20",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Shipping Document (Receiving)</title>\n<style>\n  :root{\n    --primary: #2563eb;\n    --secondary: #64748b;\n    --background: #f9fafb;\n    --text: #1e293b;\n    --panel: #ffffff;\n    --border: #cbd5e1;\n    --accent: #2563eb;\n  }\n\n  body{ \n    margin:0; \n    background:var(--background); \n    color:var(--text); \n    font-family: Arial, Helvetica, sans-serif;\n  }\n  \n  .page{\n    width: 297mm; min-height: 210mm; margin: 10mm auto;\n    background: var(--panel); border: 2px solid var(--border); box-shadow: 0 4px 10px rgba(0,0,0,.12);\n    padding: 14mm; box-sizing: border-box;\n  }\n\n  @page { size: A4 landscape; margin: 10mm; }\n  @media print{\n    body{ background:#fff; }\n    .page{ margin:0; border:none; box-shadow:none; width:auto; min-height:auto; padding:0; }\n    .no-print{ display:none !important; }\n    thead{ display: table-header-group; }\n    tr, img{ page-break-inside: avoid; }\n  }\n\n  .doc-header{\n    background: var(--primary); color: white;\n    text-align: center; font-size: 26px; font-weight: bold; letter-spacing: 1.5px;\n    padding: 12px 16px; border-radius: 6px; margin-bottom: 12px;\n  }\n\n  .topbar{\n    display:grid; grid-template-columns: 1fr auto; gap:16px; align-items:center; margin-bottom:10px;\n  }\n  .logo{\n    width: 120px; height: 60px;\n    background: transparent; color: transparent;\n    display:flex; align-items:center; justify-content:center; border-radius:6px; font-weight:bold;\n    background-image:url(''); background-size:cover; background-position:center;\n  }\n  .co h2{ margin:0 0 6px 0; font-size:20px; color:var(--text); }\n  .co p{ margin:2px 0; color:var(--secondary); font-size:12px; }\n\n  .meta{\n    display:grid; grid-template-columns: repeat(4, 1fr);\n    gap:10px 14px; background:#e2e8f0; padding:10px; border-radius:6px; margin:10px 0 12px 0; font-size:13px;\n  }\n  .kv .k{ color:var(--primary); font-weight:600; }\n  .kv .v{ color:var(--secondary); }\n\n  .parties{ display:grid; grid-template-columns:1fr 1fr; gap:12px; margin-top:8px; }\n  .card{ background:#f1f5f9; padding:10px; border-radius:6px; }\n  .card h3{ margin:0 0 6px 0; color:var(--primary); font-size:15px; }\n  .card p{ margin:3px 0; color:var(--secondary); font-size:12.5px; }\n\n  table{ width:100%; border-collapse:collapse; margin-top:14px; font-size:13px; }\n  th{ background:var(--primary); color:white; border:1px solid var(--border); padding:8px; text-align:left; }\n  td{ border:1px solid var(--border); padding:8px; color:var(--text); vertical-align:top; }\n  tbody tr:nth-child(even){ background:#f1f5f9; }\n  .mono{ text-align:right; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }\n\n  .notes, .receiving-notes{\n    margin-top:12px; padding:10px; border-left:4px solid var(--accent); background:#e2e8f0;\n    font-size:12.5px; color:var(--secondary); border-radius:4px;\n  }\n\n  .signatures{ display:grid; grid-template-columns: repeat(3,1fr); gap:16px; margin-top:20px; }\n  .sig{ border-top:1px solid var(--border); padding-top:8px; font-size:12px; color:var(--secondary); min-height:48px; }\n  .sig .label{ color:var(--primary); font-weight:600; display:block; margin-bottom:4px; }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"doc-header\">SHIPPING DOCUMENT (RECEIVING)</div>\n\n    <div class=\"topbar\">\n      <div class=\"co\">\n        <h2 id=\"company_name\">Company Name</h2>\n        <p id=\"company_address\">Company Address</p>\n        <p><span id=\"company_phone\">Phone</span> • <span id=\"company_email\">Email</span></p>\n      </div>\n      <div class=\"logo\" id=\"logo\"></div>\n    </div>\n\n    <div class=\"meta\">\n      <div class=\"kv\"><div class=\"k\">Shipping Doc #</div><div class=\"v\" id=\"shipping_document_number\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Document Date</div><div class=\"v\" id=\"shipping_doc_date\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Order # (PO/SO)</div><div class=\"v\"><span id=\"purchase_order_number\">-</span> <span id=\"sales_order_number\">-</span></div></div>\n      <div class=\"kv\"><div class=\"k\">Carrier</div><div class=\"v\" id=\"shipping_carrier\">-</div></div>\n\n      <div class=\"kv\"><div class=\"k\">Method</div><div class=\"v\" id=\"shipping_method\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Tracking #</div><div class=\"v\" id=\"tracking_number\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Date Shipped</div><div class=\"v\" id=\"date_shipped\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Date Delivered</div><div class=\"v\" id=\"date_delivered\">-</div></div>\n\n      <div class=\"kv\"><div class=\"k\">Received Date</div><div class=\"v\" id=\"received_date\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Proof of Delivery</div><div class=\"v\" id=\"proof_of_delivery\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Bill of Lading #</div><div class=\"v\" id=\"bill_of_lading_number\">-</div></div>\n      <div class=\"kv\"><div class=\"k\">Customer #</div><div class=\"v\" id=\"customer_number\">-</div></div>\n    </div>\n\n    <div class=\"parties\">\n      <div class=\"card\">\n        <h3>Customer / Receiver (Consignee)</h3>\n        <p><strong id=\"customer_name_party\">Customer Name</strong></p>\n        <p id=\"customer_address_party\">Customer Address</p>\n        <p><em>Consignee's Name & Address:</em> <span id=\"consignee_name_and_address\">-</span></p>\n      </div>\n      <div class=\"card\">\n        <h3>Supplier / Shipper</h3>\n        <p><strong id=\"supplier_name\">Supplier Name</strong></p>\n        <p id=\"supplier_address\">Supplier Address</p>\n        <p><em>Shipper's Name & Address:</em> <span id=\"shipper_name_and_address\">-</span></p>\n      </div>\n    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:24%\">Product Description</th>\n          <th style=\"width:10%\">Product Code</th>\n          <th style=\"width:8%\">UOM</th>\n          <th class=\"mono\" style=\"width:10%\">Qty Shipped</th>\n          <th class=\"mono\" style=\"width:10%\">Qty Received</th>\n          <th class=\"mono\" style=\"width:10%\">Damaged Qty</th>\n          <th class=\"mono\" style=\"width:10%\">Short/Over</th>\n          <th style=\"width:18%\">Remarks</th>\n        </tr>\n      </thead>\n      <tbody id=\"receiving_items_table\">\n        <tr>\n          <td>-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td>-</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <table>\n      <thead>\n        <tr>\n          <th style=\"width:20%\">Currency</th>\n          <th class=\"mono\" style=\"width:20%\">Unit Price</th>\n          <th class=\"mono\" style=\"width:20%\">Line Amount</th>\n          <th style=\"width:40%\">Pricing Notes</th>\n        </tr>\n      </thead>\n      <tbody id=\"receiving_amounts_table\">\n        <tr>\n          <td>-</td>\n          <td class=\"mono\">-</td>\n          <td class=\"mono\">-</td>\n          <td>-</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div class=\"notes\">\n      <strong>Packaging:</strong> <span id=\"packaging_details\">-</span> &nbsp; | &nbsp;\n      <strong>Insurance:</strong> <span id=\"insurance_details\">-</span> &nbsp; | &nbsp;\n      <strong>Customs:</strong> <span id=\"customs_information\">-</span> &nbsp; | &nbsp;\n      <strong>Shipping/Delivery Terms:</strong> <span id=\"shipping_or_delivery_terms\">-</span>\n    </div>\n\n    <div class=\"receiving-notes\">\n      <p><strong>Inspection Status:</strong> <span id=\"receiving_inspection_status\">-</span></p>\n      <p><strong>Discrepancy Summary:</strong> <span id=\"receiving_discrepancy_summary\">-</span></p>\n      <p><strong>Condition on Arrival:</strong> <span id=\"receiving_condition_notes\">-</span></p>\n      <p><strong>Additional Notes:</strong> <span id=\"receiving_additional_notes\">-</span></p>\n    </div>\n\n    <div class=\"signatures\">\n      <div class=\"sig\">\n        <span class=\"label\">Received By (Consignee)</span>\n        <span id=\"received_by\">-</span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Checked/Inspected By</span>\n        <span id=\"inspected_by\">-</span>\n      </div>\n      <div class=\"sig\">\n        <span class=\"label\">Carrier Representative</span>\n        <span id=\"carrier_signature\">-</span>\n      </div>\n    </div>\n  </div>\n\n<script>\n// JSON Data Variable - Replace this with your actual JSON data\nconst jsonData = {{ $json.formattedResponse.toJsonString() }} ;\n\nfunction formatCurrency(value, currency = 'USD') {\n  if (!value) return '';\n  const num = parseFloat(value.toString().replace(/[^\\d.-]/g, ''));\n  if (isNaN(num)) return value;\n  return '$' + num.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n}\n\nfunction updateDocument(data) {\n  // Update colors\n  if (data.colors) {\n    const root = document.documentElement;\n    if (data.colors.primary_color) root.style.setProperty('--primary', data.colors.primary_color);\n    if (data.colors.secondary_color) root.style.setProperty('--secondary', data.colors.secondary_color);\n  }\n  \n  // Update branding\n  if (data.branding) {\n    if (data.branding.logo_url) {\n      const logo = document.getElementById('logo');\n      logo.style.backgroundImage = `url('${data.branding.logo_url}')`;\n    }\n    if (data.branding.font_family) {\n      document.body.style.fontFamily = data.branding.font_family;\n    }\n  }\n  \n  // Update company info\n  if (data.company_info) {\n    updateElement('company_name', data.company_info.company_name);\n    updateElement('company_address', data.company_info.company_address);\n    updateElement('company_phone', data.company_info.company_phone);\n    updateElement('company_email', data.company_info.company_email);\n  }\n  \n  // Update document info\n  if (data.document_info) {\n    Object.keys(data.document_info).forEach(key => {\n      updateElement(key, data.document_info[key]);\n    });\n  }\n  \n  // Update parties\n  if (data.parties) {\n    updateElement('customer_name_party', data.parties.customer_name);\n    updateElement('customer_address_party', data.parties.customer_address);\n    updateElement('consignee_name_and_address', data.parties.consignee_name_and_address);\n    updateElement('supplier_name', data.parties.supplier_name);\n    updateElement('supplier_address', data.parties.supplier_address);\n    updateElement('shipper_name_and_address', data.parties.shipper_name_and_address);\n  }\n  \n  // Update receiving items table\n  if (data.receiving_items && data.receiving_items.length > 0) {\n    const tbody = document.getElementById('receiving_items_table');\n    tbody.innerHTML = '';\n    data.receiving_items.forEach(item => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td>${item.product_description || ''}</td>\n        <td class=\"mono\">${item.product_code || ''}</td>\n        <td class=\"mono\">${item.unit_of_measurement || ''}</td>\n        <td class=\"mono\">${item.qty_shipped || ''}</td>\n        <td class=\"mono\">${item.qty_received || ''}</td>\n        <td class=\"mono\">${item.damaged_qty || ''}</td>\n        <td class=\"mono\">${item.short_over || ''}</td>\n        <td>${item.remarks || ''}</td>\n      `;\n      tbody.appendChild(row);\n    });\n  }\n  \n  // Update receiving amounts table\n  if (data.receiving_amounts && data.receiving_amounts.length > 0) {\n    const tbody = document.getElementById('receiving_amounts_table');\n    tbody.innerHTML = '';\n    data.receiving_amounts.forEach(amount => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td>${amount.currency || ''}</td>\n        <td class=\"mono\">${formatCurrency(amount.unit_price)}</td>\n        <td class=\"mono\">${formatCurrency(amount.line_amount)}</td>\n        <td>${amount.pricing_notes || ''}</td>\n      `;\n      tbody.appendChild(row);\n    });\n  }\n  \n  // Update additional info\n  if (data.additional_info) {\n    Object.keys(data.additional_info).forEach(key => {\n      updateElement(key, data.additional_info[key]);\n    });\n  }\n  \n  // Update signatures\n  if (data.signatures) {\n    Object.keys(data.signatures).forEach(key => {\n      updateElement(key, data.signatures[key]);\n    });\n  }\n}\n\nfunction updateElement(id, value) {\n  const element = document.getElementById(id);\n  if (element && value !== undefined && value !== null) {\n    element.textContent = value;\n  }\n}\n\n// Auto-update on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n  updateDocument(jsonData);\n});\n</script>\n\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        14780
      ],
      "id": "a2b652d9-ff4e-4301-9d75-ac40768abe16",
      "name": "Edit Fields27"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1160,
        14780
      ],
      "id": "063ac7de-be4f-4827-87af-2460ac4c063a",
      "name": "Code21",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cc58413-63c7-4085-bd98-9d87569e032b",
              "name": "=html",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Order Document</title>\n  <style>\n    :root {\n      --space: 20px;\n      --primary-color: #334155;\n      --secondary-color: #4338ca;\n      --font-family: Arial;\n    }\n    body {\n      font-family: var(--font-family), Arial, sans-serif;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding: 20px;\n      background-color: #f9fafb;\n      color: #1e293b;\n    }\n    .doc {\n      background: #ffffff;\n      border: 2px solid var(--primary-color);\n      padding: 30px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .doc-header {\n      background: var(--primary-color);\n      color: #ffffff;\n      padding: 20px;\n      margin: -30px -30px 30px -30px;\n      text-align: center;\n      font-size: 28px;\n      font-weight: bold;\n      letter-spacing: 2px;\n    }\n    .subtitle {\n      font-size: 14px;\n      opacity: 0.9;\n      margin-top: 4px;\n      letter-spacing: 1px;\n    }\n    .company-info {\n      margin-bottom: 30px;\n      position: relative;\n      min-height: 70px;\n    }\n    .company-info h2 {\n      margin: 0 0 10px 0;\n      color: var(--primary-color);\n      font-size: 22px;\n    }\n    .company-info p {\n      margin: 2px 0;\n      color: #475569;\n    }\n    .logo {\n      position: absolute;\n      right: 0;\n      top: 0;\n      width: 100px;\n      height: 70px;\n      background: var(--primary-color);\n      color: #ffffff;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n      background-image: url('https://logoipsum.com/wp-content/uploads/2020/07/logo-29.svg');\n      background-size: cover;\n      background-position: center;\n    }\n\n    .order-details {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      margin: 30px 0;\n      background: rgba(67, 56, 202, 0.1);\n      padding: 15px;\n      border-radius: 5px;\n    }\n    .meta p {\n      margin: 6px 0;\n      color: #334155;\n      line-height: 1.25;\n    }\n    .meta strong {\n      color: var(--primary-color);\n    }\n\n    .party-cards {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    .card {\n      background: rgba(67, 56, 202, 0.05);\n      padding: 15px;\n      border-radius: 5px;\n      border-left: 3px solid var(--secondary-color);\n    }\n    .card h3 {\n      margin: 0 0 10px 0;\n      color: var(--primary-color);\n    }\n    .card p {\n      margin: 3px 0;\n      color: #475569;\n    }\n\n    .items-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 30px 0;\n      table-layout: fixed;\n      word-wrap: break-word;\n    }\n    .items-table th {\n      background: var(--primary-color);\n      color: #ffffff;\n      border: 1px solid var(--primary-color);\n      padding: 10px 12px;\n      text-align: left;\n      font-weight: bold;\n    }\n    .items-table td {\n      border: 1px solid #cbd5e1;\n      padding: 10px 12px;\n      color: #1e293b;\n      vertical-align: top;\n    }\n    .items-table tr:nth-child(even) {\n      background: rgba(67, 56, 202, 0.05);\n    }\n    .amount {\n      text-align: right;\n      font-family: monospace;\n      font-weight: bold;\n      white-space: nowrap;\n    }\n\n    .total-section {\n      margin: 30px 0;\n      background: rgba(67, 56, 202, 0.1);\n      padding: 20px;\n      border-radius: 5px;\n      display: grid;\n      gap: 6px;\n      justify-items: end;\n    }\n    .total-section p {\n      margin: 0;\n      font-size: 16px;\n      color: #334155;\n    }\n    .final-total {\n      font-size: 20px;\n      font-weight: bold;\n      color: var(--primary-color);\n      border-top: 2px solid var(--primary-color);\n      padding-top: 10px;\n      margin-top: 6px;\n    }\n\n    .terms, .sign {\n      background: #f1f5f9;\n      padding: 15px;\n      border-left: 4px solid var(--secondary-color);\n      margin: 20px 0 0 0;\n      color: #475569;\n    }\n    .terms h4, .sign h4 {\n      margin: 0 0 10px 0;\n      color: var(--primary-color);\n    }\n    .sign .row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    .sig-line {\n      margin-top: 24px;\n      border-top: 1px solid #cbd5e1;\n      padding-top: 8px;\n      color: #1e293b;\n    }\n\n    @media print {\n      @page { size: A4 landscape; margin: 12mm; }\n      body { max-width: none; padding: 0; background-color: #ffffff; }\n      .doc { box-shadow: none; border: 1px solid var(--primary-color); }\n      .items-table tr, .items-table td, .items-table th { page-break-inside: avoid; }\n      .total-section, .terms, .sign { page-break-inside: avoid; }\n    }\n\n    /* Dynamic color support */\n    .primary-bg { background-color: var(--primary-color); }\n    .secondary-bg { background-color: var(--secondary-color); }\n    .primary-text { color: var(--primary-color); }\n    .secondary-text { color: var(--secondary-color); }\n  </style>\n</head>\n<body>\n  <div class=\"doc\">\n    <div class=\"doc-header\">\n      ORDER DOCUMENT\n      <div class=\"subtitle\">Purchase Order</div>\n    </div>\n\n    <div class=\"company-info\">\n      <div class=\"logo\"></div>\n      <h2 id=\"company-name\">SolarVista Energy</h2>\n      <p id=\"company-address\">123 Business Plaza, Suite 500, Denver, CO 80202</p>\n      <p id=\"company-phone\">Phone: (555) 123-4567</p>\n      <p id=\"company-email\">Email: orders@solarvista.com</p>\n    </div>\n\n    <div class=\"order-details\">\n      <div class=\"meta\">\n        <p><strong>Purchase Order Number:</strong> <span id=\"purchase_order_number\">PO-0021</span></p>\n        <p><strong>Sales Order Number:</strong> <span id=\"sales_order_number\">SO-2024-0158</span></p>\n        <p><strong>Purchase Order Date:</strong> <span id=\"purchase_order_date\">2024-01-03</span></p>\n        <p><strong>Sales Order Date:</strong> <span id=\"sales_order_date\">2024-01-02</span></p>\n        <p><strong>Delivery Date:</strong> <span id=\"delivery_date\">2024-01-09</span></p>\n        <p><strong>Currency Unit:</strong> <span id=\"currency_unit\">USD ($)</span></p>\n      </div>\n      <div class=\"meta\">\n        <p><strong>Supplier Number:</strong> <span id=\"supplier_number\">SUPP-001</span></p>\n        <p><strong>Customer Number:</strong> <span id=\"customer_number\">CUST-SVE-001</span></p>\n        <p><strong>Shipping Terms:</strong> <span id=\"shipping_terms\">FOB Destination</span></p>\n        <p><strong>Payment Terms:</strong> <span id=\"payment_terms\">Net 45</span></p>\n      </div>\n    </div>\n\n    <div class=\"party-cards\">\n      <div class=\"card\">\n        <h3>Supplier</h3>\n        <p><strong>Name:</strong> <span id=\"supplier_name\">Valarix Supplies</span></p>\n        <p><strong>Address:</strong> <span id=\"supplier_address\">650 Market St, Denver, CO 80203</span></p>\n      </div>\n      <div class=\"card\">\n        <h3>Customer</h3>\n        <p><strong>Name:</strong> <span id=\"customer_name\">SolarVista Energy</span></p>\n        <p><strong>Address:</strong> <span id=\"customer_address\">123 Business Plaza, Suite 500, Denver, CO 80202</span></p>\n      </div>\n    </div>\n\n    <table class=\"items-table\">\n      <thead>\n        <tr>\n          <th>Product Description</th>\n          <th>Quantity</th>\n          <th>Unit</th>\n          <th>Unit Price</th>\n          <th>Line Total</th>\n          <th>Product Code</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>High-efficiency solar panels (Model X2), partial procurement for initial installation phase.</td>\n          <td class=\"amount\">99</td>\n          <td>Units</td>\n          <td class=\"amount\">$301.00</td>\n          <td class=\"amount\">$29,799.00</td>\n          <td>SP-X2-300W</td>\n        </tr>\n        <tr>\n          <td>Mounting hardware and installation brackets for solar panel system.</td>\n          <td class=\"amount\">99</td>\n          <td>Sets</td>\n          <td class=\"amount\">$45.00</td>\n          <td class=\"amount\">$4,455.00</td>\n          <td>MH-BRKT-STD</td>\n        </tr>\n        <tr>\n          <td>DC to AC inverters for solar energy conversion (high efficiency model).</td>\n          <td class=\"amount\">12</td>\n          <td>Units</td>\n          <td class=\"amount\">$850.00</td>\n          <td class=\"amount\">$10,200.00</td>\n          <td>INV-HE-5000</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div class=\"total-section\">\n      <p><strong>Subtotal:</strong> <span id=\"subtotal\">$44,454.00</span></p>\n      <p><strong>Tax (5%):</strong> <span id=\"tax\">$2,222.70</span></p>\n      <p><strong>Freight Charges:</strong> <span id=\"freight_charges\">$750.00</span></p>\n      <p><strong>Discount:</strong> <span id=\"discount\">$0.00</span></p>\n      <p class=\"final-total\"><strong>Total:</strong> <span id=\"total_value\">$47,426.70</span></p>\n    </div>\n\n    <div class=\"terms\">\n      <h4>Terms and Conditions</h4>\n      <div id=\"terms_conditions\">\n        All goods remain the property of the supplier until payment is received in full. \n        Delivery terms are FOB destination. Any damages must be reported within 48 hours of delivery. \n        Payment is due within 45 days of invoice date. Late payments may incur a 1.5% monthly service charge.\n        All returns require prior authorization and are subject to a 15% restocking fee.\n      </div>\n    </div>\n\n    <div class=\"sign\">\n      <h4>Signatures</h4>\n      <div class=\"row\">\n        <div>\n          <div class=\"sig-line\">Authorized Signatory (Supplier)</div>\n          <div>Name: <span id=\"supplier_signatory_name\">Michael Rodriguez</span></div>\n          <div>Date: <span id=\"supplier_sign_date\">2024-01-03</span></div>\n        </div>\n        <div>\n          <div class=\"sig-line\">Authorized Signatory (Customer)</div>\n          <div>Name: <span id=\"customer_signatory_name\">Sarah Chen</span></div>\n          <div>Date: <span id=\"customer_sign_date\">2024-01-03</span></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Function to populate document with JSON data\n    function renderOrderDocument(jsonData) {\n      // Helper function to add $ prefix if not present\n      function formatCurrency(value) {\n        if (!value) return '$0.00';\n        const numStr = value.toString().replace(/[$,]/g, '');\n        const num = parseFloat(numStr);\n        return isNaN(num) ? value : '$' + num.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\n      }\n\n      // Update CSS variables for colors\n      if (jsonData.colors || jsonData.document_style) {\n        const colors = jsonData.colors || jsonData.document_style;\n        if (colors.primary_color) {\n          document.documentElement.style.setProperty('--primary-color', colors.primary_color);\n        }\n        if (colors.secondary_color) {\n          document.documentElement.style.setProperty('--secondary-color', colors.secondary_color);\n        }\n      }\n\n      if (jsonData.branding && jsonData.branding.font_family) {\n        document.documentElement.style.setProperty('--font-family', jsonData.branding.font_family);\n      }\n\n      // Update logo\n      if (jsonData.branding && jsonData.branding.logo_url) {\n        const logoElement = document.querySelector('.logo');\n        if (logoElement) {\n          logoElement.style.backgroundImage = `url('${jsonData.branding.logo_url}')`;\n        }\n      }\n\n      // Update company information\n      if (jsonData.company) {\n        const companyName = document.getElementById('company-name');\n        const companyAddress = document.getElementById('company-address');\n        const companyPhone = document.getElementById('company-phone');\n        const companyEmail = document.getElementById('company-email');\n        \n        if (companyName) companyName.textContent = jsonData.company.company_name || 'SolarVista Energy';\n        if (companyAddress) companyAddress.textContent = jsonData.company.company_address || '123 Business Plaza, Suite 500, Denver, CO 80202';\n        if (companyPhone) companyPhone.textContent = jsonData.company.company_phone || 'Phone: (555) 123-4567';\n        if (companyEmail) companyEmail.textContent = jsonData.company.company_email || 'Email: orders@solarvista.com';\n      }\n\n      // Update purchase order details\n      if (jsonData.purchase_order) {\n        const po = jsonData.purchase_order;\n        document.getElementById('purchase_order_number').textContent = po.purchase_order_number || 'PO-0021';\n        document.getElementById('purchase_order_date').textContent = po.purchase_order_date || '2024-01-03';\n        document.getElementById('sales_order_number').textContent = po.sales_order_number || 'SO-2024-0158';\n        document.getElementById('sales_order_date').textContent = po.sales_order_date || '2024-01-02';\n        document.getElementById('delivery_date').textContent = po.delivery_date || '2024-01-09';\n        document.getElementById('currency_unit').textContent = po.currency_unit || 'USD ($)';\n        document.getElementById('supplier_number').textContent = po.supplier_number || 'SUPP-001';\n        document.getElementById('customer_number').textContent = po.customer_number || 'CUST-SVE-001';\n        document.getElementById('shipping_terms').textContent = po.shipping_terms || 'FOB Destination';\n        document.getElementById('payment_terms').textContent = po.payment_terms || 'Net 45';\n      }\n\n      // Update supplier and customer information\n      if (jsonData.supplier) {\n        document.getElementById('supplier_name').textContent = jsonData.supplier.supplier_name || jsonData.supplier.name || 'Valarix Supplies';\n        document.getElementById('supplier_address').textContent = jsonData.supplier.supplier_address || jsonData.supplier.address || '650 Market St, Denver, CO 80203';\n      }\n\n      if (jsonData.customer) {\n        document.getElementById('customer_name').textContent = jsonData.customer.customer_name || jsonData.customer.name || 'SolarVista Energy';\n        document.getElementById('customer_address').textContent = jsonData.customer.customer_address || jsonData.customer.address || '123 Business Plaza, Suite 500, Denver, CO 80202';\n      }\n\n      // Update items table\n      if (jsonData.items && jsonData.items.length > 0) {\n        const tbody = document.querySelector('.items-table tbody');\n        if (tbody) {\n          tbody.innerHTML = '';\n          jsonData.items.forEach(item => {\n            const row = document.createElement('tr');\n            row.innerHTML = `\n              <td>${item.description || ''}</td>\n              <td class=\"amount\">${item.quantity || ''}</td>\n              <td>${item.unit_of_measure || item.unit || 'Units'}</td>\n              <td class=\"amount\">${formatCurrency(item.unit_price)}</td>\n              <td class=\"amount\">${formatCurrency(item.line_total)}</td>\n              <td>${item.product_code || item.item_id || ''}</td>\n            `;\n            tbody.appendChild(row);\n          });\n        }\n      }\n\n      // Update totals\n      if (jsonData.totals) {\n        document.getElementById('subtotal').textContent = formatCurrency(jsonData.totals.subtotal);\n        document.getElementById('tax').textContent = formatCurrency(jsonData.totals.tax);\n        document.getElementById('freight_charges').textContent = formatCurrency(jsonData.totals.freight_charges);\n        document.getElementById('discount').textContent = formatCurrency(jsonData.totals.discount);\n        document.getElementById('total_value').textContent = formatCurrency(jsonData.totals.total_value);\n      }\n\n      // Update terms and conditions\n      if (jsonData.terms_conditions) {\n        document.getElementById('terms_conditions').textContent = jsonData.terms_conditions;\n      }\n\n      // Update signatures\n      if (jsonData.signatures) {\n        document.getElementById('supplier_signatory_name').textContent = jsonData.signatures.supplier_signatory_name || 'Michael Rodriguez';\n        document.getElementById('supplier_sign_date').textContent = jsonData.signatures.supplier_sign_date || '2024-01-03';\n        document.getElementById('customer_signatory_name').textContent = jsonData.signatures.customer_signatory_name || 'Sarah Chen';\n        document.getElementById('customer_sign_date').textContent = jsonData.signatures.customer_sign_date || '2024-01-03';\n      }\n    }\n\n    // Sample data with complete information\n    const sampleData ={{ $json.formattedResponse.toJsonString() }} ;\n\n    // Make functions globally available\n    window.renderOrderDocument = renderOrderDocument;\n\n    // Load the sample data on page load\n    document.addEventListener('DOMContentLoaded', function() {\n      renderOrderDocument(sampleData);\n    });\n  </script>\n</body>\n</html>",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1380,
        15040
      ],
      "id": "48d46798-fbb4-4da0-9e4f-966c17869871",
      "name": "Edit Fields28"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1180,
        15040
      ],
      "id": "362969e8-5076-44bd-adea-2c6e74226596",
      "name": "Code22",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "94d0b360-b005-4dac-82e9-4f31fad3d382",
              "name": "company",
              "value": "={{ $json.input_config.stage1.companies[0] }}",
              "type": "object"
            },
            {
              "id": "4b5fe273-05f5-4869-8d4e-c4184b57b72e",
              "name": "clean_document_data",
              "value": "={{ $json.cleansimulation.simulationRuns[0].generatedDocuments }}",
              "type": "array"
            },
            {
              "id": "a6908ae3-3525-4b62-9d64-5b200fed01d7",
              "name": "company_profile",
              "value": "={{ $json.document_data.companyProfile }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3040,
        13580
      ],
      "id": "de354a4d-b86c-4d4e-9c2f-7d18956f785f",
      "name": "Edit Fields29",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2840,
        13720
      ],
      "id": "2687b90d-f3b5-4741-8bf5-30e3d98530e4",
      "name": "Merge5"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.simulations }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "03b76d57-096f-4cc4-910d-4d3a30f37478"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c1fd9088-d987-47e1-bb98-73aaa21c35a0",
                    "leftValue": "={{ $json.clean_document_data }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2020,
        13840
      ],
      "id": "9450f778-b1f5-4673-af81-b41c1779c83f",
      "name": "Switch1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "clean_document_data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1740,
        13960
      ],
      "id": "2b449660-83b6-4b41-a125-626581be62a9",
      "name": "Split Out8"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "={{ Object.keys($binary).join(',') }}",
        "fileName": "={{ $runIndex === 0 \n    ? $('Switch3').first().json.companyProfile.company_name + '_'+ $now.format('yyyy-MM-dd') +'_Clean.zip' \n    : $('Switch3').first().json.companyProfile.company_name + '_'+$now.format('yyyy-MM-dd') +'.zip' \n}}"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        4060,
        15300
      ],
      "id": "4c16a135-5a15-4ea8-afc0-673f83f18bbf",
      "name": "Compression2"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -1620,
        13580
      ],
      "id": "07120ebc-f819-415f-9e37-1b1913e98e8f",
      "name": "Aggregate4"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "cleanpdffiles",
        "options": {
          "fileName": "={{ $('If5').item.json.file_name+'_clean.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3820,
        13340
      ],
      "id": "da321c7a-359c-4bbe-ac17-e64eb699997a",
      "name": "Convert to File17"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3480,
        13260
      ],
      "id": "3949f6f7-258b-483d-9d1d-ac48a4213851",
      "name": "Merge6"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "bPa7I8nxXuxdQ2ll",
          "mode": "list",
          "cachedResultName": "Simthetic New"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2500,
        1080
      ],
      "id": "633045bf-e0a4-42c4-88ac-37804e34c8db",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -5020,
        13700
      ],
      "id": "46d878f7-f275-4251-bdee-bc36df35c29f",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 10,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $('Edit Fields5').item.json.project_id }}"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "files",
            "cleanpdffiles",
            "file_name"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1840,
        5320
      ],
      "id": "20924290-6434-4c83-8f4d-23ed3a701b27",
      "name": "Select rows from a table7",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "03ce2801-589f-46d4-93b7-09dcce417d46",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "d2c6b351-7769-4a81-ab16-9b535b06ae33",
              "leftValue": "={{ $json.cleanpdffiles }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1620,
        5320
      ],
      "id": "f6467e86-a859-496e-8f74-8716bbc38059",
      "name": "If6"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "files",
        "options": {
          "fileName": "={{ $json.file_name+'.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1060,
        4800
      ],
      "id": "593d054e-5153-4292-8016-cc54244c9dec",
      "name": "Convert to File26"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "cleanpdffiles",
        "options": {
          "fileName": "={{ $('If6').item.json.file_name+'_clean.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1080,
        4960
      ],
      "id": "1fe84639-39f2-49ed-9b93-620f366c39dc",
      "name": "Convert to File27"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        320,
        4680
      ],
      "id": "fe862509-a7ee-41a6-a10d-1f61f6f071fc",
      "name": "Merge7"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"Oops\": \"PDF Generations still in process. Come back later 😀\"\n\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1400,
        5420
      ],
      "id": "758bf11c-f8ed-467e-910f-5991425baaf5",
      "name": "Edit Fields13"
    }
  ],
  "pinData": {
    "OpenAI": [
      {
        "json": {
          "id": "chatcmpl-C9xRK3ugvrU6FdJ0gYUSMSQUPlpcH",
          "object": "chat.completion",
          "created": 1756489474,
          "model": "gpt-4.1-2025-04-14",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": {
                  "simulationProject": "Docent Project - Docent Scenario",
                  "companyProfile": {
                    "company_name": "NeuroSynth MedTech",
                    "industry": "healthcare",
                    "region": "United States",
                    "fiscal_year_end": "December 31",
                    "business_context": {
                      "ticker": null,
                      "sector": "Other",
                      "market_cap": null,
                      "primary_products": [
                        "Booking platform",
                        "Practice mgmt"
                      ],
                      "business_model": "Subscription-based",
                      "regulatory_environment": "HIPAA, HITECH",
                      "known_risks": [
                        "PHI handling",
                        "chargebacks/rebates",
                        "cutoff errors",
                        "missing documentation"
                      ],
                      "description": "NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.",
                      "revenue_model": "subscription",
                      "geographic_footprint": [
                        "United States"
                      ],
                      "key_customers": [
                        "clinics",
                        "hospitals"
                      ],
                      "seasonal_patterns": false,
                      "prior_audit_findings": null,
                      "management_integrity_concerns": null,
                      "internal_control_maturity": "developing"
                    },
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "modern"
                    },
                    "revenue_model": "subscription",
                    "company_specific_risks": null,
                    "vendors": [
                      {
                        "name": "Synetix Global",
                        "entity_type": "vendor",
                        "industry": "healthcare",
                        "address": "575 Market St, Denver, CO",
                        "tags": [
                          "preferred",
                          "net30"
                        ],
                        "metadata": {},
                        "branding": {
                          "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                          "primary_color": "#334155",
                          "secondary_color": "#0F172A",
                          "font_family": "Inter",
                          "document_style": "formal"
                        }
                      }
                    ],
                    "banks": [
                      {
                        "name": "RiverRock Bank",
                        "entity_type": "bank",
                        "industry": "Financials",
                        "address": "383 Main Ave, Evergreen, CO",
                        "tags": [
                          "primary"
                        ],
                        "metadata": {},
                        "branding": {
                          "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg",
                          "primary_color": "#334155",
                          "secondary_color": "#0F172A",
                          "font_family": "Inter",
                          "document_style": "formal"
                        }
                      }
                    ],
                    "shipping_partners": [
                      {
                        "name": "SwiftShip Logistics",
                        "entity_type": "shipper",
                        "industry": "Logistics",
                        "address": "1251 Freight Rd, Denver, CO",
                        "tags": [
                          "ground",
                          "tracking"
                        ],
                        "metadata": {},
                        "branding": {
                          "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                          "primary_color": "#334155",
                          "secondary_color": "#0F172A",
                          "font_family": "Inter",
                          "document_style": "formal"
                        }
                      }
                    ]
                  },
                  "processedRuns": [
                    {
                      "simulationId": "Sim Run 1",
                      "analysis": {
                        "documentTypes": [
                          "Order Document (Sales and Purchases)",
                          "Invoice",
                          "Bank Statement"
                        ],
                        "relationships": [
                          {
                            "type": "cross_reference",
                            "fields": [
                              "Invoice.Purchase_Order_Number",
                              "Order Document.Purchase_Order_Number"
                            ],
                            "description": "Invoice PO Number should match the Order Document PO Number."
                          }
                        ],
                        "errorStrategy": "No errors applied as this run is a baseline reference.",
                        "totalErrorsToInject": 0
                      },
                      "processedDocuments": {
                        "Order Document (Sales and Purchases)": [
                          {
                            "docId": "PO-1001",
                            "docType": "Order Document (Sales and Purchases)",
                            "data": {
                              "Purchase_Order_Number": "PO-1001",
                              "Purchase_Order_Date": "2024-10-01",
                              "Supplier_Name": "Synetix Global",
                              "Customer_Name": "NeuroSynth MedTech",
                              "Item_Quantity": 50,
                              "Product_Description": "Neuro-imaging sensors",
                              "Unit_of_measurement": "units",
                              "Currency_Unit": "USD",
                              "Item_Price": 200,
                              "Total_Purchase_Order_Value": 10000,
                              "Delivery_Date": "2024-10-05",
                              "Source": "Internal",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ],
                        "Invoice": [
                          {
                            "docId": "INV-2001",
                            "docType": "Invoice",
                            "data": {
                              "Invoice_Number": "INV-2001",
                              "Date_of_Invoice": "2024-10-06",
                              "Supplier_Name": "Synetix Global",
                              "Product_Description": "Neuro-imaging sensors",
                              "Item_Quantity": 50,
                              "Item_Price": 200,
                              "Total_Amount_Due": 10000,
                              "Purchase_Order_Number": "PO-1001",
                              "Delivery_/_Completion_Date": "2024-10-05",
                              "Currency_Unit": "USD",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ],
                        "Bank Statement": [
                          {
                            "docId": "BANK-3001",
                            "docType": "Bank Statement",
                            "data": {
                              "Account_Number": "111222333",
                              "Statement_Period": "2024-10-01 to 2024-10-31",
                              "Opening_or_Beginning_or_Previous_Balance": 50000,
                              "Closing_or_Ending_Balance": 40000,
                              "Deposit_or_Credit_Totals": 15000,
                              "Withdrawal_or_Debit_Totals": 10000,
                              "Transactional_Details": "Payment to Synetix Global INV-2001",
                              "Date_of_transaction": "2024-10-10",
                              "Transaction_Number": "TXN-5001",
                              "Balance": 40000,
                              "Bank_name": "RiverRock Bank",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ]
                      },
                      "errorSummary": {
                        "totalErrorsInjected": 0,
                        "errorsByType": {
                          "Missing": 0,
                          "Invalid": 0,
                          "Mismatch": 0,
                          "Incorrect": 0,
                          "Negative": 0
                        },
                        "crossDocumentErrors": []
                      }
                    },
                    {
                      "simulationId": "Sim Run 2",
                      "analysis": {
                        "documentTypes": [
                          "Order Document (Sales and Purchases)",
                          "Invoice",
                          "Bank Statement"
                        ],
                        "relationships": [
                          {
                            "type": "cross_reference",
                            "fields": [
                              "Invoice.Purchase_Order_Number",
                              "Order Document.Purchase_Order_Number"
                            ],
                            "description": "Invoices should reference the correct purchase order."
                          }
                        ],
                        "errorStrategy": "Introduce mismatches and invalid entries for testing.",
                        "totalErrorsToInject": 4
                      },
                      "processedDocuments": {
                        "Order Document (Sales and Purchases)": [
                          {
                            "docId": "PO-2002",
                            "docType": "Order Document (Sales and Purchases)",
                            "data": {
                              "Purchase_Order_Number": "PO-2002",
                              "Purchase_Order_Date": "2024-11-01",
                              "Supplier_Name": "Synetix Global",
                              "Customer_Name": "NeuroSynth MedTech",
                              "Item_Quantity": 100,
                              "Product_Description": "Neuro-imaging sensors",
                              "Unit_of_measurement": "units",
                              "Currency_Unit": "USD",
                              "Item_Price": 150,
                              "Total_Purchase_Order_Value": 15000,
                              "Delivery_Date": "2024-11-05",
                              "Source": "Internal",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ],
                        "Invoice": [
                          {
                            "docId": "INV-3001",
                            "docType": "Invoice",
                            "data": {
                              "Invoice_Number": "INV-3001",
                              "Date_of_Invoice": "2024-11-05",
                              "Supplier_Name": "Synetix Global",
                              "Product_Description": "Neuro-imaging sensors",
                              "Item_Quantity": 60,
                              "Item_Price": 150,
                              "Total_Amount_Due": 9000,
                              "Purchase_Order_Number": "PO-2002",
                              "Delivery_/_Completion_Date": "2024-11-05",
                              "Currency_Unit": "USD",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          },
                          {
                            "docId": "INV-3002",
                            "docType": "Invoice",
                            "data": {
                              "Invoice_Number": "INV-INVALID",
                              "Date_of_Invoice": "2024-11-10",
                              "Supplier_Name": "Synetix Global",
                              "Product_Description": "Neuro-imaging sensors",
                              "Item_Quantity": 40,
                              "Item_Price": 150,
                              "Total_Amount_Due": 6010,
                              "Purchase_Order_Number": "INVALID-PO-2002",
                              "Delivery_/_Completion_Date": "2024-11-10",
                              "Currency_Unit": "USD",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [
                              "Invalid",
                              "Mismatch"
                            ],
                            "_metadata": {
                              "originalValues": {
                                "Invoice_Number": "INV-3002",
                                "Purchase_Order_Number": "PO-2002",
                                "Total_Amount_Due": 6000
                              },
                              "errorsApplied": [
                                {
                                  "field": "Invoice_Number",
                                  "type": "Invalid",
                                  "originalValue": "INV-3002",
                                  "errorValue": "INV-INVALID",
                                  "reason": "Invalid formatting per error spectrum."
                                },
                                {
                                  "field": "Purchase_Order_Number",
                                  "type": "Invalid",
                                  "originalValue": "PO-2002",
                                  "errorValue": "INVALID-PO-2002",
                                  "reason": "Invalid formatting to simulate misreference."
                                },
                                {
                                  "field": "Total_Amount_Due",
                                  "type": "Mismatch",
                                  "originalValue": 6000,
                                  "errorValue": 6010,
                                  "reason": "Introduced mismatch for audit testing."
                                }
                              ],
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ],
                        "Bank Statement": [
                          {
                            "docId": "BANK-4001",
                            "docType": "Bank Statement",
                            "data": {
                              "Account_Number": "111222333",
                              "Statement_Period": "2024-11-01 to 2024-11-15",
                              "Opening_or_Beginning_or_Previous_Balance": 40000,
                              "Closing_or_Ending_Balance": 31000,
                              "Deposit_or_Credit_Totals": 0,
                              "Withdrawal_or_Debit_Totals": 9000,
                              "Transactional_Details": "Payment INV-3001 to Synetix Global",
                              "Date_of_transaction": "2024-11-15",
                              "Transaction_Number": "TXN-6001",
                              "Balance": 31000,
                              "Bank_name": "RiverRock Bank",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          },
                          {
                            "docId": "BANK-4002",
                            "docType": "Bank Statement",
                            "data": {
                              "Account_Number": "111222333",
                              "Statement_Period": "2024-11-16 to 2024-11-30",
                              "Opening_or_Beginning_or_Previous_Balance": 31000,
                              "Closing_or_Ending_Balance": 24990,
                              "Deposit_or_Credit_Totals": 0,
                              "Withdrawal_or_Debit_Totals": 6010,
                              "Transactional_Details": "Payment INV-INVALID to Synetix Global",
                              "Date_of_transaction": "2024-11-16",
                              "Transaction_Number": "TXN-6002",
                              "Balance": 24990,
                              "Bank_name": "RiverRock Bank",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [
                              "Invalid",
                              "Mismatch"
                            ],
                            "_metadata": {
                              "originalValues": {
                                "Closing_or_Ending_Balance": 25000,
                                "Withdrawal_or_Debit_Totals": 6000,
                                "Transactional_Details": "Payment INV-3002 to Synetix Global"
                              },
                              "errorsApplied": [
                                {
                                  "field": "Withdrawal_or_Debit_Totals",
                                  "type": "Mismatch",
                                  "originalValue": 6000,
                                  "errorValue": 6010,
                                  "reason": "Adjusted amount to simulate mismatched payment."
                                },
                                {
                                  "field": "Transactional_Details",
                                  "type": "Invalid",
                                  "originalValue": "Payment INV-3002 to Synetix Global",
                                  "errorValue": "Payment INV-INVALID to Synetix Global",
                                  "reason": "Simulate invalid reference in transaction details."
                                }
                              ],
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ]
                      },
                      "errorSummary": {
                        "totalErrorsInjected": 4,
                        "errorsByType": {
                          "Missing": 0,
                          "Invalid": 3,
                          "Mismatch": 3,
                          "Incorrect": 0,
                          "Negative": 0
                        },
                        "crossDocumentErrors": [
                          {
                            "description": "Invoice number INVALID in bank statement transactions.",
                            "affectedDocuments": [
                              "INV-3002",
                              "BANK-4002"
                            ],
                            "fields": [
                              "Invoice_Number",
                              "Transactional_Details"
                            ]
                          },
                          {
                            "description": "Bank withdrawal and invoice amount mismatch.",
                            "affectedDocuments": [
                              "INV-3002",
                              "BANK-4002"
                            ],
                            "fields": [
                              "Total_Amount_Due",
                              "Withdrawal_or_Debit_Totals"
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "simulationId": "Sim Run 3",
                      "analysis": {
                        "documentTypes": [
                          "Order Document (Sales and Purchases)",
                          "Invoice",
                          "Bank Statement"
                        ],
                        "relationships": [
                          {
                            "type": "cross_reference",
                            "fields": [
                              "Invoice.Purchase_Order_Number",
                              "Order Document.Purchase_Order_Number"
                            ],
                            "description": "Invoice should consolidate and reference multiple purchase orders."
                          }
                        ],
                        "errorStrategy": "Introduce incorrect amounts and mismatched PO references.",
                        "totalErrorsToInject": 3
                      },
                      "processedDocuments": {
                        "Order Document (Sales and Purchases)": [
                          {
                            "docId": "PO-3003",
                            "docType": "Order Document (Sales and Purchases)",
                            "data": {
                              "Purchase_Order_Number": "PO-3003",
                              "Purchase_Order_Date": "2024-12-01",
                              "Supplier_Name": "Synetix Global",
                              "Customer_Name": "NeuroSynth MedTech",
                              "Item_Quantity": 30,
                              "Product_Description": "Neuro-imaging sensors",
                              "Unit_of_measurement": "units",
                              "Currency_Unit": "USD",
                              "Item_Price": 250,
                              "Total_Purchase_Order_Value": 7500,
                              "Delivery_Date": "2024-12-05",
                              "Source": "Internal",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          },
                          {
                            "docId": "PO-3004",
                            "docType": "Order Document (Sales and Purchases)",
                            "data": {
                              "Purchase_Order_Number": "PO-3004",
                              "Purchase_Order_Date": "2024-12-03",
                              "Supplier_Name": "Synetix Global",
                              "Customer_Name": "NeuroSynth MedTech",
                              "Item_Quantity": 20,
                              "Product_Description": "Neuro-imaging sensors",
                              "Unit_of_measurement": "units",
                              "Currency_Unit": "USD",
                              "Item_Price": 250,
                              "Total_Purchase_Order_Value": 5000,
                              "Delivery_Date": "2024-12-07",
                              "Source": "Internal",
                              "File_Type": "PDF"
                            },
                            "_errors": [],
                            "_metadata": {
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ],
                        "Invoice": [
                          {
                            "docId": "INV-4001",
                            "docType": "Invoice",
                            "data": {
                              "Invoice_Number": "INV-4001",
                              "Date_of_Invoice": "2024-12-08",
                              "Supplier_Name": "Synetix Global",
                              "Product_Description": "Neuro-imaging sensors",
                              "Item_Quantity": 50,
                              "Item_Price": 250,
                              "Total_Amount_Due": 12520,
                              "Purchase_Order_Number": "PO-3003;INVALID-PO-3004",
                              "Delivery_/_Completion_Date": "2024-12-07",
                              "Currency_Unit": "USD",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [
                              "Mismatch"
                            ],
                            "_metadata": {
                              "originalValues": {
                                "Total_Amount_Due": 12500,
                                "Purchase_Order_Number": "PO-3003;PO-3004"
                              },
                              "errorsApplied": [
                                {
                                  "field": "Purchase_Order_Number",
                                  "type": "Mismatch",
                                  "originalValue": "PO-3003;PO-3004",
                                  "errorValue": "PO-3003;INVALID-PO-3004",
                                  "reason": "Simulated mismatched PO reference."
                                },
                                {
                                  "field": "Total_Amount_Due",
                                  "type": "Mismatch",
                                  "originalValue": 12500,
                                  "errorValue": 12520,
                                  "reason": "Adjusted amount for mismatch check."
                                }
                              ],
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ],
                        "Bank Statement": [
                          {
                            "docId": "BANK-5001",
                            "docType": "Bank Statement",
                            "data": {
                              "Account_Number": "111222333",
                              "Statement_Period": "2024-12-01 to 2024-12-31",
                              "Opening_or_Beginning_or_Previous_Balance": 25000,
                              "Closing_or_Ending_Balance": 12480,
                              "Deposit_or_Credit_Totals": 0,
                              "Withdrawal_or_Debit_Totals": 12500,
                              "Transactional_Details": "Payment INV-4001 to Synetix Global",
                              "Date_of_transaction": "2024-12-10",
                              "Transaction_Number": "TXN-7001",
                              "Balance": 12480,
                              "Bank_name": "RiverRock Bank",
                              "Source": "External",
                              "File_Type": "PDF"
                            },
                            "_errors": [
                              "Mismatch"
                            ],
                            "_metadata": {
                              "originalValues": {
                                "Closing_or_Ending_Balance": 12500
                              },
                              "errorsApplied": [
                                {
                                  "field": "Closing_or_Ending_Balance",
                                  "type": "Mismatch",
                                  "originalValue": 12500,
                                  "errorValue": 12480,
                                  "reason": "Balance discrepancy for audit scenario testing."
                                }
                              ],
                              "allowedErrorSpectrum": [
                                "timing_cutoff_errors",
                                "document_mismatches",
                                "vendor_irregularities",
                                "process_gaps",
                                "suspicious_amounts_or_frequencies",
                                "external_discrepancies",
                                "documentation_anomalies"
                              ]
                            }
                          }
                        ]
                      },
                      "errorSummary": {
                        "totalErrorsInjected": 3,
                        "errorsByType": {
                          "Missing": 0,
                          "Invalid": 0,
                          "Mismatch": 3,
                          "Incorrect": 0,
                          "Negative": 0
                        },
                        "crossDocumentErrors": [
                          {
                            "description": "Mismatch in PO references and amounts across documents.",
                            "affectedDocuments": [
                              "INV-4001",
                              "PO-3003",
                              "PO-3004"
                            ],
                            "fields": [
                              "Purchase_Order_Number",
                              "Total_Amount_Due"
                            ]
                          },
                          {
                            "description": "Bank statement balance mismatch.",
                            "affectedDocuments": [
                              "BANK-5001"
                            ],
                            "fields": [
                              "Closing_or_Ending_Balance"
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 5590,
            "completion_tokens": 5488,
            "total_tokens": 11078,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_daf5fcc80a"
        }
      }
    ],
    "AI Agent3": [
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"Docent Project - Docent Scenario\",\n  \"companyProfile\": {\n    \"company_name\": \"NeuroSynth MedTech\",\n    \"industry\": \"healthcare\",\n    \"region\": \"United States\",\n    \"fiscal_year_end\": \"December 31\",\n    \"business_context\": {\n      \"ticker\": null,\n      \"sector\": \"Other\",\n      \"market_cap\": null,\n      \"primary_products\": [\n        \"Booking platform\",\n        \"Practice mgmt\"\n      ],\n      \"business_model\": \"Subscription-based\",\n      \"regulatory_environment\": \"HIPAA, HITECH\",\n      \"known_risks\": [\n        \"PHI handling\",\n        \"chargebacks/rebates\",\n        \"cutoff errors\",\n        \"missing documentation\"\n      ],\n      \"description\": \"NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.\",\n      \"revenue_model\": \"subscription\",\n      \"geographic_footprint\": [\n        \"United States\"\n      ],\n      \"key_customers\": [\n        \"clinics\",\n        \"hospitals\"\n      ],\n      \"seasonal_patterns\": false,\n      \"prior_audit_findings\": null,\n      \"management_integrity_concerns\": null,\n      \"internal_control_maturity\": \"developing\"\n    },\n    \"branding\": {\n      \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg\",\n      \"primary_color\": \"#334155\",\n      \"secondary_color\": \"#0F172A\",\n      \"font_family\": \"Inter\",\n      \"document_style\": \"modern\"\n    },\n    \"revenue_model\": \"subscription\",\n    \"company_specific_risks\": null,\n    \"vendors\": [\n      {\n        \"name\": \"Synetix Global\",\n        \"entity_type\": \"vendor\",\n        \"industry\": \"healthcare\",\n        \"address\": \"575 Market St, Denver, CO\",\n        \"tags\": [\n          \"preferred\",\n          \"net30\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"banks\": [\n      {\n        \"name\": \"RiverRock Bank\",\n        \"entity_type\": \"bank\",\n        \"industry\": \"Financials\",\n        \"address\": \"383 Main Ave, Evergreen, CO\",\n        \"tags\": [\n          \"primary\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"shipping_partners\": [\n      {\n        \"name\": \"SwiftShip Logistics\",\n        \"entity_type\": \"shipper\",\n        \"industry\": \"Logistics\",\n        \"address\": \"1251 Freight Rd, Denver, CO\",\n        \"tags\": [\n          \"ground\",\n          \"tracking\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ]\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Order Document.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Number should match the Order Document PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"No errors applied as this run is a baseline reference.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-1001\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Purchase_Order_Date\": \"2024-10-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 50,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 200,\n              \"Total_Purchase_Order_Value\": 10000,\n              \"Delivery_Date\": \"2024-10-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-2001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-2001\",\n              \"Date_of_Invoice\": \"2024-10-06\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 200,\n              \"Total_Amount_Due\": 10000,\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Delivery_/_Completion_Date\": \"2024-10-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-3001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 50000,\n              \"Closing_or_Ending_Balance\": 40000,\n              \"Deposit_or_Credit_Totals\": 15000,\n              \"Withdrawal_or_Debit_Totals\": 10000,\n              \"Transactional_Details\": \"Payment to Synetix Global INV-2001\",\n              \"Date_of_transaction\": \"2024-10-10\",\n              \"Transaction_Number\": \"TXN-5001\",\n              \"Balance\": 40000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": []\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 2\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Order Document.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoices should reference the correct purchase order.\"\n          }\n        ],\n        \"errorStrategy\": \"Introduce mismatches and invalid entries for testing.\",\n        \"totalErrorsToInject\": 4\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-2002\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Purchase_Order_Date\": \"2024-11-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 100,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 150,\n              \"Total_Purchase_Order_Value\": 15000,\n              \"Delivery_Date\": \"2024-11-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-3001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3001\",\n              \"Date_of_Invoice\": \"2024-11-05\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 60,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 9000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"INV-3002\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-INVALID\",\n              \"Date_of_Invoice\": \"2024-11-10\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 40,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 6010,\n              \"Purchase_Order_Number\": \"INVALID-PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-10\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Invalid\",\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Invoice_Number\": \"INV-3002\",\n                \"Purchase_Order_Number\": \"PO-2002\",\n                \"Total_Amount_Due\": 6000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Invoice_Number\",\n                  \"type\": \"Invalid\",\n                  \"originalValue\": \"INV-3002\",\n                  \"errorValue\": \"INV-INVALID\",\n                  \"reason\": \"Invalid formatting per error spectrum.\"\n                },\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Invalid\",\n                  \"originalValue\": \"PO-2002\",\n                  \"errorValue\": \"INVALID-PO-2002\",\n                  \"reason\": \"Invalid formatting to simulate misreference.\"\n                },\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 6000,\n                  \"errorValue\": 6010,\n                  \"reason\": \"Introduced mismatch for audit testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-4001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-01 to 2024-11-15\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 40000,\n              \"Closing_or_Ending_Balance\": 31000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 9000,\n              \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-15\",\n              \"Transaction_Number\": \"TXN-6001\",\n              \"Balance\": 31000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"BANK-4002\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-16 to 2024-11-30\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 31000,\n              \"Closing_or_Ending_Balance\": 24990,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 6010,\n              \"Transactional_Details\": \"Payment INV-INVALID to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-16\",\n              \"Transaction_Number\": \"TXN-6002\",\n              \"Balance\": 24990,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Invalid\",\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Closing_or_Ending_Balance\": 25000,\n                \"Withdrawal_or_Debit_Totals\": 6000,\n                \"Transactional_Details\": \"Payment INV-3002 to Synetix Global\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 6000,\n                  \"errorValue\": 6010,\n                  \"reason\": \"Adjusted amount to simulate mismatched payment.\"\n                },\n                {\n                  \"field\": \"Transactional_Details\",\n                  \"type\": \"Invalid\",\n                  \"originalValue\": \"Payment INV-3002 to Synetix Global\",\n                  \"errorValue\": \"Payment INV-INVALID to Synetix Global\",\n                  \"reason\": \"Simulate invalid reference in transaction details.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 4,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 3,\n          \"Mismatch\": 3,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Invoice number INVALID in bank statement transactions.\",\n            \"affectedDocuments\": [\n              \"INV-3002\",\n              \"BANK-4002\"\n            ],\n            \"fields\": [\n              \"Invoice_Number\",\n              \"Transactional_Details\"\n            ]\n          },\n          {\n            \"description\": \"Bank withdrawal and invoice amount mismatch.\",\n            \"affectedDocuments\": [\n              \"INV-3002\",\n              \"BANK-4002\"\n            ],\n            \"fields\": [\n              \"Total_Amount_Due\",\n              \"Withdrawal_or_Debit_Totals\"\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 3\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Order Document.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice should consolidate and reference multiple purchase orders.\"\n          }\n        ],\n        \"errorStrategy\": \"Introduce incorrect amounts and mismatched PO references.\",\n        \"totalErrorsToInject\": 3\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-3003\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3003\",\n              \"Purchase_Order_Date\": \"2024-12-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 30,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 7500,\n              \"Delivery_Date\": \"2024-12-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"PO-3004\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3004\",\n              \"Purchase_Order_Date\": \"2024-12-03\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 20,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 5000,\n              \"Delivery_Date\": \"2024-12-07\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-4001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-4001\",\n              \"Date_of_Invoice\": \"2024-12-08\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 250,\n              \"Total_Amount_Due\": 12520,\n              \"Purchase_Order_Number\": \"PO-3003;INVALID-PO-3004\",\n              \"Delivery_/_Completion_Date\": \"2024-12-07\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 12500,\n                \"Purchase_Order_Number\": \"PO-3003;PO-3004\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": \"PO-3003;PO-3004\",\n                  \"errorValue\": \"PO-3003;INVALID-PO-3004\",\n                  \"reason\": \"Simulated mismatched PO reference.\"\n                },\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 12520,\n                  \"reason\": \"Adjusted amount for mismatch check.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-5001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-12-01 to 2024-12-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 25000,\n              \"Closing_or_Ending_Balance\": 12480,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 12500,\n              \"Transactional_Details\": \"Payment INV-4001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-12-10\",\n              \"Transaction_Number\": \"TXN-7001\",\n              \"Balance\": 12480,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Closing_or_Ending_Balance\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Closing_or_Ending_Balance\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 12480,\n                  \"reason\": \"Balance discrepancy for audit scenario testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 3,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 3,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Mismatch in PO references and amounts across documents.\",\n            \"affectedDocuments\": [\n              \"INV-4001\",\n              \"PO-3003\",\n              \"PO-3004\"\n            ],\n            \"fields\": [\n              \"Purchase_Order_Number\",\n              \"Total_Amount_Due\"\n            ]\n          },\n          {\n            \"description\": \"Bank statement balance mismatch.\",\n            \"affectedDocuments\": [\n              \"BANK-5001\"\n            ],\n            \"fields\": [\n              \"Closing_or_Ending_Balance\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      }
    ],
    "AI Agent": [
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"Financial Audit Simulation\",\n  \"companyProfile\": {\n    \"company_name\": \"NeuroSynth MedTech\",\n    \"industry\": \"healthcare\",\n    \"region\": \"United States\",\n    \"fiscal_year_end\": \"December 31\",\n    \"business_context\": {\n      \"ticker\": null,\n      \"sector\": \"Other\",\n      \"market_cap\": null,\n      \"primary_products\": [\n        \"Booking platform\",\n        \"Practice mgmt\"\n      ],\n      \"business_model\": \"Subscription-based\",\n      \"regulatory_environment\": \"HIPAA, HITECH\",\n      \"known_risks\": [\n        \"PHI handling\",\n        \"chargebacks/rebates\",\n        \"cutoff errors\",\n        \"missing documentation\"\n      ],\n      \"description\": \"NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.\",\n      \"revenue_model\": \"subscription\",\n      \"geographic_footprint\": [\n        \"United States\"\n      ],\n      \"key_customers\": [\n        \"clinics\",\n        \"hospitals\"\n      ],\n      \"seasonal_patterns\": false,\n      \"prior_audit_findings\": null,\n      \"management_integrity_concerns\": null,\n      \"internal_control_maturity\": \"developing\"\n    },\n    \"branding\": {\n      \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg\",\n      \"primary_color\": \"#334155\",\n      \"secondary_color\": \"#0F172A\",\n      \"font_family\": \"Inter\",\n      \"document_style\": \"modern\"\n    },\n    \"revenue_model\": \"subscription\",\n    \"company_specific_risks\": null,\n    \"vendors\": [\n      {\n        \"name\": \"Synetix Global\",\n        \"entity_type\": \"vendor\",\n        \"industry\": \"healthcare\",\n        \"address\": \"575 Market St, Denver, CO\",\n        \"tags\": [\n          \"preferred\",\n          \"net30\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"banks\": [\n      {\n        \"name\": \"RiverRock Bank\",\n        \"entity_type\": \"bank\",\n        \"industry\": \"Financials\",\n        \"address\": \"383 Main Ave, Evergreen, CO\",\n        \"tags\": [\n          \"primary\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"shipping_partners\": [\n      {\n        \"name\": \"SwiftShip Logistics\",\n        \"entity_type\": \"shipper\",\n        \"industry\": \"Logistics\",\n        \"address\": \"1251 Freight Rd, Denver, CO\",\n        \"tags\": [\n          \"ground\",\n          \"tracking\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ]\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Order Document (Sales and Purchases).Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Baseline run, no errors injected.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-1001\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Purchase_Order_Date\": \"2024-10-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 50,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 200,\n              \"Total_Purchase_Order_Value\": 10000,\n              \"Delivery_Date\": \"2024-10-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-2001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-2001\",\n              \"Date_of_Invoice\": \"2024-10-06\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 200,\n              \"Total_Amount_Due\": 10000,\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Delivery_/_Completion_Date\": \"2024-10-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-3001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 50000,\n              \"Closing_or_Ending_Balance\": 40000,\n              \"Deposit_or_Credit_Totals\": 15000,\n              \"Withdrawal_or_Debit_Totals\": 10000,\n              \"Transactional_Details\": \"Payment to Synetix Global INV-2001\",\n              \"Date_of_transaction\": \"2024-10-10\",\n              \"Transaction_Number\": \"TXN-5001\",\n              \"Balance\": 40000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": []\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 2\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Order Document (Sales and Purchases).Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Apply strategic errors across partial invoices and payments.\",\n        \"totalErrorsToInject\": 5\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-2002\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Purchase_Order_Date\": \"2024-11-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 100,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 150,\n              \"Total_Purchase_Order_Value\": 15000,\n              \"Delivery_Date\": \"2024-11-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Document_Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Supplier_Name\": \"Synetix Global\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Supplier_Name\",\n                  \"type\": \"Document_Mismatch\",\n                  \"originalValue\": \"Synetix Global\",\n                  \"errorValue\": \"Synetix Healthcare\",\n                  \"reason\": \"Simulate vendor name subtle alteration.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-3001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3001\",\n              \"Date_of_Invoice\": \"2024-11-05\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 60,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 9000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 9000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 9000,\n                  \"errorValue\": 9500,\n                  \"reason\": \"Invoice amount exceeds PO amount.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"INV-3002\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3002\",\n              \"Date_of_Invoice\": \"2024-11-10\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 40,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 6000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-10\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Description_Anomaly\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Product_Description\": \"Neuro-imaging sensors\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description_Anomaly\",\n                  \"originalValue\": \"Neuro-imaging sensors\",\n                  \"errorValue\": \"Advanced Neurosensors\",\n                  \"reason\": \"Description altered to simulate possible mismatch.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-4001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-01 to 2024-11-15\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 40000,\n              \"Closing_or_Ending_Balance\": 31000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 9000,\n              \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-15\",\n              \"Transaction_Number\": \"TXN-6001\",\n              \"Balance\": 31000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Process_Gap\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Transactional_Details\",\n                  \"type\": \"Process_Gap\",\n                  \"originalValue\": \"Payment INV-3001 to Synetix Global\",\n                  \"errorValue\": \"Manual payment adjustment\",\n                  \"reason\": \"Unapproved process method used.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"BANK-4002\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-16 to 2024-11-30\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 31000,\n              \"Closing_or_Ending_Balance\": 25000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 6000,\n              \"Transactional_Details\": \"Payment INV-3002 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-16\",\n              \"Transaction_Number\": \"TXN-6002\",\n              \"Balance\": 25000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Cutoff_Timing_Error\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_transaction\": \"2024-11-16\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_transaction\",\n                  \"type\": \"Cutoff_Timing_Error\",\n                  \"originalValue\": \"2024-11-16\",\n                  \"errorValue\": \"2024-12-01\",\n                  \"reason\": \"Bank transaction date pushed out of period.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 5,\n        \"errorsByType\": {\n          \"Mismatch\": 2,\n          \"Description_Anomaly\": 1,\n          \"Process_Gap\": 1,\n          \"Cutoff_Timing_Error\": 1\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Invoice amount exceeds PO amount.\",\n            \"affectedDocuments\": [\n              \"INV-3001\",\n              \"PO-2002\"\n            ],\n            \"fields\": [\n              \"Total_Amount_Due\",\n              \"Total_Purchase_Order_Value\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      },
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"Financial Audit Simulation\",\n  \"companyProfile\": {\n    \"company_name\": \"NeuroSynth MedTech\",\n    \"industry\": \"healthcare\",\n    \"region\": \"United States\",\n    \"fiscal_year_end\": \"December 31\",\n    \"business_context\": {\n      \"ticker\": null,\n      \"sector\": \"Other\",\n      \"market_cap\": null,\n      \"primary_products\": [\n        \"Booking platform\",\n        \"Practice mgmt\"\n      ],\n      \"business_model\": \"Subscription-based\",\n      \"regulatory_environment\": \"HIPAA, HITECH\",\n      \"known_risks\": [\n        \"PHI handling\",\n        \"chargebacks/rebates\",\n        \"cutoff errors\",\n        \"missing documentation\"\n      ],\n      \"description\": \"NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.\",\n      \"revenue_model\": \"subscription\",\n      \"geographic_footprint\": [\n        \"United States\"\n      ],\n      \"key_customers\": [\n        \"clinics\",\n        \"hospitals\"\n      ],\n      \"seasonal_patterns\": false,\n      \"prior_audit_findings\": null,\n      \"management_integrity_concerns\": null,\n      \"internal_control_maturity\": \"developing\"\n    },\n    \"branding\": {\n      \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg\",\n      \"primary_color\": \"#334155\",\n      \"secondary_color\": \"#0F172A\",\n      \"font_family\": \"Inter\",\n      \"document_style\": \"modern\"\n    },\n    \"revenue_model\": \"subscription\",\n    \"company_specific_risks\": null,\n    \"vendors\": [\n      {\n        \"name\": \"Synetix Global\",\n        \"entity_type\": \"vendor\",\n        \"industry\": \"healthcare\",\n        \"address\": \"575 Market St, Denver, CO\",\n        \"tags\": [\n          \"preferred\",\n          \"net30\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"banks\": [\n      {\n        \"name\": \"RiverRock Bank\",\n        \"entity_type\": \"bank\",\n        \"industry\": \"Financials\",\n        \"address\": \"383 Main Ave, Evergreen, CO\",\n        \"tags\": [\n          \"primary\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"shipping_partners\": [\n      {\n        \"name\": \"SwiftShip Logistics\",\n        \"entity_type\": \"shipper\",\n        \"industry\": \"Logistics\",\n        \"address\": \"1251 Freight Rd, Denver, CO\",\n        \"tags\": [\n          \"ground\",\n          \"tracking\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ]\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Purchase Order.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"No errors injected for baseline run.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-1001\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Purchase_Order_Date\": \"2024-10-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 50,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 200,\n              \"Total_Purchase_Order_Value\": 10000,\n              \"Delivery_Date\": \"2024-10-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-2001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-2001\",\n              \"Date_of_Invoice\": \"2024-10-06\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 200,\n              \"Total_Amount_Due\": 10000,\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Delivery_/_Completion_Date\": \"2024-10-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-3001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 50000,\n              \"Closing_or_Ending_Balance\": 40000,\n              \"Deposit_or_Credit_Totals\": 15000,\n              \"Withdrawal_or_Debit_Totals\": 10000,\n              \"Transactional_Details\": \"Payment to Synetix Global INV-2001\",\n              \"Date_of_transaction\": \"2024-10-10\",\n              \"Transaction_Number\": \"TXN-5001\",\n              \"Balance\": 40000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": []\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 2\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Purchase Order.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Errors will be strategically applied across documents based on the errorSpectrum.\",\n        \"totalErrorsToInject\": 5\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-2002\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"\",\n              \"Purchase_Order_Date\": \"2024-11-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 100,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 150,\n              \"Total_Purchase_Order_Value\": 14950,\n              \"Delivery_Date\": \"2024-11-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Missing\",\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Purchase_Order_Number\": \"PO-2002\",\n                \"Total_Purchase_Order_Value\": 15000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Missing\",\n                  \"originalValue\": \"PO-2002\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Simulated untraceable PO for testing.\"\n                },\n                {\n                  \"field\": \"Total_Purchase_Order_Value\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 15000,\n                  \"errorValue\": 14950,\n                  \"reason\": \"Introduced amount discrepancy for audit testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-3001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3001\",\n              \"Date_of_Invoice\": \"2024-11-05\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 60,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 9500,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 9000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 9000,\n                  \"errorValue\": 9500,\n                  \"reason\": \"Simulated invoicing error for audit testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"INV-3002\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3002\",\n              \"Date_of_Invoice\": \"2024-11-10\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"\",\n              \"Item_Quantity\": 40,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 6000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-10\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Missing\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Product_Description\": \"Neuro-imaging sensors\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Missing\",\n                  \"originalValue\": \"Neuro-imaging sensors\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Simulated incomplete description for audit testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-4001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-01 to 2024-11-15\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 40000,\n              \"Closing_or_Ending_Balance\": 31000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 9000,\n              \"Transactional_Details\": \"Payment INV-3001 to Synetix Global, excess fees\",\n              \"Date_of_transaction\": \"2024-11-15\",\n              \"Transaction_Number\": \"TXN-6001\",\n              \"Balance\": 31000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Transactional_Details\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": \"Payment INV-3001 to Synetix Global\",\n                  \"errorValue\": \"Payment INV-3001 to Synetix Global, excess fees\",\n                  \"reason\": \"Introduced extra transaction details for discrepancy testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 5,\n        \"errorsByType\": {\n          \"Missing\": 2,\n          \"Invalid\": 0,\n          \"Mismatch\": 3,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Total amount due on invoice exceeds the linked Purchase Order value.\",\n            \"affectedDocuments\": [\n              \"INV-3001\",\n              \"PO-2002\"\n            ],\n            \"fields\": [\n              \"Total_Amount_Due\",\n              \"Total_Purchase_Order_Value\"\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 3\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.Purchase_Order_Number\",\n              \"Purchase Order.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Errors will be strategically applied across documents based on the errorSpectrum.\",\n        \"totalErrorsToInject\": 4\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-3003\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3003\",\n              \"Purchase_Order_Date\": \"2024-12-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 30,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 7500,\n              \"Delivery_Date\": \"2024-12-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"PO-3004\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3004\",\n              \"Purchase_Order_Date\": \"2024-12-03\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 20,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 4950,\n              \"Delivery_Date\": \"2024-12-07\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Purchase_Order_Value\": 5000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Purchase_Order_Value\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 5000,\n                  \"errorValue\": 4950,\n                  \"reason\": \"Introduced amount discrepancy for audit testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-4001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-4001\",\n              \"Date_of_Invoice\": \"2024-12-08\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 250,\n              \"Total_Amount_Due\": 13000,\n              \"Purchase_Order_Number\": \"PO-3003;PO-3004\",\n              \"Delivery_/_Completion_Date\": \"2024-12-07\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 13000,\n                  \"reason\": \"Introduced invoice discrepancy for testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-5001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-12-01 to 2024-12-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 25000,\n              \"Closing_or_Ending_Balance\": 12000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 13000,\n              \"Transactional_Details\": \"Payment INV-4001 to Synetix Global, discrepancy\",\n              \"Date_of_transaction\": \"2024-12-10\",\n              \"Transaction_Number\": \"TXN-7001\",\n              \"Balance\": 12000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Withdrawal_or_Debit_Totals\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 13000,\n                  \"reason\": \"Simulated discrepancy in transaction amount.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 4,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 4,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Bank statement withdrawal amount does not match invoice total.\",\n            \"affectedDocuments\": [\n              \"BANK-5001\",\n              \"INV-4001\"\n            ],\n            \"fields\": [\n              \"Withdrawal_or_Debit_Totals\",\n              \"Total_Amount_Due\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      },
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"Financial Audit Simulation\",\n  \"companyProfile\": {\n    \"company_name\": \"NeuroSynth MedTech\",\n    \"industry\": \"healthcare\",\n    \"region\": \"United States\",\n    \"fiscal_year_end\": \"December 31\",\n    \"business_context\": {\n      \"ticker\": null,\n      \"sector\": \"Other\",\n      \"market_cap\": null,\n      \"primary_products\": [\n        \"Booking platform\",\n        \"Practice mgmt\"\n      ],\n      \"business_model\": \"Subscription-based\",\n      \"regulatory_environment\": \"HIPAA, HITECH\",\n      \"known_risks\": [\n        \"PHI handling\",\n        \"chargebacks/rebates\",\n        \"cutoff errors\",\n        \"missing documentation\"\n      ],\n      \"description\": \"NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.\",\n      \"revenue_model\": \"subscription\",\n      \"geographic_footprint\": [\n        \"United States\"\n      ],\n      \"key_customers\": [\n        \"clinics\",\n        \"hospitals\"\n      ],\n      \"seasonal_patterns\": false,\n      \"prior_audit_findings\": null,\n      \"management_integrity_concerns\": null,\n      \"internal_control_maturity\": \"developing\"\n    },\n    \"branding\": {\n      \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg\",\n      \"primary_color\": \"#334155\",\n      \"secondary_color\": \"#0F172A\",\n      \"font_family\": \"Inter\",\n      \"document_style\": \"modern\"\n    },\n    \"revenue_model\": \"subscription\",\n    \"company_specific_risks\": null,\n    \"vendors\": [\n      {\n        \"name\": \"Synetix Global\",\n        \"entity_type\": \"vendor\",\n        \"industry\": \"healthcare\",\n        \"address\": \"575 Market St, Denver, CO\",\n        \"tags\": [\n          \"preferred\",\n          \"net30\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"banks\": [\n      {\n        \"name\": \"RiverRock Bank\",\n        \"entity_type\": \"bank\",\n        \"industry\": \"Financials\",\n        \"address\": \"383 Main Ave, Evergreen, CO\",\n        \"tags\": [\n          \"primary\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"shipping_partners\": [\n      {\n        \"name\": \"SwiftShip Logistics\",\n        \"entity_type\": \"shipper\",\n        \"industry\": \"Logistics\",\n        \"address\": \"1251 Freight Rd, Denver, CO\",\n        \"tags\": [\n          \"ground\",\n          \"tracking\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ]\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.Purchase_Order_Number\", \"Order Document (Sales and Purchases).Purchase_Order_Number\"],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Maintain baseline with no errors injected to serve as a reference point.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-1001\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Purchase_Order_Date\": \"2024-10-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 50,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 200,\n              \"Total_Purchase_Order_Value\": 10000,\n              \"Delivery_Date\": \"2024-10-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-2001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-2001\",\n              \"Date_of_Invoice\": \"2024-10-06\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 200,\n              \"Total_Amount_Due\": 10000,\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Delivery_/_Completion_Date\": \"2024-10-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-3001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 50000,\n              \"Closing_or_Ending_Balance\": 40000,\n              \"Deposit_or_Credit_Totals\": 15000,\n              \"Withdrawal_or_Debit_Totals\": 10000,\n              \"Transactional_Details\": \"Payment to Synetix Global INV-2001\",\n              \"Date_of_transaction\": \"2024-10-10\",\n              \"Transaction_Number\": \"TXN-5001\",\n              \"Balance\": 40000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": []\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 2\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.Purchase_Order_Number\", \"Order Document (Sales and Purchases).Purchase_Order_Number\"],\n            \"description\": \"Ensure cross-document relationships between purchase orders and invoices.\"\n          }\n        ],\n        \"errorStrategy\": \"Inject timing errors and mismatches in amounts across documents.\",\n        \"totalErrorsToInject\": 5\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-2002\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Purchase_Order_Date\": \"2024-11-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 100,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 150,\n              \"Total_Purchase_Order_Value\": 15000,\n              \"Delivery_Date\": \"2024-11-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-3001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3001\",\n              \"Date_of_Invoice\": \"2024-11-05\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 60,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 9500,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 9000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 9000,\n                  \"errorValue\": 9500,\n                  \"reason\": \"Simulated an amount mismatch for testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"INV-3002\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3002\",\n              \"Date_of_Invoice\": \"2024-11-10\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 40,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 6500,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-10\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 6000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 6000,\n                  \"errorValue\": 6500,\n                  \"reason\": \"Simulated an amount mismatch for testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-4001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-01 to 2024-11-15\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 40000,\n              \"Closing_or_Ending_Balance\": 31000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 9500,\n              \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-15\",\n              \"Transaction_Number\": \"TXN-6001\",\n              \"Balance\": 31000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Withdrawal_or_Debit_Totals\": 9000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 9000,\n                  \"errorValue\": 9500,\n                  \"reason\": \"Injected mismatch between bank withdrawal and invoice amount.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"BANK-4002\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-16 to 2024-11-30\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 31000,\n              \"Closing_or_Ending_Balance\": 25000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 6500,\n              \"Transactional_Details\": \"Payment INV-3002 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-16\",\n              \"Transaction_Number\": \"TXN-6002\",\n              \"Balance\": 25000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Withdrawal_or_Debit_Totals\": 6000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 6000,\n                  \"errorValue\": 6500,\n                  \"reason\": \"Injected mismatch between bank withdrawal and invoice amount.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 5,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 5,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Mismatch between invoice and bank statement total amounts due to deliberate error injection.\",\n            \"affectedDocuments\": [\"INV-3001\", \"BANK-4001\"],\n            \"fields\": [\"Total_Amount_Due\", \"Withdrawal_or_Debit_Totals\"]\n          },\n          {\n            \"description\": \"Mismatch between invoice and bank statement total amounts due to deliberate error injection.\",\n            \"affectedDocuments\": [\"INV-3002\", \"BANK-4002\"],\n            \"fields\": [\"Total_Amount_Due\", \"Withdrawal_or_Debit_Totals\"]\n          }\n        ]\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 3\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.Purchase_Order_Number\", \"Order Document (Sales and Purchases).Purchase_Order_Number\"],\n            \"description\": \"Ensure cross-document relationships between purchase orders and invoices.\"\n          }\n        ],\n        \"errorStrategy\": \"Inject vendor irregularities and suspicious amounts.\",\n        \"totalErrorsToInject\": 5\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-3003\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3003\",\n              \"Purchase_Order_Date\": \"2024-12-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 30,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 7500,\n              \"Delivery_Date\": \"2024-12-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-4001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-4001\",\n              \"Date_of_Invoice\": \"2024-12-08\",\n              \"Supplier_Name\": \"Synetics Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 250,\n              \"Total_Amount_Due\": 13500,\n              \"Purchase_Order_Number\": \"PO-3003;PO-3004\",\n              \"Delivery_/_Completion_Date\": \"2024-12-07\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\", \"Invalid\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Supplier_Name\": \"Synetix Global\",\n                \"Total_Amount_Due\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Supplier_Name\",\n                  \"type\": \"Invalid\",\n                  \"originalValue\": \"Synetix Global\",\n                  \"errorValue\": \"Synetics Global\",\n                  \"reason\": \"Simulated vendor name mismatch.\"\n                },\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 13500,\n                  \"reason\": \"Simulated amount discrepancy.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-5001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-12-01 to 2024-12-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 25000,\n              \"Closing_or_Ending_Balance\": 11500,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 13500,\n              \"Transactional_Details\": \"Payment INV-4001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-12-10\",\n              \"Transaction_Number\": \"TXN-7001\",\n              \"Balance\": 11500,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Closing_or_Ending_Balance\": 12500,\n                \"Withdrawal_or_Debit_Totals\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 13500,\n                  \"reason\": \"Simulated mismatch with invoice for testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 5,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 1,\n          \"Mismatch\": 4,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Amount discrepancy between invoice and payment in bank statement.\",\n            \"affectedDocuments\": [\"INV-4001\", \"BANK-5001\"],\n            \"fields\": [\"Total_Amount_Due\", \"Withdrawal_or_Debit_Totals\"]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      },
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"Docent Project - Docent Scenario\",\n  \"companyProfile\": {\n    \"company_name\": \"NeuroSynth MedTech\",\n    \"industry\": \"healthcare\",\n    \"region\": \"United States\",\n    \"fiscal_year_end\": \"December 31\",\n    \"business_context\": {\n      \"ticker\": null,\n      \"sector\": \"Other\",\n      \"market_cap\": null,\n      \"primary_products\": [\n        \"Booking platform\",\n        \"Practice mgmt\"\n      ],\n      \"business_model\": \"Subscription-based\",\n      \"regulatory_environment\": \"HIPAA, HITECH\",\n      \"known_risks\": [\n        \"PHI handling\",\n        \"chargebacks/rebates\",\n        \"cutoff errors\",\n        \"missing documentation\"\n      ],\n      \"description\": \"NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.\",\n      \"revenue_model\": \"subscription\",\n      \"geographic_footprint\": [\n        \"United States\"\n      ],\n      \"key_customers\": [\n        \"clinics\",\n        \"hospitals\"\n      ],\n      \"seasonal_patterns\": false,\n      \"prior_audit_findings\": null,\n      \"management_integrity_concerns\": null,\n      \"internal_control_maturity\": \"developing\"\n    },\n    \"branding\": {\n      \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg\",\n      \"primary_color\": \"#334155\",\n      \"secondary_color\": \"#0F172A\",\n      \"font_family\": \"Inter\",\n      \"document_style\": \"modern\"\n    },\n    \"revenue_model\": \"subscription\",\n    \"company_specific_risks\": null,\n    \"vendors\": [\n      {\n        \"name\": \"Synetix Global\",\n        \"entity_type\": \"vendor\",\n        \"industry\": \"healthcare\",\n        \"address\": \"575 Market St, Denver, CO\",\n        \"tags\": [\n          \"preferred\",\n          \"net30\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"banks\": [\n      {\n        \"name\": \"RiverRock Bank\",\n        \"entity_type\": \"bank\",\n        \"industry\": \"Financials\",\n        \"address\": \"383 Main Ave, Evergreen, CO\",\n        \"tags\": [\n          \"primary\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"shipping_partners\": [\n      {\n        \"name\": \"SwiftShip Logistics\",\n        \"entity_type\": \"shipper\",\n        \"industry\": \"Logistics\",\n        \"address\": \"1251 Freight Rd, Denver, CO\",\n        \"tags\": [\n          \"ground\",\n          \"tracking\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ]\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.Purchase_Order_Number\", \"Order Document (Sales and Purchases).Purchase_Order_Number\"],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"No errors injected, baseline set.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-1001\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Purchase_Order_Date\": \"2024-10-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 50,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 200,\n              \"Total_Purchase_Order_Value\": 10000,\n              \"Delivery_Date\": \"2024-10-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-2001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-2001\",\n              \"Date_of_Invoice\": \"2024-10-06\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 200,\n              \"Total_Amount_Due\": 10000,\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Delivery_/_Completion_Date\": \"2024-10-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-3001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 50000,\n              \"Closing_or_Ending_Balance\": 40000,\n              \"Deposit_or_Credit_Totals\": 15000,\n              \"Withdrawal_or_Debit_Totals\": 10000,\n              \"Transactional_Details\": \"Payment to Synetix Global INV-2001\",\n              \"Date_of_transaction\": \"2024-10-10\",\n              \"Transaction_Number\": \"TXN-5001\",\n              \"Balance\": 40000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"originalValues\": {},\n              \"errorsApplied\": [],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": []\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 2\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.Purchase_Order_Number\", \"Order Document (Sales and Purchases).Purchase_Order_Number\"],\n            \"description\": \"Invoice for PO should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Inject partial invoicing inaccuracies and untimely bank settlements.\",\n        \"totalErrorsToInject\": 4\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-2002\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Purchase_Order_Date\": \"2024-11-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 100,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 150,\n              \"Total_Purchase_Order_Value\": 15000,\n              \"Delivery_Date\": \"2024-11-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Purchase_Order_Value\": 15000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Purchase_Order_Value\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 15000,\n                  \"errorValue\": 16000,\n                  \"reason\": \"Mismatched to simulate overpricing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-3001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3001\",\n              \"Date_of_Invoice\": \"2024-11-05\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 60,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 9000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Late Invoicing\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_Invoice\": \"2024-11-05\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_Invoice\",\n                  \"type\": \"Late Invoicing\",\n                  \"originalValue\": \"2024-11-05\",\n                  \"errorValue\": \"2024-11-10\",\n                  \"reason\": \"Simulated delay in invoicing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"INV-3002\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3002\",\n              \"Date_of_Invoice\": \"2024-11-10\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 40,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 6000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-10\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Description mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Product_Description\": \"Neuro-imaging sensors\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description mismatch\",\n                  \"originalValue\": \"Neuro-imaging sensors\",\n                  \"errorValue\": \"Imaging sensors\",\n                  \"reason\": \"Introduced description discrepancy.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-4001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-01 to 2024-11-15\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 40000,\n              \"Closing_or_Ending_Balance\": 31000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 9000,\n              \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-15\",\n              \"Transaction_Number\": \"TXN-6001\",\n              \"Balance\": 31000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Late Payment\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_transaction\": \"2024-11-15\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_transaction\",\n                  \"type\": \"Late Payment\",\n                  \"originalValue\": \"2024-11-15\",\n                  \"errorValue\": \"2024-11-20\",\n                  \"reason\": \"Used cutoff error to delay payment entry.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 4,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 2,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Timing discrepancy in payment and invoicing.\",\n            \"affectedDocuments\": [\"INV-3001\", \"BANK-4001\"],\n            \"fields\": [\"Date_of_Invoice\", \"Date_of_transaction\"]\n          }\n        ]\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 3\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Order Document (Sales and Purchases)\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\"Invoice.Purchase_Order_Number\", \"Order Document (Sales and Purchases).Purchase_Order_Number\"],\n            \"description\": \"Cross-verification for merged orders in single invoice.\"\n          }\n        ],\n        \"errorStrategy\": \"Introduce mismatches and vague descriptions.\",\n        \"totalErrorsToInject\": 3\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-3003\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3003\",\n              \"Purchase_Order_Date\": \"2024-12-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 30,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 7500,\n              \"Delivery_Date\": \"2024-12-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Purchase_Order_Value\": 7500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Purchase_Order_Value\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 7500,\n                  \"errorValue\": 7700,\n                  \"reason\": \"Simulated mispricing for audit testing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-4001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-4001\",\n              \"Date_of_Invoice\": \"2024-12-08\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 250,\n              \"Total_Amount_Due\": 12500,\n              \"Purchase_Order_Number\": \"PO-3003;PO-3004\",\n              \"Delivery_/_Completion_Date\": \"2024-12-07\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Description Mismatch\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Product_Description\": \"Neuro-imaging sensors\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description Mismatch\",\n                  \"originalValue\": \"Neuro-imaging sensors\",\n                  \"errorValue\": \"Neuro imaging sensors\",\n                  \"reason\": \"Altered description for audit trace.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-5001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-12-01 to 2024-12-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 25000,\n              \"Closing_or_Ending_Balance\": 12500,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 12500,\n              \"Transactional_Details\": \"Payment INV-4001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-12-10\",\n              \"Transaction_Number\": \"TXN-7001\",\n              \"Balance\": 12500,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\"Same Day Payment\"],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_transaction\": \"2024-12-10\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_transaction\",\n                  \"type\": \"Same Day Payment\",\n                  \"originalValue\": \"2024-12-10\",\n                  \"errorValue\": \"2024-12-10\",\n                  \"reason\": \"Highlighted day duplication for reconciling.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 3,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 3,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Description mismatch identified between invoice and associated orders.\",\n            \"affectedDocuments\": [\"INV-4001\", \"PO-3003\"],\n            \"fields\": [\"Product_Description\"]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      },
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"Financial Audit Simulation\",\n  \"companyProfile\": {\n    \"company_name\": \"NeuroSynth MedTech\",\n    \"industry\": \"healthcare\",\n    \"region\": \"United States\",\n    \"fiscal_year_end\": \"December 31\",\n    \"business_context\": {\n      \"ticker\": null,\n      \"sector\": \"Other\",\n      \"market_cap\": null,\n      \"primary_products\": [\n        \"Booking platform\",\n        \"Practice mgmt\"\n      ],\n      \"business_model\": \"Subscription-based\",\n      \"regulatory_environment\": \"HIPAA, HITECH\",\n      \"known_risks\": [\n        \"PHI handling\",\n        \"chargebacks/rebates\",\n        \"cutoff errors\",\n        \"missing documentation\"\n      ],\n      \"description\": \"NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.\",\n      \"revenue_model\": \"subscription\",\n      \"geographic_footprint\": [\n        \"United States\"\n      ],\n      \"key_customers\": [\n        \"clinics\",\n        \"hospitals\"\n      ],\n      \"seasonal_patterns\": false,\n      \"prior_audit_findings\": null,\n      \"management_integrity_concerns\": null,\n      \"internal_control_maturity\": \"developing\"\n    },\n    \"branding\": {\n      \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg\",\n      \"primary_color\": \"#334155\",\n      \"secondary_color\": \"#0F172A\",\n      \"font_family\": \"Inter\",\n      \"document_style\": \"modern\"\n    },\n    \"revenue_model\": \"subscription\",\n    \"company_specific_risks\": null,\n    \"vendors\": [\n      {\n        \"name\": \"Synetix Global\",\n        \"entity_type\": \"vendor\",\n        \"industry\": \"healthcare\",\n        \"address\": \"575 Market St, Denver, CO\",\n        \"tags\": [\n          \"preferred\",\n          \"net30\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"banks\": [\n      {\n        \"name\": \"RiverRock Bank\",\n        \"entity_type\": \"bank\",\n        \"industry\": \"Financials\",\n        \"address\": \"383 Main Ave, Evergreen, CO\",\n        \"tags\": [\n          \"primary\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ],\n    \"shipping_partners\": [\n      {\n        \"name\": \"SwiftShip Logistics\",\n        \"entity_type\": \"shipper\",\n        \"industry\": \"Logistics\",\n        \"address\": \"1251 Freight Rd, Denver, CO\",\n        \"tags\": [\n          \"ground\",\n          \"tracking\"\n        ],\n        \"metadata\": {},\n        \"branding\": {\n          \"logo_url\": \"https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg\",\n          \"primary_color\": \"#334155\",\n          \"secondary_color\": \"#0F172A\",\n          \"font_family\": \"Inter\",\n          \"document_style\": \"formal\"\n        }\n      }\n    ]\n  },\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"Sim Run 1\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Payment Voucher\",\n          \"Bank Statement\",\n          \"Wire Transfer\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.PO Reference\",\n              \"Purchase Order.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice PO Reference should match the PO Number.\"\n          }\n        ],\n        \"errorStrategy\": \"Baseline with no error injection to serve as a clean reference set.\",\n        \"totalErrorsToInject\": 0\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-1001\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Purchase_Order_Date\": \"2024-10-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 50,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 200,\n              \"Total_Purchase_Order_Value\": 10000,\n              \"Delivery_Date\": \"2024-10-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-2001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-2001\",\n              \"Date_of_Invoice\": \"2024-10-06\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 200,\n              \"Total_Amount_Due\": 10000,\n              \"Purchase_Order_Number\": \"PO-1001\",\n              \"Delivery_/_Completion_Date\": \"2024-10-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-3001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 50000,\n              \"Closing_or_Ending_Balance\": 40000,\n              \"Deposit_or_Credit_Totals\": 15000,\n              \"Withdrawal_or_Debit_Totals\": 10000,\n              \"Transactional_Details\": \"Payment to Synetix Global INV-2001\",\n              \"Date_of_transaction\": \"2024-10-10\",\n              \"Transaction_Number\": \"TXN-5001\",\n              \"Balance\": 40000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [],\n            \"_metadata\": {\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 0,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 0,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": []\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 2\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.PO Reference\",\n              \"Order Document.Purchase_Order_Number\"\n            ],\n            \"description\": \"Each partial invoice must map to the corresponding PO.\"\n          }\n        ],\n        \"errorStrategy\": \"Introduce strategic errors across documents using the error spectrum.\",\n        \"totalErrorsToInject\": 6\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-2002\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Purchase_Order_Date\": \"2024-11-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 100,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 150,\n              \"Total_Purchase_Order_Value\": 15000,\n              \"Delivery_Date\": \"2024-11-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Duplicate\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Purchase_Order_Number\": \"PO-2002\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Duplicate\",\n                  \"originalValue\": \"PO-2002\",\n                  \"errorValue\": \"PO-2002-DUP\",\n                  \"reason\": \"Simulating duplicate POs to introduce document mismatch.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-3001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3001\",\n              \"Date_of_Invoice\": \"2024-11-05\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 60,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 9100,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-05\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 9000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 9000,\n                  \"errorValue\": 9100,\n                  \"reason\": \"To introduce amount inconsistency for audit detection.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"INV-3002\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-3002\",\n              \"Date_of_Invoice\": \"2024-11-10\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 40,\n              \"Item_Price\": 150,\n              \"Total_Amount_Due\": 6000,\n              \"Purchase_Order_Number\": \"PO-2002\",\n              \"Delivery_/_Completion_Date\": \"2024-11-10\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Minor Error\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_Invoice\": \"2024-11-10\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_Invoice\",\n                  \"type\": \"Minor Error\",\n                  \"originalValue\": \"2024-11-10\",\n                  \"errorValue\": \"2024-11-11\",\n                  \"reason\": \"A minor date inconsistency for subtle error introduction.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-4001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-01 to 2024-11-15\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 40000,\n              \"Closing_or_Ending_Balance\": 31000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 9000,\n              \"Transactional_Details\": \"Payment INV-3001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-15\",\n              \"Transaction_Number\": \"TXN-6001\",\n              \"Balance\": 31000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Deposit_or_Credit_Totals\": 0\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Deposit_or_Credit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 0,\n                  \"errorValue\": 100,\n                  \"reason\": \"Inserted minor adjustments for potential oversight.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"BANK-4002\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-11-16 to 2024-11-30\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 31000,\n              \"Closing_or_Ending_Balance\": 25000,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 6100,\n              \"Transactional_Details\": \"Payment INV-3002 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-11-16\",\n              \"Transaction_Number\": \"TXN-6002\",\n              \"Balance\": 25000,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Withdrawal_or_Debit_Totals\": 6000\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch\",\n                  \"originalValue\": 6000,\n                  \"errorValue\": 6100,\n                  \"reason\": \"Introducing inconsistency for audit trail.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 6,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 4,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Amount mismatch between Invoice and linked Purchase Order.\",\n            \"affectedDocuments\": [\n              \"INV-3001\",\n              \"PO-2002\"\n            ],\n            \"fields\": [\n              \"Total_Amount_Due\",\n              \"Total_Purchase_Order_Value\"\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"simulationId\": \"Sim Run 3\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Purchase Order\",\n          \"Invoice\",\n          \"Bank Statement\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"cross_reference\",\n            \"fields\": [\n              \"Invoice.PO Reference\",\n              \"Order Document.Purchase_Order_Number\"\n            ],\n            \"description\": \"Invoice should consolidate both POs for correct total.\"\n          }\n        ],\n        \"errorStrategy\": \"Introduce strategic errors across documents using the error spectrum.\",\n        \"totalErrorsToInject\": 5\n      },\n      \"processedDocuments\": {\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-3003\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3003\",\n              \"Purchase_Order_Date\": \"2024-12-01\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 30,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 7500,\n              \"Delivery_Date\": \"2024-12-05\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Document Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Purchase_Order_Value\": 7500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Purchase_Order_Value\",\n                  \"type\": \"Document Mismatch\",\n                  \"originalValue\": 7500,\n                  \"errorValue\": 7600,\n                  \"reason\": \"Slight modification for potential discrepancy.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          },\n          {\n            \"docId\": \"PO-3004\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": {\n              \"Purchase_Order_Number\": \"PO-3004\",\n              \"Purchase_Order_Date\": \"2024-12-03\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Customer_Name\": \"NeuroSynth MedTech\",\n              \"Item_Quantity\": 20,\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Unit_of_measurement\": \"units\",\n              \"Currency_Unit\": \"USD\",\n              \"Item_Price\": 250,\n              \"Total_Purchase_Order_Value\": 5000,\n              \"Delivery_Date\": \"2024-12-07\",\n              \"Source\": \"Internal\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Amount Mismatch\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Item_Quantity\": 20\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Item_Quantity\",\n                  \"type\": \"Amount Mismatch\",\n                  \"originalValue\": 20,\n                  \"errorValue\": 25,\n                  \"reason\": \"Adjusted to create quantity alignment issues.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice\": [\n          {\n            \"docId\": \"INV-4001\",\n            \"docType\": \"Invoice\",\n            \"data\": {\n              \"Invoice_Number\": \"INV-4001\",\n              \"Date_of_Invoice\": \"2024-12-08\",\n              \"Supplier_Name\": \"Synetix Global\",\n              \"Product_Description\": \"Neuro-imaging sensors\",\n              \"Item_Quantity\": 50,\n              \"Item_Price\": 255,\n              \"Total_Amount_Due\": 12750,\n              \"Purchase_Order_Number\": \"PO-3003;PO-3004\",\n              \"Delivery_/_Completion_Date\": \"2024-12-07\",\n              \"Currency_Unit\": \"USD\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Calculation Error\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Total_Amount_Due\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Calculation Error\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 12750,\n                  \"reason\": \"Recalculation leads to a mismatched total.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-5001\",\n            \"docType\": \"Bank Statement\",\n            \"data\": {\n              \"Account_Number\": \"111222333\",\n              \"Statement_Period\": \"2024-12-01 to 2024-12-31\",\n              \"Opening_or_Beginning_or_Previous_Balance\": 25000,\n              \"Closing_or_Ending_Balance\": 12250,\n              \"Deposit_or_Credit_Totals\": 0,\n              \"Withdrawal_or_Debit_Totals\": 12750,\n              \"Transactional_Details\": \"Payment INV-4001 to Synetix Global\",\n              \"Date_of_transaction\": \"2024-12-10\",\n              \"Transaction_Number\": \"TXN-7001\",\n              \"Balance\": 12500,\n              \"Bank_name\": \"RiverRock Bank\",\n              \"Source\": \"External\",\n              \"File_Type\": \"PDF\"\n            },\n            \"_errors\": [\n              \"Round-trip Error\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Closing_or_Ending_Balance\": 12500\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Closing_or_Ending_Balance\",\n                  \"type\": \"Round-trip Error\",\n                  \"originalValue\": 12500,\n                  \"errorValue\": 12250,\n                  \"reason\": \"Introduced to validate transactional anomalies.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"timing_cutoff_errors\",\n                \"document_mismatches\",\n                \"vendor_irregularities\",\n                \"process_gaps\",\n                \"suspicious_amounts_or_frequencies\",\n                \"external_discrepancies\",\n                \"documentation_anomalies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 5,\n        \"errorsByType\": {\n          \"Missing\": 0,\n          \"Invalid\": 0,\n          \"Mismatch\": 2,\n          \"Incorrect\": 0,\n          \"Negative\": 0\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Invoice amount incorrectly consolidates POs.\",\n            \"affectedDocuments\": [\n              \"INV-4001\",\n              \"PO-3003\",\n              \"PO-3004\"\n            ],\n            \"fields\": [\n              \"Total_Amount_Due\",\n              \"Total_Purchase_Order_Value\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      }
    ],
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.simthetic.ai",
            "x-real-ip": "49.47.69.71",
            "x-forwarded-for": "49.47.69.71",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "12514",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "accept": "application/json, text/plain, */*",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "origin": "https://app.simthetic.ai",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://app.simthetic.ai/",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en-GB;q=0.9,en-IN;q=0.8,en;q=0.7",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {},
          "body": {
            "projectName": "New Document Set",
            "scenarioName": "Docent Scenario",
            "session_id": "06ff0705-9961-4f8f-83f7-0fda0360cca5",
            "company_count": 1,
            "stage1": {
              "company_count": 1,
              "companies": [
                {
                  "company_name": "HealthAxis",
                  "industry": "Healthcare",
                  "region": "United States",
                  "fiscal_year_end": "December 31",
                  "business_context": {
                    "business_model": "Subscription based & Service Oriented",
                    "description": "HealthAxis is a leading healthcare enterprise offering sophisticated digital health solutions. The company operates on a subscription-based model, providing access to a wide range of telehealth services, including virtual consultations and health monitoring services. HealthAxis also offers health data analytics solutions to healthcare providers to improve patient care and operational efficiency."
                  }
                }
              ]
            },
            "profiles": [
              {
                "company_name": "HealthAxis",
                "industry": "healthcare",
                "region": "United States",
                "fiscal_year_end": "December 31",
                "business_context": {
                  "ticker": null,
                  "sector": "Other",
                  "market_cap": null,
                  "primary_products": [
                    "Booking platform",
                    "Practice mgmt"
                  ],
                  "business_model": "Subscription based & Service Oriented",
                  "regulatory_environment": "HIPAA, HITECH",
                  "known_risks": [
                    "PHI handling",
                    "chargebacks/rebates",
                    "cutoff errors",
                    "missing documentation"
                  ],
                  "description": "HealthAxis is a leading healthcare enterprise offering sophisticated digital health solutions. The company operates on a subscription-based model, providing access to a wide range of telehealth services, including virtual consultations and health monitoring services. HealthAxis also offers health data analytics solutions to healthcare providers to improve patient care and operational efficiency.",
                  "revenue_model": "subscription",
                  "geographic_footprint": [
                    "United States"
                  ],
                  "key_customers": [
                    "clinics",
                    "hospitals"
                  ],
                  "seasonal_patterns": false,
                  "prior_audit_findings": null,
                  "management_integrity_concerns": null,
                  "internal_control_maturity": "developing"
                },
                "branding": {
                  "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg",
                  "primary_color": "#334155",
                  "secondary_color": "#0F172A",
                  "font_family": "Inter",
                  "document_style": "modern"
                },
                "revenue_model": "subscription",
                "company_specific_risks": null,
                "vendors": [
                  {
                    "name": "Synetix Global",
                    "entity_type": "vendor",
                    "industry": "healthcare",
                    "address": "575 Market St, Denver, CO",
                    "tags": [
                      "preferred",
                      "net30"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "banks": [
                  {
                    "name": "RiverRock Bank",
                    "entity_type": "bank",
                    "industry": "Financials",
                    "address": "383 Main Ave, Evergreen, CO",
                    "tags": [
                      "primary"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "shipping_partners": [
                  {
                    "name": "SwiftShip Logistics",
                    "entity_type": "shipper",
                    "industry": "Logistics",
                    "address": "1251 Freight Rd, Denver, CO",
                    "tags": [
                      "ground",
                      "tracking"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ]
              }
            ],
            "companies": [
              {
                "company_name": "HealthAxis",
                "industry": "healthcare",
                "documents": [
                  {
                    "document_type": "Disbursement Listing",
                    "source": "Internal",
                    "file_type": "CSV",
                    "required_fields": [
                      "Account_Number",
                      "Date_of_transaction",
                      "Transactional_Details",
                      "Transaction_Amount",
                      "Document_Number",
                      "Transaction_Description",
                      "Vendor_Name",
                      "Vendor_Number"
                    ],
                    "optional_fields": [],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Expenses sub-ledger",
                    "source": "Internal",
                    "file_type": "CSV",
                    "required_fields": [
                      "GL_Account_Number",
                      "GL_Account_Name",
                      "GL_Account_Balance",
                      "Supplier_Name",
                      "Goods_or_Services_Description",
                      "Transaction_Amount",
                      "Date_of_Transaction",
                      "Transaction_Number",
                      "Due_Date_Payables"
                    ],
                    "optional_fields": [
                      "Invoice #",
                      "Invoice Date",
                      "Amount CU",
                      "Currency Unit",
                      "Amount (Functional)",
                      "Amount (USD)"
                    ],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Invoice (Goods)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Item_Quantity",
                      "Item_Price",
                      "Total_Amount_Due",
                      "Purchase_Order_Number",
                      "Delivery_/_Completion_Date",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number_/_Work_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Wire Transfer",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Transaction_Type_(or_Category)",
                      "Amount_(or_Total)",
                      "Requestor",
                      "Recipient",
                      "Wire_Date",
                      "Transaction_(or_Reference)_Number",
                      "Requestor_Account_Number",
                      "Recipient_Account_Number",
                      "Currency"
                    ],
                    "optional_fields": [
                      "Confirmation_Number",
                      "Requestor_Routing_Number",
                      "Requestor_Bank_Name",
                      "Recipient_Routing_Number",
                      "Recipient_Bank_Name",
                      "Memo_Reference"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Shipping Document (Sending)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Shipping_Document_Number",
                      "Shipping_Doc_date",
                      "Customer_name",
                      "Customer_Address",
                      "Purchase_Order_Number",
                      "Item_Quantity",
                      "Product_Description",
                      "Supplier_Name",
                      "Supplier_Address",
                      "Date_Shipped",
                      "Shipping_carrier",
                      "Shipping_method",
                      "Tracking_number"
                    ],
                    "optional_fields": [
                      "Customer_Number",
                      "Supplier_Number",
                      "Product_Code",
                      "Item_Price",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Line_item_amount",
                      "Date_Delivered",
                      "Shipper's_name_and_address",
                      "Consignee's_name_and_address",
                      "Bill_of_lading_number",
                      "Packaging_details",
                      "Insurance_details",
                      "Customs_information",
                      "Proof_of_delivery",
                      "Received_Date",
                      "Shipping_or_Delivery_Terms"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Shipping Document (Receiving)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Shipping_Document_Number",
                      "Shipping_Doc_date",
                      "Customer_name",
                      "Customer_Address",
                      "Purchase_Order_Number",
                      "Item_Quantity",
                      "Product_Description",
                      "Supplier_Name",
                      "Supplier_Address",
                      "Date_Shipped",
                      "Shipping_carrier",
                      "Shipping_method",
                      "Tracking_number"
                    ],
                    "optional_fields": [
                      "Customer_Number",
                      "Supplier_Number",
                      "Product_Code",
                      "Item_Price",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Line_item_amount",
                      "Date_Delivered",
                      "Shipper's_name_and_address",
                      "Consignee's_name_and_address",
                      "Bill_of_lading_number",
                      "Packaging_details",
                      "Insurance_details",
                      "Customs_information",
                      "Proof_of_delivery",
                      "Received_Date",
                      "Shipping_or_Delivery_Terms"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Order Document (Sales and Purchases)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Purchase_Order_Number",
                      "Purchase_Order_Date",
                      "Supplier_Name",
                      "Customer_Name",
                      "Item_Quantity",
                      "Product_Description",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Item_Price",
                      "Total_Purchase_Order_Value",
                      "Delivery_Date"
                    ],
                    "optional_fields": [
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Payment_Terms",
                      "Terms_and_Conditions",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Bank Statement",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Account_Number",
                      "Statement_Period",
                      "Opening_or_Beginning_or_Previous_Balance",
                      "Closing_or_Ending_Balance",
                      "Deposit_or_Credit_Totals",
                      "Withdrawal_or_Debit_Totals",
                      "Transactional_Details",
                      "Date_of_transaction",
                      "Transaction_Number",
                      "Balance",
                      "Bank_name"
                    ],
                    "optional_fields": [
                      "Deposit_or_Credit_Amount",
                      "Withdrawals_or_Debit_Amounts",
                      "Fees_Charged",
                      "Interest_Earned",
                      "Interest_Paid",
                      "Account_Alerts",
                      "Account_Closure_details",
                      "Account_type"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Invoices (for Services)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Service_Date",
                      "Total_Amount_Due",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Purchase Contract Snippet",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Amount",
                      "Service_dates",
                      "Transaction_id"
                    ],
                    "optional_fields": [],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  }
                ]
              }
            ],
            "warnings": []
          },
          "webhookUrl": "https://n8n.simthetic.ai/webhook/simthetic",
          "executionMode": "production"
        }
      }
    ],
    "When clicking ‘Execute workflow’": [
      {
        "json": {
          "body": {
            "projectName": "Docent Project",
            "scenarioName": "Docent Scenario",
            "session_id": "21c8d724-fdbb-49db-9fbe-612d82e87645",
            "company_count": 1,
            "stage1": {
              "company_count": 1,
              "companies": [
                {
                  "company_name": "NeuroSynth MedTech",
                  "industry": "Healthcare",
                  "region": "United States",
                  "fiscal_year_end": "December 31",
                  "business_context": {
                    "business_model": "Subscription-based",
                    "description": "NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency."
                  }
                }
              ]
            },
            "profiles": [
              {
                "company_name": "NeuroSynth MedTech",
                "industry": "healthcare",
                "region": "United States",
                "fiscal_year_end": "December 31",
                "business_context": {
                  "ticker": null,
                  "sector": "Other",
                  "market_cap": null,
                  "primary_products": [
                    "Booking platform",
                    "Practice mgmt"
                  ],
                  "business_model": "Subscription-based",
                  "regulatory_environment": "HIPAA, HITECH",
                  "known_risks": [
                    "PHI handling",
                    "chargebacks/rebates",
                    "cutoff errors",
                    "missing documentation"
                  ],
                  "description": "NeuroSynth MedTech is a health tech company specialized in creating transformative technology for the neurology sector. They offer a subscription-based model where healthcare organizations get access to their innovative medical devices and software solutions. These tools help doctors to diagnose and treat neurological disorders with higher accuracy and efficiency.",
                  "revenue_model": "subscription",
                  "geographic_footprint": [
                    "United States"
                  ],
                  "key_customers": [
                    "clinics",
                    "hospitals"
                  ],
                  "seasonal_patterns": false,
                  "prior_audit_findings": null,
                  "management_integrity_concerns": null,
                  "internal_control_maturity": "developing"
                },
                "branding": {
                  "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-23.svg",
                  "primary_color": "#334155",
                  "secondary_color": "#0F172A",
                  "font_family": "Inter",
                  "document_style": "modern"
                },
                "revenue_model": "subscription",
                "company_specific_risks": null,
                "vendors": [
                  {
                    "name": "Synetix Global",
                    "entity_type": "vendor",
                    "industry": "healthcare",
                    "address": "575 Market St, Denver, CO",
                    "tags": [
                      "preferred",
                      "net30"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "banks": [
                  {
                    "name": "RiverRock Bank",
                    "entity_type": "bank",
                    "industry": "Financials",
                    "address": "383 Main Ave, Evergreen, CO",
                    "tags": [
                      "primary"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-10.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "shipping_partners": [
                  {
                    "name": "SwiftShip Logistics",
                    "entity_type": "shipper",
                    "industry": "Logistics",
                    "address": "1251 Freight Rd, Denver, CO",
                    "tags": [
                      "ground",
                      "tracking"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ]
              }
            ],
            "companies": [
              {
                "company_name": "NeuroSynth MedTech",
                "industry": "healthcare",
                "documents": [
                  {
                    "document_type": "Invoice (Goods)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Item_Quantity",
                      "Item_Price",
                      "Total_Amount_Due",
                      "Purchase_Order_Number",
                      "Delivery_/_Completion_Date",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number_/_Work_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Bank Statement",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Account_Number",
                      "Statement_Period",
                      "Opening_or_Beginning_or_Previous_Balance",
                      "Closing_or_Ending_Balance",
                      "Deposit_or_Credit_Totals",
                      "Withdrawal_or_Debit_Totals",
                      "Transactional_Details",
                      "Date_of_transaction",
                      "Transaction_Number",
                      "Balance",
                      "Bank_name"
                    ],
                    "optional_fields": [
                      "Deposit_or_Credit_Amount",
                      "Withdrawals_or_Debit_Amounts",
                      "Fees_Charged",
                      "Interest_Earned",
                      "Interest_Paid",
                      "Account_Alerts",
                      "Account_Closure_details",
                      "Account_type"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Shipping Document (Sending)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Shipping_Document_Number",
                      "Shipping_Doc_date",
                      "Customer_name",
                      "Customer_Address",
                      "Purchase_Order_Number",
                      "Item_Quantity",
                      "Product_Description",
                      "Supplier_Name",
                      "Supplier_Address",
                      "Date_Shipped",
                      "Shipping_carrier",
                      "Shipping_method",
                      "Tracking_number"
                    ],
                    "optional_fields": [
                      "Customer_Number",
                      "Supplier_Number",
                      "Product_Code",
                      "Item_Price",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Line_item_amount",
                      "Date_Delivered",
                      "Shipper's_name_and_address",
                      "Consignee's_name_and_address",
                      "Bill_of_lading_number",
                      "Packaging_details",
                      "Insurance_details",
                      "Customs_information",
                      "Proof_of_delivery",
                      "Received_Date",
                      "Shipping_or_Delivery_Terms"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Order Document (Sales and Purchases)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Purchase_Order_Number",
                      "Purchase_Order_Date",
                      "Supplier_Name",
                      "Customer_Name",
                      "Item_Quantity",
                      "Product_Description",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Item_Price",
                      "Total_Purchase_Order_Value",
                      "Delivery_Date"
                    ],
                    "optional_fields": [
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Payment_Terms",
                      "Terms_and_Conditions",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  },
                  {
                    "document_type": "Disbursement Listing",
                    "source": "Internal",
                    "file_type": "CSV",
                    "required_fields": [
                      "Account_Number",
                      "Date_of_transaction",
                      "Transactional_Details",
                      "Transaction_Amount",
                      "Document Number",
                      "Transaction Description",
                      "Vendor Name",
                      "Vendor Number"
                    ],
                    "optional_fields": [],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Synetix Global"
                      ],
                      "primary_bank": "RiverRock Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "healthcare",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "document_mismatches",
                      "vendor_irregularities",
                      "process_gaps",
                      "suspicious_amounts_or_frequencies",
                      "external_discrepancies",
                      "documentation_anomalies"
                    ]
                  }
                ]
              }
            ],
            "warnings": []
          }
        }
      }
    ],
    "Webhook8": [
      {
        "json": {
          "headers": {
            "host": "n8n.simthetic.ai",
            "x-real-ip": "197.248.98.159",
            "x-forwarded-for": "197.248.98.159",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "7673",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "accept": "application/json, text/plain, /",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "origin": "https://app.simthetic.ai",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://app.simthetic.ai/",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {},
          "body": {
            "projectName": "New Document Set",
            "scenarioName": "Docent Scenario",
            "session_id": "3e39421c-c32a-4767-bb84-f873269a7de7",
            "company_count": 1,
            "stage1": {
              "company_count": 1,
              "companies": [
                {
                  "company_name": "ProTech Manufacturing Inc.",
                  "industry": "Manufacturing",
                  "region": "United States",
                  "fiscal_year_end": "December 31",
                  "business_context": {
                    "business_model": "ProTech Manufacturing Inc. operates on a business-to-business (B2B) model, wherein they manufacture and supply advanced tech components to other businesses including technology companies, automakers, and aerospace industries.",
                    "description": "ProTech Manufacturing Inc. is a leading manufacturer of advanced tech components. The company specializes in the production of high-precision components and has a state-of-the-art manufacturing facility. They are known for their high-quality products and timely delivery."
                  }
                }
              ]
            },
            "profiles": [
              {
                "company_name": "ProTech Manufacturing Inc.",
                "industry": "manufacturing",
                "region": "United States",
                "fiscal_year_end": "December 31",
                "business_context": {
                  "ticker": null,
                  "sector": "Other",
                  "market_cap": null,
                  "primary_products": null,
                  "business_model": "ProTech Manufacturing Inc. operates on a business-to-business (B2B) model, wherein they manufacture and supply advanced tech components to other businesses including technology companies, automakers, and aerospace industries.",
                  "regulatory_environment": "Standard U.S. regulations",
                  "known_risks": [
                    "cutoff errors",
                    "missing documentation"
                  ],
                  "description": "ProTech Manufacturing Inc. is a leading manufacturer of advanced tech components. The company specializes in the production of high-precision components and has a state-of-the-art manufacturing facility. They are known for their high-quality products and timely delivery.",
                  "revenue_model": "mixed",
                  "geographic_footprint": [
                    "United States"
                  ],
                  "key_customers": [],
                  "seasonal_patterns": false,
                  "prior_audit_findings": null,
                  "management_integrity_concerns": null,
                  "internal_control_maturity": "developing"
                },
                "branding": {
                  "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-2.svg",
                  "primary_color": "#334155",
                  "secondary_color": "#0F172A",
                  "font_family": "Inter",
                  "document_style": "modern"
                },
                "revenue_model": "mixed",
                "company_specific_risks": null,
                "vendors": [
                  {
                    "name": "Hanover Office",
                    "entity_type": "vendor",
                    "industry": "manufacturing",
                    "address": "810 Market St, Denver, CO",
                    "tags": [
                      "preferred",
                      "net30"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-24.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "banks": [
                  {
                    "name": "Hanover Bank",
                    "entity_type": "bank",
                    "industry": "Financials",
                    "address": "6652 Main Ave, Evergreen, CO",
                    "tags": [
                      "primary"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-12.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "shipping_partners": [
                  {
                    "name": "SwiftShip Logistics",
                    "entity_type": "shipper",
                    "industry": "Logistics",
                    "address": "6060 Freight Rd, Denver, CO",
                    "tags": [
                      "ground",
                      "tracking"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-13.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ]
              }
            ],
            "companies": [
              {
                "company_name": "ProTech Manufacturing Inc.",
                "industry": "manufacturing",
                "documents": [
                  {
                    "document_type": "Invoice (Goods)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Item_Quantity",
                      "Item_Price",
                      "Total_Amount_Due",
                      "Purchase_Order_Number",
                      "Delivery_/_Completion_Date",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number_/_Work_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Hanover Office"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "manufacturing",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "vendor_irregularities"
                    ],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Date_of_Invoice": "2024-08-24",
                      "Supplier_Name": "Hanover Office",
                      "Total_Amount_Due": "20764.00",
                      "Item_Price": "356.00",
                      "Item_Quantity": "116",
                      "Purchase_Order_Number": "PO-55645",
                      "Invoice_Number": "INV-353018"
                    }
                  },
                  {
                    "document_type": "Wire Transfer",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Transaction_Type_(or_Category)",
                      "Amount_(or_Total)",
                      "Requestor",
                      "Recipient",
                      "Wire_Date",
                      "Transaction_(or_Reference)_Number",
                      "Requestor_Account_Number",
                      "Recipient_Account_Number",
                      "Currency"
                    ],
                    "optional_fields": [
                      "Confirmation_Number",
                      "Requestor_Routing_Number",
                      "Requestor_Bank_Name",
                      "Recipient_Routing_Number",
                      "Recipient_Bank_Name",
                      "Memo_Reference"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Hanover Office"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "manufacturing",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "vendor_irregularities"
                    ],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Wire_Date": "2024-08-04",
                      "Account_Number": "72132811",
                      "Requestor_Account_Number": "87379528",
                      "Recipient_Account_Number": "29293503",
                      "Transaction_(or_Reference)_Number": "WT-2593884"
                    }
                  },
                  {
                    "document_type": "Bank Statement",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Account_Number",
                      "Statement_Period",
                      "Opening_or_Beginning_or_Previous_Balance",
                      "Closing_or_Ending_Balance",
                      "Deposit_or_Credit_Totals",
                      "Withdrawal_or_Debit_Totals",
                      "Transactional_Details",
                      "Date_of_transaction",
                      "Transaction_Number",
                      "Balance",
                      "Bank_name"
                    ],
                    "optional_fields": [
                      "Deposit_or_Credit_Amount",
                      "Withdrawals_or_Debit_Amounts",
                      "Fees_Charged",
                      "Interest_Earned",
                      "Interest_Paid",
                      "Account_Alerts",
                      "Account_Closure_details",
                      "Account_type"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Hanover Office"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "manufacturing",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "vendor_irregularities"
                    ],
                    "prefill": {
                      "Date_of_transaction": "2024-09-13",
                      "Bank_name": "Hanover Bank",
                      "Account_Number": "72043200",
                      "Requestor_Account_Number": "24862225"
                    }
                  },
                  {
                    "document_type": "Order Document (Sales and Purchases)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Purchase_Order_Number",
                      "Purchase_Order_Date",
                      "Supplier_Name",
                      "Customer_Name",
                      "Item_Quantity",
                      "Product_Description",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Item_Price",
                      "Total_Purchase_Order_Value",
                      "Delivery_Date"
                    ],
                    "optional_fields": [
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Payment_Terms",
                      "Terms_and_Conditions",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Hanover Office"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "SwiftShip Logistics"
                      ],
                      "industry": "manufacturing",
                      "region": "United States"
                    },
                    "edge_case_hooks": [
                      "timing_cutoff_errors",
                      "vendor_irregularities"
                    ],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Supplier_Name": "Hanover Office",
                      "Item_Price": "2842.00",
                      "Item_Quantity": "190",
                      "Purchase_Order_Number": "PO-14257"
                    }
                  }
                ]
              }
            ],
            "warnings": []
          },
          "webhookUrl": "https://n8n.simthetic.ai/webhook/simthetic",
          "executionMode": "production"
        }
      }
    ],
    "Webhook5": [
      {
        "json": {
          "headers": {
            "host": "n8n.simthetic.ai",
            "x-real-ip": "197.248.98.159",
            "x-forwarded-for": "197.248.98.159",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "dnt": "1",
            "upgrade-insecure-requests": "1",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "none",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "document",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "priority": "u=0, i",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2B0jY8MrrfiXJ4ouqisHXjZdYP2a5Z1JwM%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19gYV1ayiLhn0aC%2Bc4Qru2%2FVm1LumkzRI4%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjJjYjRlNTE5LTA2YjYtNGNkOC05OTRjLTk2MmVjYTE4OWQyYiIsImhhc2giOiJIYjZFSHUwRko1IiwiYnJvd3NlcklkIjoia3htV2QrL2ZybVIrK1NicHpzQ3FSNHdJblcvNC8vdjhJZGRWU0IxUFRDdz0iLCJpYXQiOjE3NTY1NDYzNTcsImV4cCI6MTc1NzE1MTE1N30.OAW_HcNO2MOlqrwRK4MUs5xjUdgL5gAgDVEQN0gDmoA; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX19EzbBCXlztyTaZ8cyotY993Ifeld6%2FD79Kc%2BMEbwWq2WmpqJG%2B%2B09xuWd5%2BV1Y1Kt9umsCzmycNg%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2FMHHTKVSgwl04HgKHWNsUpec9G%2B3mAFKYiHM5E91LIQjNXmvn%2BzTA%2F4sbw0felIBJ6ZW5vKBOy46TkpffbU8BsIwKNnmvAFxuKbxmSFpyAGbv74stWHiQyWg4t846bVN%2B6YI%2BLMvHjPgWVJsokbu4527UtQH9rOoQ%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2B%2Bul1awaYJ8eDxPySKcl9l3UeYwk0KV3JgUGy9neUsx19o%2FYv53RSa1wW%2F0boWXCJVWF5HG6tAOCZH3QWeMDaJMFUCaNLqzYN9mNLzpWHYyMU9OLuU406s7rzAcVvhbcRKxydHFXXZGQ%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22eac4d2e7e2b0981b4f9a7f3dcc4185642ba45d4e73f996045d886cb322cfcc0e%232cb4e519-06b6-4cd8-994c-962eca189d2b%22%2C%22%24sesid%22%3A%5B1756900495459%2C%2201990f6e-073e-7651-907b-63f99d0eec93%22%2C1756900493116%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fn8n.simthetic.ai%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX19TyK1nSj0SDUKtBPNTH0nf30fipSQQ%2BV1%2FuxRS9Ai0oFzI76HivKNe3MYOBVkwJGmHBqmy%2BT45syHdSYb0AVubuiyTWlg%2FPCNT2gO1PA3Q%2BaOW2E9HuVLb0fAThaGofWCdva0oToATPA%3D%3D"
          },
          "params": {},
          "query": {
            "file_id": "795"
          },
          "body": {},
          "webhookUrl": "https://n8n.simthetic.ai/webhook-test/get_pdf",
          "executionMode": "test"
        }
      }
    ]
  },
  "repo": {
    "owner": "Isaakkamau",
    "name": "simthetic-n8n-backup"
  },
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-29T17:31:09.582Z",
      "updatedAt": "2025-08-29T17:31:09.582Z",
      "role": "workflow:owner",
      "workflowId": "bPa7I8nxXuxdQ2ll",
      "projectId": "qQl0DgBrylkFr1iU"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 8,
  "updatedAt": "2025-09-17T07:37:01.000Z",
  "versionId": "d84fca83-cd74-4b85-8389-3293dc5af73f"
}