{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Jsons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_jsons": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents": {
      "main": [
        [
          {
            "node": "extract_jsons",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "validate_documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Jsons": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Errors": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "validate_documents2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent5": {
      "main": [
        [
          {
            "node": "validate_documents3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents3": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Insert rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "validate_documents4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "validate_documents4": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "convert-to-csv",
            "type": "main",
            "index": 0
          },
          {
            "node": "convert-to-txt",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Convert to txt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert-to-csv": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert-to-txt": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to txt": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Compression1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "convert-to-csv",
            "type": "main",
            "index": 0
          },
          {
            "node": "convert-to-txt",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "list-all-simulations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook3": {
      "main": [
        [
          {
            "node": "view-specific-simulation-documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list-all-simulations": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "view-specific-simulation-documents": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "Decompress1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression1": {
      "main": [
        [
          {
            "node": "Decompress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decompress": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decompress1": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook4": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Select rows from a table2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Select rows from a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Select rows from a table7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook7": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Respond to Webhook6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table7": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Convert to File26",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File27",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File26": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to File27": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-17T06:57:08.318Z",
  "id": "TR9qmMuMGp61S4nh",
  "isArchived": false,
  "meta": null,
  "name": "Simulation_Final",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "simthetic",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5320,
        -1520
      ],
      "id": "e8d2831c-f0cf-43b6-95fa-e43a2502d98f",
      "name": "Webhook",
      "webhookId": "0ef9e4ea-1df2-4710-8d15-3e4188394e84"
    },
    {
      "parameters": {
        "content": "# Example Request:\n\ncurl -X POST https://n8n.simthetic.ai/webhook-test/simthetic \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"projectName\": \"Abc project\",\n    \"scenarioName\": \"Scenario 1\",\n    \"documents\": [\n      {\n        \"docType\": \"Invoice\",\n        \"variables\": [\n          {\n            \"name\": \"Invoice Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\", \"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Amount\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Mismatch\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Vendor Name\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"PO Reference\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"dependent\",\n            \"dependentOn\": \"Purchase Order.PO Number\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Purchase Order\",\n        \"variables\": [\n          {\n            \"name\": \"PO Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Total PO Value\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Incorrect\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Vendor Name\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Delivery Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Terms\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Payment Voucher\",\n        \"variables\": [\n          {\n            \"name\": \"Voucher ID\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Amount\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Mismatch\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Payee Name\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Payment Method\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"GL Code\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Bank Statement\",\n        \"variables\": [\n          {\n            \"name\": \"Transaction Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Withdrawal Amount\",\n            \"type\": \"float\",\n            \"min\": 0,\n            \"max\": 1000000,\n            \"spectrum\": [\"Incorrect\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Deposit Amount\",\n            \"type\": \"float\",\n            \"min\": 0,\n            \"max\": 1000000,\n            \"spectrum\": [\"Incorrect\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Balance\",\n            \"type\": \"float\",\n            \"min\": -1000000,\n            \"max\": 1000000,\n            \"spectrum\": [\"Negative\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Account Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          }\n        ]\n      },\n      {\n        \"docType\": \"Wire Transfer\",\n        \"variables\": [\n          {\n            \"name\": \"Date\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Invalid\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Withdrawal Amount\",\n            \"type\": \"float\",\n            \"min\": 1000,\n            \"max\": 100000,\n            \"spectrum\": [\"Mismatch\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Payee\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          },\n          {\n            \"name\": \"Account Number\",\n            \"type\": \"string\",\n            \"min\": null,\n            \"max\": null,\n            \"spectrum\": [\"Missing\"],\n            \"variableType\": \"independent\"\n          }\n        ]\n      }\n    ]\n  }'",
        "height": 700,
        "width": 760,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5520,
        -1860
      ],
      "typeVersion": 1,
      "id": "fa8cc654-e40b-4779-bdd8-e4155a232528",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst data = $input.all()[0].json;\n\n// Calculate total document count across all simulation runs\nlet totalDocumentCount = 0;\n\n// Loop through each simulation run and sum up the document counts\ndata.simulatedResponse.simulationRuns.forEach(run => {\n    totalDocumentCount += run.generatedDocuments.length;\n});\n\n// Return the result\nreturn [{\n    json: {\n        ...data,\n        document_count: totalDocumentCount\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3400,
        -1540
      ],
      "id": "6fbc8e62-9107-4768-b7eb-2f5275e4c430",
      "name": "Code5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bf263bb0-d738-4367-b559-939263559b6e",
              "leftValue": "={{ $('Code5').item.json.simulatedResponse.simulationProject }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2680,
        -1540
      ],
      "id": "a0c4a9bf-ebc4-4db4-bcbc-48b3e493874c",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "141bbaaa-3328-4d2a-87af-31446f6d4a2e",
              "name": "simulatedResponse",
              "value": "={{ $json.formattedResponse }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3580,
        -1540
      ],
      "id": "13097b00-1a92-49f0-9a66-07690d1f39ed",
      "name": "extract_jsons"
    },
    {
      "parameters": {
        "jsCode": "return {\n  formattedResponse: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3800,
        -1520
      ],
      "id": "ea965a36-803e-488b-bb01-794955955d62",
      "name": "validate_documents",
      "retryOnFail": true,
      "maxTries": 4,
      "waitBetweenTries": 2000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "errorMessage": "Your documents are invalid. Wrong format or missing fields"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -2500,
        -1380
      ],
      "id": "11b1676d-0272-46dd-92a3-481872ca38af",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=### Persona\n\nYou are an expert AI Data Synthesizer specializing in creating realistic, interconnected datasets for financial auditing and process analysis simulations. Your primary function is to generate complex business scenarios involving multiple documents (like Purchase Orders, Invoices, and Bank Statements) based on a high-level configuration. You must create logical and causal links between these documents.\n\n### Goal\n\nYour goal is to process an incoming JSON configuration that defines a simulation scenario. Based on this configuration, you will generate a detailed JSON output containing multiple \"simulation runs\". All document  mentioned should be processed and no document  should be skipped\n\n### Output JSON Format \n\nYou MUST produce a JSON object with exactly below structure :\n\n{\n  \"simulationProject\": \"<Project Name - Scenario ID>\",\n  \"simulationRuns\": [\n    {\n      \"simulationId\": \"<Simulation Run ID>\",\n      \"simulationNarrative\": \"<High-level narrative or storyline for this run>\",\n      \"metadata\": {\n        \"totalDocuments\": <Number of documents>,\n        \"documentCounts\": {\n          \"<Document Type 1>\": <Count>,\n          \"<Document Type 2>\": <Count>,\n          \"<Document Type 3>\": <Count>\n          /* repeat for all documents */\n        },\n        \"extra\": {\n          \"threads\": [\n            /* Narrative threads linking multiple docs (AI to fill) */\n          ],\n          \"fieldNameMap\": {\n            \"<Human Readable Field>\": \"<Canonical_Field_Name>\"\n            /* repeat for all fields */\n          },\n          \"edgeCaseHooks\": [\n            /* Any rules for deduplication / anomaly injection */\n          ]\n        }\n      },\n      \"generatedDocuments\": [\n        {\n          \"docId\": \"<Unique Doc ID>\",\n          \"docType\": \"<Document Type (e.g., Purchase Order, Invoice, Bank Statement)>\",\n          \"data\": [\n            {\n              \"<Canonical_Field_Name_1>\": \"<Value 1>\",\n              \"<Canonical_Field_Name_2>\": \"<Value 2>\",\n              \"<Canonical_Field_Name_3>\": \"<Value 3>\",\n              \"<Canonical_Field_Name_N>\": \"<Value N>\",\n              \"Source\": \"<Internal | External>\",\n              \"File_Type\": \"<PDF | DOCX | CSV | ...>\"\n            },\n            {\n              \"<Canonical_Field_Name_1>\": \"<Another Value 1>\",\n              \"<Canonical_Field_Name_2>\": \"<Another Value 2>\",\n              \"<Canonical_Field_Name_3>\": \"<Another Value 3>\",\n              \"<Canonical_Field_Name_N>\": \"<Another Value N>\",\n              \"Source\": \"<Internal | External>\",\n              \"File_Type\": \"<PDF | DOCX | CSV | ...>\"\n            }\n            /* Repeat as needed for multiple rows/records within this document */\n          ]\n        }\n        /* Repeat for other generated documents in this simulation run */\n      ]\n    }\n  ]\n}\n\nStrict Generation Rules\n\nA, Process all document, dont leave any document. Only 1 document per type should be created. Any additiopnal transaction should be under data. \n\nB. Populate ALL required_fields\n\nFor each generatedDocuments[i], the data object must include every field listed in that doc spec’s required_fields[] from the input.\n\nUse the same key names as in required_fields[] (preserve underscores / exact casing).\n\nInclude two extra keys for routing: \"Source\" (from the doc spec source) and \"File_Type\" (from file_type).\n\nC. Coherent Transactions (cross-document linkage)\n\nUse linking_fields[] to propagate shared values across docs. Normalize label→field names:\n\n\"PO Number\" → \"Purchase_Order_Number\"\n\n\"Invoice Number\" → \"Invoice_Number\"\n\n\"Amount\" → For invoices: \"Total_Amount_Due\"; for bank/disbursement: a matching debit/credit field\n\n\"Date\" → appropriate date field per doc (e.g., \"Purchase_Order_Date\", \"Date_of_Invoice\", \"Date_of_transaction\")\n\n\"Vendor\" → unify as \"Supplier_Name\" (purchasing docs) and \"Vendor Name\" where applicable\n\nEnsure amounts and dates make logical sense in sequence:\n\nPurchase_Order_Date ≤ Date_of_Invoice ≤ Date_of_transaction\n\n1→n cases: sum of invoice amounts equals PO total; payments match invoice totals (full or partial per narrative).\n\nPrefer realistic entities from hints and profiles (preferred_vendors, banks, shipping_partners).\n\nD. Create only 1 Order Document (Sales and Purchases).In order document add 2 data.\n\n1st data should be of goods\n2nd data should be of services\n\nThe Order Document (Sales and Purchases) 1st data  should match with Invoices (Goods) \n\nThe Order Document (Sales and Purchases) 2nd data  should match with Invoices (Services)\n\nThe Shipping (Sending) and Shipping (Recieving) item quantity need to  be equal \n\nThe Shipping (Sending) and Shipping (Recieving) item quantity to be equal to item quantity in Order Document (Sales and Purchases) for goods\n\nThe invoices for goods  need to have Purchase Order Number from Order Document (Sales and Purchases)  \n\nThe invoices for services need to have Purchase Order Number from Order Document (Sales and Purchases) \n\nFor both invoices add 2 data in wire transfer, Disbursment Listing, Expense ledger and bank statement. They all should match with invoice amount and order document.\n\nE. All disbursment enteries, wire transfer, General Ledger and bank statement transactions should match. Only 1 document of each type should be created. \n\nF. Simulation Runs\n\nProduce 1 runs for each doument :\n\n1 PO  → 1 Invoice (Services)  → 1 Payment (full settlement).\n1 PO  → 1 Invoice (Goods) → 1 Payment (full settlement).\n\nProvide a short simulation Narrative describing the flow.\n\nG. Metadata\n\nmetadata.documentCounts must report total number of items created across generated documents.\n\nmetadata.totalDocuments equals the total number of items in generatedDocuments.\n\nmetadata.extra must include:\n\nthreads[] describing coherent chains,\n\nfieldNameMap you used,\n\n\nH. Validation\n\nBefore returning, verify:\n\n- All document  mentioned should be processed. No document  should be skipped. Only 1 document per type should be created. Any additiopnal transaction should be under data. \n\n\n- All required fields exist for each document in data. \n\n- In order document add 2 data.\n      1st data should be of goods\n      2nd data should be of services\n\n- For both invoices add 2 data in wire transfer, Disbursment Listing, Expense ledger and bank statement. They all should match with invoice amount and order document.\n\n- Shared identifiers (PO/Invoice numbers) match across linked docs.\n\n- Amounts reconcile (PO = sum(invoices); payments = invoices paid per narrative).\n\n- Dates are chronological.\n\n- The invoices for goods  need to have Purchase Order Number from Order Document (Sales and Purchases) \n\n- The invoices for services need to have Purchase Order Number from Order Document (Sales and Purchases)\n\n\nBelow is the incoming JSON from a user:\n{{ JSON.stringify($('Get Jsons').item.json, null, 2) }}\n\nUse the Input JSON Format above.\n\nProduce the UPDATED Output JSON Format.\n\nIn every generatedDocuments[].data, populate all required_fields with coherent values, plus \"Source\" and \"File_Type\".\n\n\nEnsure end-to-end coherence across documents (IDs, amounts, dates, vendor/bank consistency).\n\nReturn 1 simulation runs with accurate metadata.\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else. Verify output to be valid json.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -4380,
        -1520
      ],
      "id": "9e0659e6-2804-4e15-a97a-c5561f5f5e0b",
      "name": "AI Agent1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -4360,
        -1300
      ],
      "id": "a14d6057-f0a0-4bd5-a218-d4271fa5f5b0",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Validate DocumentAgent outputs if they are in correct format\n",
        "height": 700,
        "width": 1620,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3840,
        -1860
      ],
      "typeVersion": 1,
      "id": "7dc6ffe1-be59-46f9-9e9e-e54b3c516cb8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# **Test Plan** \n## Create a test plan",
        "height": 700,
        "width": 1580
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4720,
        -2580
      ],
      "typeVersion": 1,
      "id": "6b648c82-7670-46f4-a80f-5cce0a8a79d9",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# **DocumentAgent**\n## Emit coherent document bundles per defined simulations in a given scenario eg a scenario can have this interconnected documents(Invoices, POs, Vouchers, Bank Statements, GL entries)",
        "height": 700,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4720,
        -1860
      ],
      "typeVersion": 1,
      "id": "fa9a7eb4-9761-4a2b-87a0-c598f78e8ae4",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# Output Generator\nGenerate documents for each simulation",
        "height": 720,
        "width": 1220,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        -1860
      ],
      "typeVersion": 1,
      "id": "bdee249e-abf2-470b-8d08-79d50f8b9707",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: $json.body\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4640,
        -1520
      ],
      "id": "cc8247f5-2e1a-4afc-ab9b-bfe9a580a0c5",
      "name": "Get Jsons"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "project_name": "={{ $('Get Jsons').item.json.companies[0].company_name }}",
            "document_count": "={{ $json.document_count }}",
            "scenario_name": "={{ $('Get Jsons').item.json.session_id }}",
            "input_config": "={{ $('Webhook').first().json.body }}",
            "created_at": "={{ $now }}",
            "cleansimulation": "={{ $json.simulatedResponse\n }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "project_name",
              "displayName": "project_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "scenario_name",
              "displayName": "scenario_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "document_count",
              "displayName": "document_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "input_config",
              "displayName": "input_config",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "is_deleted",
              "displayName": "is_deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cleansimulation",
              "displayName": "cleansimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3200,
        -1540
      ],
      "id": "60f457d9-f426-468a-8831-68e3796a5725",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.companies[0].documents",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -4480,
        -2340
      ],
      "id": "55f6e291-eeeb-469e-9be8-54a92fdb3863",
      "name": "Split Out"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20f0bdc1-ecd9-4ff0-8623-6736f8a0621c",
              "name": "Errors",
              "value": "[\n  {\n    \"Edge_Case\": \"Timing/Cutoff errors\",\n    \"Errors\": [\n      {\n        \"Error\": \"Unrecorded liability\",\n        \"How_it_surfaces\": \"Invoice dated before year-end, recorded after\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\"]\n      },\n      {\n        \"Error\": \"Late invoice\",\n        \"How_it_surfaces\": \"Service date in prior period, invoice generated late\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\"]\n      },\n      {\n        \"Error\": \"Cash basis error\",\n        \"How_it_surfaces\": \"Payment made, but invoice never recorded\",\n        \"Relevant_documents\": [\"Bank Statement\", \"GL\"]\n      },\n      {\n        \"Error\": \"Backdated invoice\",\n        \"How_it_surfaces\": \"Backdated invoice to shift expenses\",\n        \"Relevant_documents\": [\"GL\", \"Invoice\", \"Purchase Order\", \"Bank Statement\", \"Wire\"]\n      },\n      {\n        \"Error\": \"Late payment\",\n        \"How_it_surfaces\": \"Recurring expense paid late, pushing recognition out of period\",\n        \"Relevant_documents\": [\"Bank Statement\", \"GL\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Mismatch between linked documents\",\n    \"Errors\": [\n      {\n        \"Error\": \"Amount mismatch\",\n        \"How_it_surfaces\": \"Invoice amount > PO amount\",\n        \"Relevant_documents\": [\"Invoice\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Item/service mismatch\",\n        \"How_it_surfaces\": \"Invoice includes items/services not on the PO\",\n        \"Relevant_documents\": [\"Invoice\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Payment mismatch\",\n        \"How_it_surfaces\": \"Bank payment amount ≠ invoice amount (partial or overpayment)\",\n        \"Relevant_documents\": [\"Invoice\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Missing PO\",\n        \"How_it_surfaces\": \"Missing PO but invoice exists (unauthorized purchase)\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Duplicate invoice\",\n        \"How_it_surfaces\": \"Duplicate invoice number with different amounts\",\n        \"Relevant_documents\": [\"GL\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Vendor irregularities\",\n    \"Errors\": [\n      {\n        \"Error\": \"Unapproved vendor\",\n        \"How_it_surfaces\": \"Unapproved vendor used for recurring payments\",\n        \"Relevant_documents\": [\"GL\"]\n      },\n      {\n        \"Error\": \"Conflict of interest\",\n        \"How_it_surfaces\": \"Employee-owned vendor (conflict of interest)\",\n        \"Relevant_documents\": [\"GL\"]\n      },\n      {\n        \"Error\": \"Name mismatch\",\n        \"How_it_surfaces\": \"Vendor name subtly altered (e.g., ‘Acme Ltd.’ vs ‘ACME Limited’)\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Purchase Order\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Shell company\",\n        \"How_it_surfaces\": \"Shell company with no service description in invoice\",\n        \"Relevant_documents\": [\"Invoice\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Split invoices\",\n        \"How_it_surfaces\": \"Split invoices just under approval thresholds to avoid escalation\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Bank Statement\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Suspicious amounts or frequencies\",\n    \"Errors\": [\n      {\n        \"Error\": \"Round dollar\",\n        \"How_it_surfaces\": \"Round-dollar invoices (e.g., $10,000 exactly)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Identical series\",\n        \"How_it_surfaces\": \"Invoice series with near-identical line items\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Odd frequency\",\n        \"How_it_surfaces\": \"Odd-frequency payments (e.g., weekly for annual services)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Same day payments\",\n        \"How_it_surfaces\": \"Multiple payments to same vendor on same day\",\n        \"Relevant_documents\": [\"Bank Statement\", \"Wire\", \"GL\"]\n      },\n      {\n        \"Error\": \"Same invoice\",\n        \"How_it_surfaces\": \"Same invoice reused across months\",\n        \"Relevant_documents\": [\"Invoice\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Description / Documentation Anomalies\",\n    \"Errors\": [\n      {\n        \"Error\": \"Vague\",\n        \"How_it_surfaces\": \"Missing or vague service descriptions\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Description mismatch\",\n        \"How_it_surfaces\": \"Descriptions that don’t match GL category or PO\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Keywords\",\n        \"How_it_surfaces\": \"Suspicious keywords (e.g., ‘consulting’, ‘miscellaneous’, ‘special project’)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Calculation errors\",\n        \"How_it_surfaces\": \"Broken field logic (e.g., total ≠ line item sum)\",\n        \"Relevant_documents\": [\"Invoice\"]\n      },\n      {\n        \"Error\": \"Fake contact\",\n        \"How_it_surfaces\": \"Fake email/contact on vendor invoice\",\n        \"Relevant_documents\": [\"Invoice\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"Systemic Process Gaps\",\n    \"Errors\": [\n      {\n        \"Error\": \"No PO\",\n        \"How_it_surfaces\": \"No three-way match because PO was verbal\",\n        \"Relevant_documents\": [\"Invoice\", \"GL\", \"Bank Statement\"]\n      },\n      {\n        \"Error\": \"Unapproved method\",\n        \"How_it_surfaces\": \"Payment processed via manual wire outside normal AP system\",\n        \"Relevant_documents\": [\"Wire Transfer\", \"GL\", \"Invoice\"]\n      },\n      {\n        \"Error\": \"Unapproved payer\",\n        \"How_it_surfaces\": \"Invoice processed via personal email and attached PDF\",\n        \"Relevant_documents\": [\"Invoice\", \"Bank Statement\"]\n      }\n    ]\n  },\n  {\n    \"Edge_Case\": \"External Discrepancies\",\n    \"Errors\": [\n      {\n        \"Error\": \"Description mismatch\",\n        \"How_it_surfaces\": \"Payment memo contradicts invoice purpose\",\n        \"Relevant_documents\": [\"Invoice\", \"Purchase Order\"]\n      },\n      {\n        \"Error\": \"Payment returned\",\n        \"How_it_surfaces\": \"Bank statement shows a round-trip payment pattern (money returned)\",\n        \"Relevant_documents\": [\"Bank Statement\"]\n      }\n    ]\n  }\n]",
              "type": "array"
            },
            {
              "id": "7a4009e2-8fb2-4a75-8c5d-0f6baff37e60",
              "name": "Required Errors",
              "value": "={{ $json.data[0].edge_case_hooks }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3980,
        -2340
      ],
      "id": "e44cb2a5-106c-4cff-ab1b-e74791aaf3b8",
      "name": "Errors"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your job is to create a test simulation plan based on types of error. Go through the errors , how it surfaces and relevant documents. Based on the type of documents available, create a test injection plan. The plan should focus on type of document, Edge case injected and which error is genertated. \n\nThe test case should only include those test which can be constructed based on available documents. If test case case cannot be created due to unavailability of documents, ignore those test cases. \n\nEnsure all documents are covered.\n\nEdge cases:\n{{ $('Errors').item.json.Errors.toJsonString() }}\n\n\nDocuments: {{ $('Aggregate').item.json.data.toJsonString() }}\n\nuse the below json as output:\n\n{\n  \"testPlan\": {\n    \"Test_Simulation_Plan\": [\n      {\n        \"Document_Type\": \"<Document Type A>\",\n        \"Edge_Case_Categories\": {\n          \"<Category_1>\": [\n            {\n              \"Injected_Edge_Case\": \"<Error name>\",\n              \"Error_Generated\": \"<Error description>\",\n              \"How_it_surfaces\": \"<How it appears in review/testing>\",\n              \"Relevant_documents\": [\n                \"<Document 1>\",\n                \"<Document 2>\"\n              ]\n            },\n            {\n              \"Injected_Edge_Case\": \"<Error name>\",\n              \"Error_Generated\": \"<Error description>\",\n              \"How_it_surfaces\": \"<How it appears in review/testing>\",\n              \"Relevant_documents\": [\n                \"<Document 1>\",\n                \"<Document 2>\"\n              ]\n            }\n          ],\n          \"<Category_2>\": [\n            {\n              \"Injected_Edge_Case\": \"<Error name>\",\n              \"Error_Generated\": \"<Error description>\",\n              \"How_it_surfaces\": \"<Explanation>\",\n              \"Relevant_documents\": [\n                \"<Document 1>\",\n                \"<Document 2>\"\n              ]\n            }\n          ],\n          \"<Category_3>\": []\n        }\n      },\n      {\n        \"Document_Type\": \"<Document Type B>\",\n        \"Edge_Case_Categories\": {\n          \"<Category_1>\": [],\n          \"<Category_2>\": []\n        }\n      }\n    ]\n  }\n}\n\n\n\nVerify\n- all documents are covered \n- There should be some error injected in each document. Nothing should be empty\n- Ensure that all edge cases are roughly equally distributed and not skewed.\n- the json is valid\n\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3760,
        -2340
      ],
      "id": "820c48bc-5d71-413c-8713-e35316115a70",
      "name": "AI Agent4",
      "retryOnFail": true,
      "maxTries": 4,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3800,
        -2120
      ],
      "id": "bb300c99-29bf-4495-adfc-7689c431e0a2",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -4260,
        -2340
      ],
      "id": "c4278861-7f7e-43b3-8c92-90bf91ea1cd9",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "return {\n  testPlan: JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3400,
        -2340
      ],
      "id": "a79b6257-9ced-41c9-ac12-fb6c76eb6340",
      "name": "validate_documents2",
      "retryOnFail": true,
      "maxTries": 2,
      "notesInFlow": false,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your job is to inject test values in each document type based on test plan.  Use  simulation values to determine the test values and insert are in Sinulation document. The output should be in json format.  Use correct data as reference document for clean data. Esnure all errors types injected. Each document_type can have  Summarize for each document on what all errors have been injected as per test plan.  Ensure no edge case and document type is missed. Strictly ensure no additional data is created. - Ensure the number of data under each document type remains same. The error should be injected in existing data.\n\n\nTest Plan:\n{{ $('Split Out1').item.json.testplan.toJsonString() }}\n\n\nConfigurtaion and names used for test : \n{{ $('Split Out1').item.json.companyprofile.toJsonString() }}\n\n\n\nSimulation document: \n{{ $('Split Out1').item.json.simulations.toJsonString() }}\n\n\n\nThe output json:\n{\n  \"simulationProject\": \"<Project Name>\",\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"<Simulation Run ID>\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"<DocType1>\",\n          \"<DocType2>\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"<Relationship Type>\",\n            \"fields\": [\n              \"<Doc1.Field>\",\n              \"<Doc2.Field>\"\n            ],\n            \"description\": \"<Relationship description>\"\n          }\n        ],\n        \"errorStrategy\": \"<Description of error injection strategy>\",\n        \"totalErrorsToInject\": <Number>\n      },\n      \"processedDocuments\": {\n        \"<DocType>\": [\n          {\n            \"docId\": \"<Unique Doc ID>\",\n            \"docType\": \"<Document Type>\",\n            \"data\": {\n              /* Original or mutated document fields go here */\n            },\n            \"errors_injected\": [\n              \"<Error narrative 1>\",\n              \"<Error narrative 2>\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"<FieldChanged>\": \"<Original Value>\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"<FieldName>\",\n                  \"type\": \"<ErrorType>\",\n                  \"originalValue\": \"<Value before error>\",\n                  \"errorValue\": \"<Injected/Mutated Value>\",\n                  \"reason\": \"<Reason for applying error>\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                /* Copy from document’s allowed error spectrum */\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": <Number>,\n        \"errorsByType\": {\n            \"Timing/Cutoff errors\" : <Count>,\n            \"Mismatch between linked documents\": <Count>,\n            \"Vendor irregularities\": <Count>,\n            \"Suspicious amounts or frequencies\": <Count>,\n            \"Description / Documentation Anomalies\": <Count>,\n            \"Systemic Process Gaps\": <Count>,\n            \"External Discrepancies\": <Count>\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"<Description of cross-document anomaly>\",\n            \"affectedDocuments\": [\n              \"<DocID1>\",\n              \"<DocID2>\"\n            ],\n            \"fields\": [\n              \"<Field1>\",\n              \"<Field2>\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\nOnce completed again verify :\n-  Ensure all simulation are run and none is left.\n-  Ensure all edge case and document type are there.\n-  Ensure all original data match correct data. There should be no deviation.\n-  Esnure there should be only one of each document type, with all errors types injected.\n- Ensure the number of data under each document type remains same. \n- verify out to be valid json\n\n\n\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else. Swap <placeholders> with real data. Verify output to be valid json.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -720,
        -1560
      ],
      "id": "1cf2ce4e-6c87-41ae-959b-41eb6aa09207",
      "name": "AI Agent5",
      "executeOnce": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -860,
        -1340
      ],
      "id": "bcba71aa-a0b1-46cd-a052-ef604c462319",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "568eb679-8eb1-48fa-b5ec-5c52691d9518",
              "name": "companyprofile",
              "value": "={{ $json.input_config.stage1.companies[0].toJsonString() }} + {{ $json.input_config.profiles[0].toJsonString()}} ",
              "type": "string"
            },
            {
              "id": "565f572c-5f43-4b4c-8002-4b1fc495b471",
              "name": "simulations",
              "value": "={{ $json.simulatedResponse.simulationRuns }}",
              "type": "array"
            },
            {
              "id": "c17c0ad0-0bd5-4bc2-9144-12e994e74096",
              "name": "testplan",
              "value": "={{ $json.testPlan }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1180,
        -1560
      ],
      "id": "793d1459-2080-45f7-a374-823bc6db2320",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "fieldToSplitOut": "simulations",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1000,
        -1560
      ],
      "id": "a0d18449-adc2-4f1d-9a60-4ef434823d81",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n simulations:JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -280,
        -1560
      ],
      "id": "5dbcbfe9-f183-4bc0-b3cd-5911d9d4b2f5",
      "name": "validate_documents3",
      "retryOnFail": true,
      "maxTries": 4,
      "notesInFlow": false,
      "executeOnce": false,
      "waitBetweenTries": 2000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "# **Error Injector** \n## Inject multi-error types (overpayment, missing documents, hallucination, GL misclassification) into each simulation at configurable rates.\n",
        "height": 720,
        "width": 1380,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1520,
        -1860
      ],
      "typeVersion": 1,
      "id": "fb118cc5-3fe8-4a1f-9a1d-f93b146f2e0f",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1940,
        -1560
      ],
      "id": "0dd7d875-242a-4391-b480-44149085bdbd",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "813fe318-1906-4195-961e-ca156ac38f9f",
              "name": "simulatedResponse",
              "value": "={{ $('Code5').item.json.simulatedResponse }}",
              "type": "object"
            },
            {
              "id": "fae97e9f-0f0a-4779-9633-55337520b4a8",
              "name": "document_count",
              "value": "={{ $('Code5').item.json.document_count }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2980,
        -1540
      ],
      "id": "8dad6def-25df-4073-88ea-7296ae1861af",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "project_simulation_id": "={{ $('Insert rows in a table').item.json.id }}",
            "file_name": "={{ $('Merge').item.json.input_config.stage1.companies[0].company_name }}_{{ $now.format('yyyy-MM-dd') }}",
            "simulation_run_id": "={{ $('Merge').item.json.input_config.stage1.companies[0].company_name }}_{{ $now.toString() }}",
            "document_data": "={{ $json.simulations }}",
            "created_at": "={{ $now }}",
            "updated_at": "={{ $now }}",
            "cleansimulation": "={{ $('Code5').item.json.simulatedResponse }}",
            "companyprofile": "={{ $json.companyProfile }}",
            "enhancedsimulation": "={{ $json.enhancedsimulation }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "project_simulation_id",
              "displayName": "project_simulation_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "simulation_run_id",
              "displayName": "simulation_run_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "document_data",
              "displayName": "document_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "doc_type",
              "displayName": "doc_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "files",
              "displayName": "files",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cleanpdffiles",
              "displayName": "cleanpdffiles",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cleansimulation",
              "displayName": "cleansimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "enhancedsimulation",
              "displayName": "enhancedsimulation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "companyprofile",
              "displayName": "companyprofile",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1560,
        -1600
      ],
      "id": "e0c92e6e-4349-419a-a511-5b1cd06dc1f2",
      "name": "Insert rows in a table1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1880,
        -1600
      ],
      "id": "332d8e4b-930b-4fdb-94b1-5f995b98c01b",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f07a7a9-3e56-4a62-b996-90c631622949",
              "name": "companyProfile",
              "value": "={{ $('Webhook').item.json.body.profiles[0] }}",
              "type": "object"
            },
            {
              "id": "fdb1b665-af33-48e6-bef6-08922e65de49",
              "name": "cleansimulation",
              "value": "={{ $('validate_documents').item.json.formattedResponse }}",
              "type": "object"
            },
            {
              "id": "462b5e64-3aa4-41db-8907-f6d371fa9b17",
              "name": "enhancedsimulation",
              "value": "={{ $json.simulations }}",
              "type": "object"
            },
            {
              "id": "172beadf-5c83-4d30-a46e-6284ccaa0688",
              "name": "simulations",
              "value": "={{ $('validate_documents3').item.json.simulations }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1300,
        -1600
      ],
      "id": "1d9fff3d-b080-4722-8eeb-f1de0bfeeb49",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your job is to inject fake values in bank statement, Expenses sub-ledger and disbursement listing. Dont modify anything else. just add atleast 5 fake transactions under data. Dont change or modify any other document or any other value.  \n\n\nSimulation document: \n{{ $('validate_documents3').item.json.simulations.toJsonString() }}\n\n\n\n\n\nOnce completed again verify :\n-  Ensure atleast 5 transactions are added each in bank statement,Expenses sub-ledger and disbursments listing.\n-  Ensure no other value or data is modified other than mentioned above.\n-  Ensure all calculations are correct such as opening balance, closing balance etc.\n- verify out to be valid json\n\n\n\n",
        "options": {
          "systemMessage": "# Strict Rule (Not negotiable)\nMake sure the json is valid Your response must ONLY contain a raw JSON object string with NO code blocks, NO backticks, NO ```json text, NO formatting, and NO explanatory text. The response must begin with { and end with } and contain nothing else. Swap <placeholders> with real data. Verify output to be valid json.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        320,
        -1580
      ],
      "id": "a8c94274-ca1b-4413-b94c-28f4e95c3898",
      "name": "AI Agent",
      "executeOnce": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        300,
        -1300
      ],
      "id": "e4122155-68eb-4b86-bd9d-1c5c56b62b32",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Wxnt3BBrJNtydlea",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n simulations:JSON.parse($json.output)\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        -1580
      ],
      "id": "3f302e56-ea6d-4c98-8d03-222427dc1435",
      "name": "validate_documents4",
      "retryOnFail": true,
      "maxTries": 4,
      "notesInFlow": false,
      "executeOnce": false,
      "waitBetweenTries": 2000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42655bdb-2848-4148-8c7b-21468612e302",
              "name": "body",
              "value": "={{ $('convert-to-csv').item.json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4500,
        560
      ],
      "id": "2fc89c69-4187-4879-b96f-af8b0591199d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9aea10fd-ba72-44ad-9c99-010b7f4684b2",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5520,
        1220
      ],
      "id": "1663666f-400e-4a24-b4f8-6e2ba1ab4e01",
      "name": "Webhook1",
      "webhookId": "9aea10fd-ba72-44ad-9c99-010b7f4684b2"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -2800,
        1200
      ],
      "id": "5c717375-c0d5-431f-8e3b-ae81bfeff21a",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42655bdb-2848-4148-8c7b-21468612e302",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4600,
        1200
      ],
      "id": "f5e3a036-0672-4d98-a262-208cd7a9a41f",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "const makeSafe = (name) => name.replace(/[^a-zA-Z0-9-_]/g, '_');\n\nconst doc = $json.body; // FIX: Get actual document from nested \"body\"\n\nconst title = doc.title;\nconst data = doc.data;\nconst errorTypes = doc.errorTypes;\nconst errorDetails = doc.errorDetails;\n\nlet text = `===== ${title} =====\\n\\n`;\n\ntext += `--- Document Fields ---\\n`;\nfor (const [key, value] of Object.entries(data)) {\n  text += `${key}: ${value}\\n`;\n}\n\ntext += `\\n--- Error Types ---\\n`;\nerrorTypes.forEach(type => {\n  text += `- ${type}\\n`;\n});\n\ntext += `\\n--- Error Details ---\\n`;\nerrorDetails.forEach((err, i) => {\n  text += `Error ${i + 1}:\\n`;\n  text += `  Field: ${err.field}\\n`;\n  text += `  Original: ${err.original}\\n`;\n  text += `  Error: ${err.error}\\n`;\n  text += `  Type: ${err.type}\\n`;\n  text += `  Description: ${err.description}\\n\\n`;\n});\n\nreturn [\n  {\n    json: {\n      fileName: `${makeSafe(title)}.txt`,\n      fileContent: text,\n    }\n  }\n];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3940,
        1200
      ],
      "id": "7da8918c-f7d6-4e78-9dde-2cebb8687fe0",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "976869e8-edcb-42d9-b11f-1b3ad9037680",
              "leftValue": "={{$json.body.format}}",
              "rightValue": "csv",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5000,
        580
      ],
      "id": "fc02f2ec-1038-4ee4-a3a9-2b89b2b26e3f",
      "name": "convert-to-csv"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d3acb3f3-f6bd-4416-ad8a-6d8a6f028801",
              "leftValue": "={{$json.body.format}}",
              "rightValue": "txt",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5060,
        1220
      ],
      "id": "e74e3d98-19d1-4bfc-9907-23243a6ad53e",
      "name": "convert-to-txt"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "fileContent",
        "binaryPropertyName": "={{ $json.fileContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3400,
        1200
      ],
      "id": "0aee5203-f5fe-42de-969d-b0c5bde9e7c2",
      "name": "Convert to txt"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdf.creativebits.tech/api/v1/convert/html/pdf",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "X-API-KEY",
              "value": "1be1db51-6fee-46ad-8a2c-10ceb964764e"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "field",
              "value": "a1b2c3d4-5678-90ab-cdef-ghijklmnopqr"
            },
            {
              "name": "zoom",
              "value": "1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "converted.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3980,
        1800
      ],
      "id": "cfac144f-b32f-4807-bdb9-665d8e3d3f13",
      "name": "HTTP Request",
      "retryOnFail": false,
      "maxTries": 2,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\nconst doc = inputData.body;\n\nif (!doc || !doc.data) {\n  const errorHtml = `<!DOCTYPE html><html><head><title>No Data</title></head>\n    <body style=\"font-family: Georgia, serif; padding: 20px;\">\n    <p>No document data to display. Please check the input to this node.</p></body></html>`;\n  \n  return [{\n    json: {},\n    binary: {\n      data: {\n        data: Buffer.from(errorHtml, 'utf8').toString('base64'),\n        mimeType: 'text/html',\n        fileName: 'report.html'\n      }\n    }\n  }];\n}\n\nconst data = doc.data;\nconst title = doc.title || 'Financial Document';\n\n// Build HTML rows for each field\nconst dataRows = Object.entries(data).map(([key, value], idx) => `\n  <tr style=\"background-color: ${idx % 2 === 1 ? '#fff5f5' : '#ffffff'};\">\n    <td style=\"border: 1px solid #ccc; padding: 10px 12px; text-align: left;\">${key.replace(/_/g, ' ')}</td>\n    <td style=\"border: 1px solid #ccc; padding: 10px 12px; text-align: left; font-weight: 500;\">${value ?? ''}</td>\n  </tr>\n`).join('');\n\nconst htmlContent = `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${title}</title>\n</head>\n<body style=\"font-family: Georgia, serif; background-color: #f9f9f9; margin: 0; padding: 40px;\">\n  <div style=\"max-width: 850px; margin: auto; background: white; padding: 40px; border-radius: 8px; border: 1px solid #eee; box-shadow: 0 0 8px rgba(0,0,0,0.05);\">\n    <div style=\"text-align: center; margin-bottom: 40px;\">\n      <h1 style=\"font-size: 2.8em; color: #ff5757; margin: 0;\">Simthetic</h1>\n      <p style=\"font-size: 1.2em; color: #555; margin-top: 8px;\">${title}</p>\n    </div>\n\n    <h2 style=\"color: #333; font-size: 1.4em; border-bottom: 2px solid #ff5757; padding-bottom: 8px; margin-top: 0;\">Document Data</h2>\n    \n    <table style=\"width: 100%; border-collapse: collapse; font-size: 1em; margin-top: 20px;\">\n      <thead>\n        <tr style=\"background-color: #ff5757; color: white;\">\n          <th style=\"padding: 12px; text-align: left;\">Field</th>\n          <th style=\"padding: 12px; text-align: left;\">Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        ${dataRows}\n      </tbody>\n    </table>\n\n    <p style=\"font-size: 0.85em; color: #999; margin-top: 40px; text-align: center;\">\n      This is a system-generated accounting document for simulation purposes.\n    </p>\n  </div>\n</body>\n</html>`;\n\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: Buffer.from(htmlContent, 'utf8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'report.html'\n    }\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4600,
        1800
      ],
      "id": "359587b7-2f6c-47f0-a049-914a5fe5c6c7",
      "name": "Code3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f35412b3-c75a-43a3-969b-203049a9c40b",
              "leftValue": "={{$json.body.format}}",
              "rightValue": "=pdf",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5040,
        1820
      ],
      "id": "67256854-0bc1-45a7-b9bf-972a30376f8a",
      "name": "If1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": " {\n    \"format\":\"pdf\",\n    \"title\": \"po - PO-1001\",\n    \"data\": {\n      \"PO Number\": \"\",\n      \"Total PO Value\": \"24500\",\n      \"Vendor Name\": \"Acme Corp\",\n      \"Delivery Date\": \"2023-13-15\",\n      \"Terms\": \"Net 30\"\n    },\n    \"errorTypes\": [\n      \"Missing\",\n      \"Incorrect\",\n      \"Invalid\"\n    ],\n    \"errorDetails\": [\n      {\n        \"field\": \"PO Number\",\n        \"original\": \"PO-1001\",\n        \"error\": \"\",\n        \"type\": \"Missing\",\n        \"description\": \"Applied 'Missing' error to make the PO untraceable.\"\n      },\n      {\n        \"field\": \"Total PO Value\",\n        \"original\": \"25000\",\n        \"error\": \"24500\",\n        \"type\": \"Incorrect\",\n        \"description\": \"Applied 'Incorrect' error to create a subtle value discrepancy.\"\n      },\n      {\n        \"field\": \"Delivery Date\",\n        \"original\": \"2023-11-15\",\n        \"error\": \"2023-13-15\",\n        \"type\": \"Invalid\",\n        \"description\": \"Applied 'Invalid' date format to test system parsing.\"\n      }\n    ]\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5780,
        1220
      ],
      "id": "3d0ccdcd-79a2-4402-af4b-8d3a47f9efaa",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "content": "# SINGLE CSV, TXT, PDF Export",
        "height": 1020,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6160,
        780
      ],
      "typeVersion": 1,
      "id": "44732065-de3a-423b-9037-f5e63649f55c",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "path": "7e3348e9-c3c4-439d-b2d9-55f94573ecf9",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5700,
        5460
      ],
      "id": "d732a0c7-4db5-4614-b447-2c8dda35036a",
      "name": "Webhook2",
      "webhookId": "7e3348e9-c3c4-439d-b2d9-55f94573ecf9"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -3280,
        5460
      ],
      "id": "318b9493-9383-44cc-9b03-d1e65c524518",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "content": "# Viewing a specific simulation's documents (User clicks \"View\"):",
        "height": 460,
        "width": 5880,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6140,
        5820
      ],
      "typeVersion": 1,
      "id": "3055c621-c82c-41e4-8637-28cab6712a41",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "path": "85599cd4-f703-4e66-a0da-4c0f76a78b94",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5760,
        6040
      ],
      "id": "d9b84934-3bfa-416c-b1b1-9e0c277234f9",
      "name": "Webhook3",
      "webhookId": "85599cd4-f703-4e66-a0da-4c0f76a78b94"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -3300,
        6040
      ],
      "id": "107fbf86-f6b9-4216-ba59-b23d7005eb3e",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, project_name, scenario_name, created_at, document_count \n        FROM project_simulations \n        WHERE is_deleted = FALSE \nORDER BY created_at DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4420,
        5460
      ],
      "id": "a92b3d2e-6b47-40f5-bca4-345b16962c61",
      "name": "list-all-simulations",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "        SELECT file_name, document_data \n        FROM simulation_documents \nWHERE project_simulation_id =$1;",
        "options": {
          "queryReplacement": "={{ $json.query.query }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4380,
        6040
      ],
      "id": "9f07406a-5737-4539-b66b-10b8965e882a",
      "name": "view-specific-simulation-documents",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Oops there was an issue when exporting the document"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -3720,
        1960
      ],
      "id": "02924682-b8a3-416b-a029-9dbb872d101a",
      "name": "Stop and Error1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdf.creativebits.tech/api/v1/convert/html/pdf",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "X-API-KEY",
              "value": "1be1db51-6fee-46ad-8a2c-10ceb964764e"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "field",
              "value": "a1b2c3d4-5678-90ab-cdef-ghijklmnopqr"
            },
            {
              "name": "zoom",
              "value": "1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "converted.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3200,
        3040
      ],
      "id": "0f212ebc-84ac-4191-b002-dfec69fc7973",
      "name": "HTTP Request1",
      "retryOnFail": false,
      "maxTries": 2,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Collect all incoming items\nconst allInputs = $input.all();\n\nlet documents = [];\n\nif (allInputs.length === 1) {\n  const payload = allInputs[0].json;\n\n  if (Array.isArray(payload)) {\n    // New shape: top-level array\n    documents = payload;\n  } else if (Array.isArray(payload.data)) {\n    // Legacy shape: { data: [...] }\n    documents = payload.data;\n  } else if (payload.document_data || payload.docType || payload.docId) {\n    // Single document already\n    documents = [payload];\n  } else {\n    throw new Error(\"Unrecognized input format. Expected array of docs, object with .data array, or document object.\");\n  }\n} else {\n  // Multiple input items: assume each is already a document\n  documents = allInputs.map(item => item.json);\n}\n\n// Emit each document as its own item\nreturn documents.map((doc, index) => ({\n  json: doc,\n  pairedItem: { item: index },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4200,
        3040
      ],
      "id": "6d8187af-32f8-4b78-b5f9-467b66b306ad",
      "name": "Code4"
    },
    {
      "parameters": {
        "errorMessage": "Oops there was an issue when exporting the document"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -2980,
        3140
      ],
      "id": "963eff99-da9f-4b10-862a-7afbbcdef5df",
      "name": "Stop and Error2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Runs once per item\nconst inputDoc = $json;\n\n// Support both shapes just in case\nconst doc = inputDoc.document_data ?? {};\n\n// Keep existing file name if provided, otherwise build a safe default\nconst fileName =\n  inputDoc.file_name ??\n  `${(doc.simulationId || 'UnknownSimulation').replace(/\\s+/g, '_')}/` +\n  `${(doc.docType || 'UnknownType').replace(/\\s+/g, '_')}_` +\n  `${doc.docId || 'UnknownDocID'}.txt`;\n\n// Preserve the entire document; then guarantee common fields exist.\n// Also normalize `_metadata`/`_errors` to friendly keys if missing.\nconst content = {\n  ...doc, // keeps file_type, company, branding, render_hints, watermark, footer, _metadata, _errors, etc.\n  docType: doc.docType ?? doc.type ?? 'UnknownType',\n  docId: doc.docId ?? 'UnknownDocID',\n  simulationId: doc.simulationId ?? inputDoc.simulationId,\n};\n\n// Provide aliases without overwriting if the canonical keys already exist\nif (doc._metadata !== undefined && content.metadata === undefined) {\n  content.metadata = doc._metadata;\n}\nif (doc._errors !== undefined && content.errors === undefined) {\n  content.errors = doc._errors;\n}\n// If errorSummary was kept outside the doc upstream, preserve it too\nif (inputDoc.errorSummary && content.errorSummary === undefined) {\n  content.errorSummary = inputDoc.errorSummary;\n}\n\nreturn { fileName, content };\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3880,
        3040
      ],
      "id": "657e262a-59b6-4e3b-bd93-dfa359210132",
      "name": "Code6"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Runs once per item and returns HTML as binary for PDF conversion.\nconst doc = $json;\n\n// ---------- guard ----------\nif (!doc || !doc.content) {\n  const errorHtml = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>No Data</title></head>\n  <body style=\"font-family: Arial, sans-serif; padding: 24px;\">\n    <h1>No document content found</h1>\n    <p>Please check the input to this node.</p>\n  </body></html>`;\n  return {\n    json: { error: 'No document content found.' },\n    binary: { data: { data: Buffer.from(errorHtml,'utf8').toString('base64'), mimeType: 'text/html', fileName: 'error_report.html' } }\n  };\n}\n\n// ---------- shorthands ----------\nconst c = doc.content || {};\nconst data = c.data || {};\nconst company = c.company || {};\nconst branding = company.branding || {};\nconst hints = c.render_hints || {};\nconst currency = (data.Currency_Unit || 'USD').toString();\n\n// ---------- theme ----------\nconst primary = branding.primary_color || '#1A237E';\nconst secondary = branding.secondary_color || '#3B82F6';\nconst fontFamily = branding.font_family || \"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif\";\nconst accent = (hints.header?.accent_color) || primary;\nconst logoSrc = branding.logo_data_uri || branding.logo_url || company.logo_url || '';\n\n// ---------- helpers ----------\nfunction esc(x) {\n  if (x === null || x === undefined) return '';\n  return String(x)\n    .replace(/&/g,'&amp;')\n    .replace(/</g,'&lt;')\n    .replace(/>/g,'&gt;')\n    .replace(/\"/g,'&quot;')\n    .replace(/'/g,'&#39;');\n}\n\nfunction isLikelyImageUrl(u='') {\n  if (!u) return false;\n  if (/^data:image\\/(png|jpe?g|gif|svg\\+xml);base64,/i.test(u)) return true;     // data URI\n  return /^https?:\\/\\/.+\\.(png|jpe?g|gif|svg)(\\?.*)?$/i.test(u);\n}\n\nfunction asList(v) {\n  if (Array.isArray(v)) return v.map(x => String(x).trim());\n  if (typeof v === 'string') return v.split(';').map(x => x.trim()).filter(Boolean);\n  if (v === undefined || v === null) return [];\n  return [String(v)];\n}\n\nfunction n(x) {\n  if (x === null || x === undefined || x === '') return undefined;\n  const num = Number(String(x).replace(/,/g,'').trim());\n  return Number.isFinite(num) ? num : undefined;\n}\n\nfunction money(x) {\n  const val = n(x);\n  if (val === undefined) return esc(x);\n  try {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(val);\n  } catch {\n    return `${currency} ${val.toLocaleString('en-US')}`;\n  }\n}\n\nfunction fieldChanged(field) {\n  const arr = c.metadata?.errorsApplied || c._metadata?.errorsApplied || [];\n  return arr.find(e => e.field === field);\n}\n\nfunction markedCell(field, valueHtml) {\n  const e = fieldChanged(field);\n  if (!e) return valueHtml;\n  const title = esc(`Original: ${e.originalValue} | Error: ${e.spectrum} - ${e.reason}`);\n  return `<span style=\"background:#fff1f1;border-left:3px solid #d9534f;padding:2px 4px;font-weight:600;\" title=\"${title}\">${valueHtml}</span>`;\n}\n\nfunction section(title, inner) {\n  return `\n  <div style=\"background:#fff;border:1px solid #e5e7eb;border-radius:10px;margin:16px 0;padding:18px;box-shadow:0 2px 6px rgba(0,0,0,.04);\">\n    <h3 style=\"margin:0 0 10px 0;color:${primary}\">${esc(title)}</h3>\n    ${inner}\n  </div>`;\n}\n\nfunction titleFromType() {\n  const t = (c.docType || '').toLowerCase();\n  if (t.includes('invoice') && t.includes('services')) return 'Invoice (Services)';\n  if (t.includes('invoice')) return 'Invoice';\n  if (t.includes('order_document_sales_and_purchases') || t.includes('purchase order') || t.includes('(po)')) return 'Purchase Order';\n  if (t.includes('shipping') && t.includes('receiv')) return 'Goods Received Note';\n  if (t.includes('shipping') && (t.includes('send') || t.includes('dispatch'))) return 'Delivery Note';\n  if (t.includes('bank_statement') || t.includes('bank statement')) return 'Bank Statement';\n  if (t.includes('wire')) return 'Wire Transfer Confirmation';\n  if (t.includes('contract')) return 'Purchase Contract';\n  return hints.header?.title || 'Document';\n}\n\nfunction normalizeType() {\n  const t = (c.docType || '').toLowerCase();\n  if (t.includes('order_document_sales_and_purchases') || t.includes('purchase order') || t.includes('(po)')) return 'po';\n  if (t.includes('invoice') && t.includes('services')) return 'invoice_services';\n  if (t.includes('invoice')) return 'invoice_goods';\n  if (t.includes('bank_statement') || t.includes('bank statement')) return 'bank';\n  if (t.includes('shipping') && t.includes('receiv')) return 'ship_recv';\n  if (t.includes('shipping')) return 'ship_send';\n  if (t.includes('wire')) return 'wire';\n  if (t.includes('contract')) return 'contract';\n  return 'generic';\n}\n\n// Header with logo + address\nfunction headerBlock() {\n  const showLogo = hints.header?.show_logo !== false; // default true\n  const docTitle = hints.header?.title || titleFromType();\n\n  const logoHtml =\n    (showLogo && isLikelyImageUrl(logoSrc))\n      ? `<img src=\"${esc(logoSrc)}\" alt=\"Logo\" referrerpolicy=\"no-referrer\"\n           style=\"max-height:56px;object-fit:contain\" onerror=\"this.style.display='none'\">`\n      : `<div style=\"font-weight:700;font-size:22px;\">${esc(company.name || '')}</div>`;\n\n  const addr = hints.address_block || {};\n  return `\n  <table style=\"width:100%; border-collapse:collapse;\">\n    <tr>\n      <td style=\"width:60%;vertical-align:top;\">\n        ${logoHtml}\n        <div style=\"font-size:12px;color:#444;margin-top:6px;\">\n          ${esc(addr.company_name || company.name || '')}<br>\n          ${esc(addr.address || '')}${addr.address ? '<br>' : ''}${esc(addr.region || company.region || '')}\n        </div>\n      </td>\n      <td style=\"text-align:right;vertical-align:top;\">\n        <div style=\"font-size:26px;font-weight:800;color:${accent}\">${esc(docTitle)}</div>\n        <div style=\"color:#666;margin-top:6px;\">Document ID: <strong>${esc(c.docId || '')}</strong></div>\n        <div style=\"color:#666;\">Simulation: <strong>${esc(c.simulationId || '')}</strong></div>\n        ${c.file_type ? `<div style=\"color:#666;\">File Type: <strong>${esc(c.file_type)}</strong></div>` : ''}\n      </td>\n    </tr>\n  </table>`;\n}\n\nfunction footerBlock() {\n  const f = hints.footer || {};\n  const prepared = f.prepared_on ? new Date(f.prepared_on) : undefined;\n  const dateStr = prepared && !isNaN(prepared) ? prepared.toISOString().slice(0,10) : (f.prepared_on || '');\n  return `\n  <div style=\"display:flex;justify-content:space-between;align-items:center;font-size:12px;color:#666;\">\n    <div>${f.prepared_by ? `Prepared by: <strong>${esc(f.prepared_by)}</strong>` : ''}</div>\n    <div>${dateStr ? `Prepared on: <strong>${esc(dateStr)}</strong>` : ''}</div>\n    ${hints.footer?.page_numbers ? `<div>Page <span class=\"pageNumber\"></span></div>` : ''}\n  </div>`;\n}\n\n// Print-safe, centered watermark with no wrapping\nfunction watermarkCss() {\n  const text = hints.watermark || '';\n  if (!text) return '';\n  const size = Number(hints.watermark_size_px ?? 48);\n  const opacity = Number(hints.watermark_opacity ?? 0.06);\n  return `\n  <div style=\"\n    position: fixed;\n    top: 50%; left: 50%;\n    transform: translate(-50%, -50%) rotate(-30deg);\n    pointer-events: none; z-index: 0; opacity: ${opacity};\n  \">\n    <div style=\"\n      font-size: ${size}px; font-weight: 900; letter-spacing: 2px;\n      white-space: nowrap; color: ${primary};\n    \">${esc(text)}</div>\n  </div>\n  <style>\n    @media print { .container { position: relative; z-index: 1; } }\n  </style>`;\n}\n\n// ---------- line items for PO/Invoice ----------\nfunction buildLineItems() {\n  const desc = asList(data.Product_Description || data.Description || data.Item_Description);\n  const qty = asList(data.Item_Quantity);\n  const unit = asList(data.Unit_of_measurement || data.Unit || data.UOM);\n  const price = asList(data.Item_Price || data.Unit_Price);\n  const maxLen = Math.max(desc.length, qty.length, unit.length, price.length);\n  const rows = [];\n  for (let i = 0; i < maxLen; i++) {\n    const qn = n(qty[i]);\n    const pr = n(price[i]);\n    const lineTotal = (qn !== undefined && pr !== undefined) ? qn * pr : undefined;\n    rows.push({\n      description: desc[i] ?? '',\n      quantity: qn ?? (qty[i] ?? ''),\n      unit: unit[i] ?? '',\n      unitPrice: pr ?? (price[i] ?? ''),\n      lineTotal\n    });\n  }\n  return rows.filter(r => (r.description || r.quantity || r.unitPrice));\n}\n\nfunction renderItemsTable() {\n  const items = buildLineItems();\n  if (!items.length) return '<div style=\"color:#666\">No line items present.</div>';\n  const rows = items.map((r, idx) => `\n    <tr style=\"background:${idx%2? '#fafafa':'transparent'}\">\n      <td style=\"border:1px solid #e5e7eb;padding:10px\">${esc(r.description)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">${esc(r.quantity)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px\">${esc(r.unit)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">${money(r.unitPrice)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">${r.lineTotal !== undefined ? money(r.lineTotal) : ''}</td>\n    </tr>`).join('');\n  const subtotal = items.reduce((s,r)=> s + (r.lineTotal || 0), 0);\n  return `\n  <table style=\"width:100%;border-collapse:collapse\">\n    <thead>\n      <tr style=\"background:${secondary};color:#fff\">\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Description</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Qty</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Unit</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Unit Price</th>\n        <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Line Total</th>\n      </tr>\n    </thead>\n    <tbody>${rows}</tbody>\n    <tfoot>\n      <tr>\n        <td colspan=\"4\" style=\"border:1px solid #e5e7eb;padding:10px;text-align:right;font-weight:700\">Subtotal</td>\n        <td style=\"border:1px solid #e5e7eb;padding:10px;text-align:right;font-weight:700\">${money(subtotal)}</td>\n      </tr>\n    </tfoot>\n  </table>`;\n}\n\n// ---------- type-specific renderers ----------\nfunction renderPO() {\n  const factsRows = [\n    ['PO Number', markedCell('Purchase_Order_Number', esc(data.Purchase_Order_Number || c.docId || ''))],\n    ['PO Date', markedCell('Purchase_Order_Date', esc(data.Purchase_Order_Date || ''))],\n    ['Supplier', markedCell('Supplier_Name', esc(data.Supplier_Name || ''))],\n    ['Buyer', esc(data.Customer_Name || company.name || '')],\n    ['Currency', esc(data.Currency_Unit || '')],\n    ['Delivery Date', esc(data.Delivery_Date || '')]\n  ].map((r, i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n\n  const totals = `\n    <div style=\"text-align:right;margin-top:12px;font-size:16px\">\n      <div> ${markedCell('Total_Purchase_Order_Value', money(data.Total_Purchase_Order_Value || 0))} </div>\n    </div>`;\n\n  return [\n    section('Purchase Order Details', `<table style=\"width:100%;border-collapse:collapse\">${factsRows}</table>`),\n    section('Items', renderItemsTable()),\n    section('Total', totals)\n  ].join('');\n}\n\nfunction renderInvoice(kind='goods') {\n  const factsRows = [\n    ['Invoice Number', esc(data.Invoice_Number || c.docId || '')],\n    ['Invoice Date', esc(data.Date_of_Invoice || '')],\n    ['Supplier', esc(data.Supplier_Name || '')],\n    ['Customer', esc(data.Customer_Name || company.name || '')],\n    ['Currency', esc(data.Currency_Unit || '')],\n    ['PO Number', markedCell('Purchase_Order_Number', esc(data.Purchase_Order_Number || ''))],\n    ['Delivery/Completion Date', esc(data['Delivery_/_Completion_Date'] || '')]\n  ].map((r, i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n\n  const totals = `\n    <div style=\"text-align:right;margin-top:12px;font-size:16px\">\n      <div> Total Amount Due: ${markedCell('Total_Amount_Due', money(data.Total_Amount_Due || 0))} </div>\n    </div>`;\n\n  return [\n    section(kind === 'services' ? 'Invoice (Services) Details' : 'Invoice Details', `<table style=\"width:100%;border-collapse:collapse\">${factsRows}</table>`),\n    section('Items', renderItemsTable()),\n    section('Total', totals)\n  ].join('');\n}\n\nfunction renderBank() {\n  const txnIds = asList(data.Transaction_Number);\n  const txnDates = asList(data.Date_of_transaction);\n  const detailsList = asList(data.Transactional_Details);\n  const amountsFromDetails = detailsList.map(d => {\n    const m = /Amount:\\s*([0-9\\.,]+)/i.exec(d || '');\n    return m ? n(m[1]) : undefined;\n  });\n\n  const rows = [];\n  const len = Math.max(txnIds.length, txnDates.length, detailsList.length);\n  for (let i=0;i<len;i++){\n    rows.push({\n      id: txnIds[i] || '',\n      date: txnDates[i] || '',\n      details: detailsList[i] || '',\n      amount: amountsFromDetails[i]\n    });\n  }\n\n  const ledgerRows = rows.map((r,i)=> `\n    <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n      <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(r.date)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(r.id)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(r.details)}</td>\n      <td style=\"border:1px solid #e5e7eb;padding:8px;text-align:right\">${r.amount !== undefined ? money(r.amount) : ''}</td>\n    </tr>`).join('');\n\n  const factsRows = [\n    ['Account Number', esc(data.Account_Number || '')],\n    ['Statement Period', esc(data.Statement_Period || '')],\n    ['Opening Balance', markedCell('Opening_or_Beginning_or_Previous_Balance', money(data.Opening_or_Beginning_or_Previous_Balance || 0))],\n    ['Withdrawal/Debit Totals', markedCell('Withdrawal_or_Debit_Totals', money(data.Withdrawal_or_Debit_Totals || 0))],\n    ['Deposit/Credit Totals', markedCell('Deposit_or_Credit_Totals', money(data.Deposit_or_Credit_Totals || 0))],\n    ['Closing Balance', markedCell('Closing_or_Ending_Balance', money(data.Closing_or_Ending_Balance || 0))],\n    ['Bank Name', esc(data.Bank_name || '')]\n  ].map((r, i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n\n  return [\n    section('Statement Summary', `<table style=\"width:100%;border-collapse:collapse\">${factsRows}</table>`),\n    section('Transactions', `\n      <table style=\"width:100%;border-collapse:collapse\">\n        <thead>\n          <tr style=\"background:${secondary};color:#fff\">\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Date</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Transaction #</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Details</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:right\">Amount</th>\n          </tr>\n        </thead>\n        <tbody>${ledgerRows || '<tr><td colspan=\"4\" style=\"padding:10px;color:#666\">No transactions.</td></tr>'}</tbody>\n      </table>`)\n  ].join('');\n}\n\nfunction renderShipping(mode) {\n  const facts = [\n    ['Document', mode === 'recv' ? 'Goods Received Note' : 'Delivery Note'],\n    ['Shipment Date', esc(data.Shipment_Date || data.Delivery_Date || '')],\n    ['Carrier', esc(data.Carrier_Name || data.Shipper || '')],\n    ['Tracking #', esc(data.Tracking_Number || '')],\n    ['Origin', esc(data.Origin || data.Ship_From || '')],\n    ['Destination', esc(data.Destination || data.Ship_To || '')],\n    ['PO Number', esc(data.Purchase_Order_Number || '')],\n    ['Invoice Number', esc(data.Invoice_Number || '')]\n  ];\n  const factRows = facts.map((r,i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n  return [\n    section('Shipment Details', `<table style=\"width:100%;border-collapse:collapse\">${factRows}</table>`),\n    section('Items', renderItemsTable())\n  ].join('');\n}\n\nfunction renderWire() {\n  const facts = [\n    ['Transfer Date', esc(data.Transfer_Date || data.Date_of_transaction || '')],\n    ['Amount', money(data.Amount || data.Withdrawal_or_Debit_Totals || '')],\n    ['Currency', esc(data.Currency_Unit || '')],\n    ['Sender Account', esc(data.Sender_Account || data.Account_Number || '')],\n    ['Receiver Account', esc(data.Receiver_Account || '')],\n    ['Bank', esc(data.Bank_name || '')],\n    ['Reference', esc(data.Reference || data.Transaction_Number || '')],\n    ['Invoice #', esc(data.Invoice_Number || '')],\n    ['PO #', esc(data.Purchase_Order_Number || '')]\n  ];\n  const factRows = facts.map((r,i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n  return section('Wire Transfer Details', `<table style=\"width:100%;border-collapse:collapse\">${factRows}</table>`);\n}\n\nfunction renderContract() {\n  const body = esc(data.Contract_Text || data.Snippet || data.Terms || 'No contract text provided.');\n  const metaRows = [\n    ['Effective Date', esc(data.Effective_Date || '')],\n    ['Supplier', esc(data.Supplier_Name || '')],\n    ['Buyer', esc(data.Customer_Name || company.name || '')],\n    ['PO/Reference', esc(data.Purchase_Order_Number || data.Reference || '')]\n  ].map((r,i)=> `<tr style=\"background:${i%2? '#fafafa':'transparent'}\"><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[0]}</td><td style=\"border:1px solid #e5e7eb;padding:8px\">${r[1]}</td></tr>`).join('');\n  return [\n    section('Contract Metadata', `<table style=\"width:100%;border-collapse:collapse\">${metaRows}</table>`),\n    section('Excerpt', `<div style=\"white-space:pre-wrap;line-height:1.6\">${body}</div>`)\n  ].join('');\n}\n\n// Errors appendix (applied + cross-doc)\nfunction renderErrorsAppendix() {\n  let errorsHtml = '';\n  const applied = c.metadata?.errorsApplied || c._metadata?.errorsApplied || [];\n  if (applied.length) {\n    const rows = applied.map((e,i)=> `\n      <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.field)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.spectrum)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.originalValue ?? '')}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.errorValue ?? '')}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.reason)}</td>\n      </tr>`).join('');\n    errorsHtml += section('Errors Applied', `\n      <table style=\"width:100%;border-collapse:collapse\">\n        <thead>\n          <tr style=\"background:${secondary};color:#fff\">\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Field</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Type</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Original</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Error Value</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Reason</th>\n          </tr>\n        </thead>\n        <tbody>${rows}</tbody>\n      </table>`);\n  }\n\n  const cross = c.errorSummary?.crossDocumentErrors || [];\n  if (cross.length) {\n    const rows = cross.map((e,i)=> `\n      <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(e.description)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc((e.affectedDocuments || []).join(', '))}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc((e.fields || []).join(', '))}</td>\n      </tr>`).join('');\n    errorsHtml += section('Cross-Document Errors', `\n      <table style=\"width:100%;border-collapse:collapse\">\n        <thead>\n          <tr style=\"background:${secondary};color:#fff\">\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Description</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Affected Docs</th>\n            <th style=\"border:1px solid #e5e7eb;padding:10px;text-align:left\">Fields</th>\n          </tr>\n        </thead>\n        <tbody>${rows}</tbody>\n      </table>`);\n  }\n\n  return errorsHtml;\n}\n\n// ---------- choose template ----------\nlet main;\nswitch (normalizeType()) {\n  case 'po':               main = renderPO(); break;\n  case 'invoice_services': main = renderInvoice('services'); break;\n  case 'invoice_goods':    main = renderInvoice('goods'); break;\n  case 'bank':             main = renderBank(); break;\n  case 'ship_recv':        main = renderShipping('recv'); break;\n  case 'ship_send':        main = renderShipping('send'); break;\n  case 'wire':             main = renderWire(); break;\n  case 'contract':         main = renderContract(); break;\n  default: {\n    const rows = Object.entries(data).map(([k,v],i)=>`\n      <tr style=\"background:${i%2? '#fafafa':'transparent'}\">\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(k)}</td>\n        <td style=\"border:1px solid #e5e7eb;padding:8px\">${markedCell(k, esc(v))}</td>\n      </tr>`).join('');\n    main = section('Fields', `<table style=\"width:100%;border-collapse:collapse\">${rows}</table>`);\n  }\n}\n\nconst appendix = renderErrorsAppendix();\n\n// ---------- final HTML ----------\nconst html = `<!DOCTYPE html>\n<html style=\"-webkit-print-color-adjust:exact;color-adjust:exact;\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${esc(titleFromType())} - ${esc(c.docId || '')}</title>\n  <style>\n    @page { margin: 18mm; }\n    body { font-family:${fontFamily}; margin:0; padding:0; background:#f6f7fb; color:#111827; }\n    .container { max-width:900px; margin:0 auto; padding:24px; position:relative; z-index:1; }\n    .card { background:#fff; border:1px solid #e5e7eb; border-radius:12px; padding:18px; box-shadow:0 8px 20px rgba(0,0,0,.04); }\n    .brand-bar { height:6px; background:${primary}; border-radius:12px 12px 0 0; }\n  </style>\n</head>\n<body>\n  ${watermarkCss()}\n  <div class=\"container\">\n    <div class=\"card\">\n      <div class=\"brand-bar\"></div>\n      ${headerBlock()}\n      ${section('Parties & Roles', `\n        <table style=\"width:100%;border-collapse:collapse\">\n          <tr style=\"background:#fafafa\">\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">Issuer Role</td>\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(hints.issuer_role || '')}</td>\n          </tr>\n          <tr>\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">Counterparty Role</td>\n            <td style=\"border:1px solid #e5e7eb;padding:8px\">${esc(hints.counterparty_role || '')}</td>\n          </tr>\n        </table>\n      `)}\n      ${main}\n      ${appendix}\n      <hr style=\"border:none;border-top:1px solid #e5e7eb;margin:18px 0\">\n      ${footerBlock()}\n    </div>\n  </div>\n</body>\n</html>`;\n\n// ---------- output binary ----------\nconst outName = (doc.fileName || `${(c.simulationId||'Sim').replace(/\\s+/g,'_')}_${(c.docType||'Document').replace(/\\s+/g,'_')}_${c.docId||'ID'}.txt`)\n  .replace(/\\//g,'_')\n  .replace(/\\.txt$/i,'.html');\n\nreturn {\n  json: {},\n  binary: {\n    data: {\n      data: Buffer.from(html, 'utf8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: outName\n    }\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3620,
        3040
      ],
      "id": "0fff7724-8457-47e9-b5bd-1cb3c7ca0f86",
      "name": "Code7"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "converted.pdf",
        "fileName": "simthetic.zip",
        "binaryPropertyOutput": "simthetic.pdfs"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -2980,
        2940
      ],
      "id": "c3c72bc8-d5e8-497c-8925-36e559c20440",
      "name": "Compression"
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "converted.pdf",
        "fileName": "test.zip"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -3720,
        1780
      ],
      "id": "55603630-a3c5-461e-a1a6-53c9ab56599a",
      "name": "Compression1"
    },
    {
      "parameters": {
        "outputPrefix": "test_"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -3420,
        1780
      ],
      "id": "57493e6e-92f8-4fca-bee7-7830e67c488b",
      "name": "Decompress"
    },
    {
      "parameters": {
        "content": "# Bulk PDF or Excel export file genearation: (currently only csv endpoint in production. we have another different workflow for pdfs)\n## example usage: \nhttps://n8n.simthetic.ai/webhook/simthetic-bulk-docs?project_id=48&format=excel\nhttps://n8n.simthetic.ai/webhook/simthetic-bulk-docs?project_id=48&format=pdf",
        "height": 2320,
        "width": 5820,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6120,
        2760
      ],
      "typeVersion": 1,
      "id": "18c3e314-2d5f-43c3-808f-40d0660d7f3d",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "binaryPropertyName": "simthetic.pdfs",
        "outputPrefix": "test_"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -2640,
        2940
      ],
      "id": "abf0dcfb-3fc9-4ebf-a61b-35de8b9a53e5",
      "name": "Decompress1"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -700,
        3720
      ],
      "id": "c9a2c7a6-e622-4dc1-b585-760253cdacd2",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "path": "simthetic-bulk-docs",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5960,
        3400
      ],
      "id": "fb6070f9-f10f-40a0-9b39-7c90d0446d3b",
      "name": "Webhook4",
      "webhookId": "9d142723-a3bd-4b37-8b20-e4eca0064eef"
    },
    {
      "parameters": {
        "jsCode": "// Helper to parse title like \"disbursement_listing - DL-901\"\nfunction parseTitle(title = \"\") {\n  const [rawType = \"\", rawId = \"\"] = title.split(\" - \").map(s => s.trim());\n  return { docType: rawType, docId: rawId };\n}\n\nconst flattened = items.map(i => {\n  // Drill into the nested body where the document actually is\n  const inner = i?.json?.body?.body || {};\n  const { format = \"\", title = \"\", data = {} } = inner;\n  const { docType, docId } = parseTitle(title);\n\n  return {\n    json: {\n      DocType: docType,\n      DocId: docId,\n      Format: format,\n      ...data,\n    },\n  };\n});\n\nreturn flattened;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4040,
        560
      ],
      "id": "b57a8565-5bbb-4a9e-af9f-d7e233f13591",
      "name": "Code13"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3360,
        560
      ],
      "id": "aaa57b40-cb0c-4b06-80a8-f07bdb9daf3f",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "afa2e46d-e500-4261-ae91-c9d393918588",
              "name": "project_id",
              "value": "={{ $('Webhook4').item.json.query.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4380,
        3680
      ],
      "id": "89e58cee-da43-4778-a74a-4c93bc8f8566",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "content": "## Single csv/excel export",
        "height": 500,
        "width": 2060,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5180,
        460
      ],
      "typeVersion": 1,
      "id": "6650899b-dfae-4f3f-897b-704b2bbe9d86",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## Single txt export",
        "height": 540,
        "width": 2060,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5180,
        1040
      ],
      "typeVersion": 1,
      "id": "d77b11b3-e026-4851-be49-d1cefaef121a",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "## Single pdf export",
        "height": 480,
        "width": 2060,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5180,
        1620
      ],
      "typeVersion": 1,
      "id": "e6132667-6072-4e3a-9fca-d7758f357e53",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "afa2e46d-e500-4261-ae91-c9d393918588",
              "name": "project_id",
              "value": "={{ $('Webhook4').item.json.query.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4720,
        3040
      ],
      "id": "c90c0a80-f94a-412b-8fb8-0984b1b3ffc2",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "project_simulation_id",
              "value": "={{ $json.project_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4420,
        3040
      ],
      "id": "2f3e30bd-2d3d-4a9c-98ad-629e8bfcbe5c",
      "name": "Select rows from a table1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8385aac1-f904-4ae8-b657-00e615828980",
              "leftValue": "={{ $json.query.format }}",
              "rightValue": "=pdf",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5340,
        3060
      ],
      "id": "b9de84c0-6746-4a29-a593-0f104aced5fc",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6d7636c7-9b53-4e3a-8fcb-a01fc1567ad5",
              "leftValue": "={{ $json.query.format }}",
              "rightValue": "excel",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5280,
        3680
      ],
      "id": "5a2f6ef5-6d44-4e2c-8c26-16a4e9998140",
      "name": "If3"
    },
    {
      "parameters": {
        "content": "# Listing all simulations for the main page",
        "height": 620,
        "width": 5880,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6140,
        5160
      ],
      "typeVersion": 1,
      "id": "1b51aeab-138c-40b9-92a9-f27712e5c588",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# PDF",
        "height": 360,
        "width": 3080,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5360,
        2900
      ],
      "typeVersion": 1,
      "id": "9e6995a4-f851-4d90-9f7b-fab0a0886c3a",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# Excel",
        "height": 360,
        "width": 3080,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5340,
        3540
      ],
      "typeVersion": 1,
      "id": "b4c77063-b67c-4e81-8da5-427ccf431187",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import zipfile\nimport base64\nimport io\n\n# Get all input items \nitems = _input.all()\n\nprint(f\"Processing {len(items)} items for ZIP creation\")\n\n# Create a BytesIO object to hold the ZIP file in memory\nzip_buffer = io.BytesIO()\n\n# Create a ZIP file\nwith zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n    for i, item in enumerate(items):\n        try:\n            # Debug: Print binary keys\n            if 'binary' not in item:\n                print(f\"Item {i} skipped: No binary key\")\n                continue\n\n            binary_keys = list(item['binary'].keys())\n            if not binary_keys:\n                print(f\"Item {i} skipped: Binary key is empty\")\n                continue\n\n            key = binary_keys[0]  # Use the first binary key (e.g., 'test_0', 'data')\n            binary_data = item['binary'][key]\n\n            pdf_data = binary_data.get('data')\n            original_filename = binary_data.get('fileName', f'document_{i+1}.pdf')\n\n            # Fallback for file extension\n            if not original_filename.endswith('.pdf'):\n                pdf_filename = original_filename.replace('.html', '.pdf')\n            else:\n                pdf_filename = original_filename\n\n            # Decode base64 to bytes\n            pdf_bytes = base64.b64decode(pdf_data)\n\n            # Check it's a valid PDF\n            if pdf_bytes.startswith(b'%PDF'):\n                print(f\"Adding valid PDF: {pdf_filename} ({len(pdf_bytes)} bytes)\")\n                zip_file.writestr(pdf_filename, pdf_bytes)\n            else:\n                print(f\"Warning: {pdf_filename} doesn't look like a PDF, adding as INVALID_{pdf_filename}\")\n                zip_file.writestr(f\"INVALID_{pdf_filename}\", pdf_bytes)\n\n        except Exception as e:\n            print(f\"Error processing item {i}: {str(e)}\")\n            continue\n\n# Finalize ZIP\nzip_buffer.seek(0)\nzip_bytes = zip_buffer.read()\nzip_base64 = base64.b64encode(zip_bytes).decode('utf-8')\n\nprint(f\"ZIP created: {len(zip_bytes)} bytes, {len(items)} items\")\n\n# Return final ZIP as binary\nreturn [{\n    'json': {\n        'message': f\"ZIP created with {len(items)} files\",\n        'fileCount': len(items),\n        'zipSizeBytes': len(zip_bytes)\n    },\n    'binary': {\n        'data': {\n            'data': zip_base64,\n            'fileName': 'simulation_documents.zip',\n            'mimeType': 'application/zip'\n        }\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2420,
        2940
      ],
      "id": "41a576d9-fcc7-42e0-a464-9fa597a519a9",
      "name": "Code8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://34.59.1.191:8000/process-documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "={{$json.toJsonString()}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2460,
        3680
      ],
      "id": "1ba5c642-519a-4568-b757-290277f6314a",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "project_simulations",
          "mode": "list",
          "cachedResultName": "project_simulations"
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $('Edit Fields5').item.json.project_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4160,
        3680
      ],
      "id": "4aa595cb-6e09-4057-a948-a28bc2500592",
      "name": "Select rows from a table2",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "74d35356-73f0-4dc1-90c4-b3b6b0da9526",
              "name": "=company_name",
              "value": "={{ $('Select rows from a table2').item.json.input_config.companies.last().company_name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3940,
        3680
      ],
      "id": "e531655f-3b30-42eb-851d-1e1995c3ecfa",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "content": "## soft delete project simulation\n\n### example usage\n\ncurl -X POST https://n8n.simthetic.ai/webhook-test/soft-delete \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"id\": 2}'",
        "height": 620,
        "width": 5900,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6140,
        6400
      ],
      "typeVersion": 1,
      "id": "de082345-36c0-4168-96f0-249b703de165",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "1577ba08-4581-4d42-b839-42de8b0da635",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5900,
        6620
      ],
      "id": "3fa96101-8db6-4a0b-b1a5-6f20ee36a5b0",
      "name": "Webhook7",
      "webhookId": "1577ba08-4581-4d42-b839-42de8b0da635"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE project_simulations\nSET is_deleted = TRUE, updated_at = NOW()\nWHERE id = $1;",
        "options": {
          "queryReplacement": "={{ $json.body.id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4460,
        6620
      ],
      "id": "6d535cef-03cd-4658-8008-e46eb62d95b6",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -3200,
        6620
      ],
      "id": "72569696-4f1f-437e-a11e-346e4e4b9329",
      "name": "Respond to Webhook6"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "simulation_documents",
          "mode": "list",
          "cachedResultName": "simulation_documents"
        },
        "limit": 10,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $('Edit Fields5').item.json.project_id }}"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "files",
            "cleanpdffiles",
            "file_name"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3160,
        4340
      ],
      "id": "ec8bd295-3a5d-497a-a124-1b3c1532aafa",
      "name": "Select rows from a table7",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "03ce2801-589f-46d4-93b7-09dcce417d46",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "d2c6b351-7769-4a81-ab16-9b535b06ae33",
              "leftValue": "={{ $json.cleanpdffiles }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2920,
        4340
      ],
      "id": "1fc52492-b31f-4dbf-9624-7c6eb9ae029e",
      "name": "If6"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "files",
        "options": {
          "fileName": "={{ $json.file_name+'.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2460,
        4040
      ],
      "id": "f0d89209-3f7e-4923-a533-173cbc9ca5a1",
      "name": "Convert to File26"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "cleanpdffiles",
        "options": {
          "fileName": "={{ $('If6').item.json.file_name+'_clean.zip' }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2460,
        4320
      ],
      "id": "f9e61adb-4797-42fa-af7f-6aedc551ec38",
      "name": "Convert to File27"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1160,
        4040
      ],
      "id": "23b968a8-b58d-4676-8a41-8d5bce98a0bb",
      "name": "Merge7"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"Oops\": \"PDF Generations still in process. Come back later 😀\"\n\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2440,
        4600
      ],
      "id": "d5bcc29d-2bce-40e6-b0cb-3ebd6285d79f",
      "name": "Edit Fields13"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    sd.id,\n    sd.project_simulation_id,\n    ps.project_name,\n    sd.file_name,\n    sd.cleansimulation,\n    --sd.document_data,\n    sd.enhancedsimulation\nFROM\n    public.simulation_documents AS sd\nLEFT JOIN\n    public.project_simulations AS ps ON sd.project_simulation_id = ps.id\nWHERE\n    sd.project_simulation_id = $1;",
        "options": {
          "queryReplacement": "= {{ $('Edit Fields5').item.json.project_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3100,
        3680
      ],
      "id": "9e06951b-b47b-41f2-8d89-aa3c01426233",
      "name": "Select rows from a table",
      "credentials": {
        "postgres": {
          "id": "XqeBwODpiMWjJGxP",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.simthetic.ai",
            "x-real-ip": "102.219.210.194",
            "x-forwarded-for": "102.219.210.194",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "15536",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
            "accept": "application/json, text/plain, */*",
            "sec-ch-ua": "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "origin": "https://app.simthetic.ai",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://app.simthetic.ai/",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {},
          "body": {
            "projectName": "New Document Set",
            "scenarioName": "Docent Scenario",
            "session_id": "318edc78-e880-465f-bcf6-c5fb31cd809c",
            "company_count": 1,
            "stage1": {
              "company_count": 1,
              "companies": [
                {
                  "company_name": "MediaSphere Inc.",
                  "industry": "Media",
                  "region": "United States",
                  "fiscal_year_end": "December 31",
                  "business_context": {
                    "business_model": "MediaSphere Inc. operates on a subscription-based model, generating the majority of its revenue from monthly and annual subscriptions to its online digital content. It offers a variety of news, entertainment, and educative content through its platform. Apart from subscriptions, the company also earns revenue from advertising and partnership with other media companies.",
                    "description": "MediaSphere Inc. is a leading digital media company focusing on providing high-quality digital content, including news, entertainment, and educational materials. They leverage cutting-edge technology to deliver a personalized and immersive content experience to their subscribers. They are also committed to partnering with other media firms to diversify their content and reach a larger audience."
                  }
                }
              ]
            },
            "companyProfile": {
              "company_name": "MediaSphere Inc.",
              "industry": "media",
              "region": "United States",
              "fiscal_year_end": "December 31",
              "business_context": {
                "ticker": null,
                "sector": "Other",
                "market_cap": null,
                "primary_products": null,
                "business_model": "MediaSphere Inc. operates on a subscription-based model, generating the majority of its revenue from monthly and annual subscriptions to its online digital content. It offers a variety of news, entertainment, and educative content through its platform. Apart from subscriptions, the company also earns revenue from advertising and partnership with other media companies.",
                "regulatory_environment": "Standard U.S. regulations",
                "known_risks": [
                  "cutoff errors",
                  "missing documentation"
                ],
                "description": "MediaSphere Inc. is a leading digital media company focusing on providing high-quality digital content, including news, entertainment, and educational materials. They leverage cutting-edge technology to deliver a personalized and immersive content experience to their subscribers. They are also committed to partnering with other media firms to diversify their content and reach a larger audience.",
                "revenue_model": "subscription",
                "geographic_footprint": [
                  "United States"
                ],
                "key_customers": [],
                "seasonal_patterns": false,
                "prior_audit_findings": null,
                "management_integrity_concerns": null,
                "internal_control_maturity": "developing"
              },
              "branding": {
                "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-26.svg",
                "primary_color": "#334155",
                "secondary_color": "#0F172A",
                "font_family": "Inter",
                "document_style": "modern"
              },
              "revenue_model": "subscription",
              "company_specific_risks": null,
              "vendors": [
                {
                  "name": "Kordia Packaging",
                  "entity_type": "vendor",
                  "industry": "media",
                  "address": "202 Market St, Denver, CO",
                  "tags": [
                    "preferred",
                    "net30"
                  ],
                  "metadata": {},
                  "branding": {
                    "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-24.svg",
                    "primary_color": "#334155",
                    "secondary_color": "#0F172A",
                    "font_family": "Inter",
                    "document_style": "formal"
                  }
                }
              ],
              "banks": [
                {
                  "name": "Hanover Bank",
                  "entity_type": "bank",
                  "industry": "Financials",
                  "address": "286 Main Ave, Evergreen, CO",
                  "tags": [
                    "primary"
                  ],
                  "metadata": {},
                  "branding": {
                    "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-12.svg",
                    "primary_color": "#334155",
                    "secondary_color": "#0F172A",
                    "font_family": "Inter",
                    "document_style": "formal"
                  }
                }
              ],
              "shipping_partners": [
                {
                  "name": "Pioneer Freight",
                  "entity_type": "shipper",
                  "industry": "Logistics",
                  "address": "2685 Freight Rd, Denver, CO",
                  "tags": [
                    "ground",
                    "tracking"
                  ],
                  "metadata": {},
                  "branding": {
                    "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-3.svg",
                    "primary_color": "#334155",
                    "secondary_color": "#0F172A",
                    "font_family": "Inter",
                    "document_style": "formal"
                  }
                }
              ]
            },
            "profiles": [
              {
                "company_name": "MediaSphere Inc.",
                "industry": "media",
                "region": "United States",
                "fiscal_year_end": "December 31",
                "business_context": {
                  "ticker": null,
                  "sector": "Other",
                  "market_cap": null,
                  "primary_products": null,
                  "business_model": "MediaSphere Inc. operates on a subscription-based model, generating the majority of its revenue from monthly and annual subscriptions to its online digital content. It offers a variety of news, entertainment, and educative content through its platform. Apart from subscriptions, the company also earns revenue from advertising and partnership with other media companies.",
                  "regulatory_environment": "Standard U.S. regulations",
                  "known_risks": [
                    "cutoff errors",
                    "missing documentation"
                  ],
                  "description": "MediaSphere Inc. is a leading digital media company focusing on providing high-quality digital content, including news, entertainment, and educational materials. They leverage cutting-edge technology to deliver a personalized and immersive content experience to their subscribers. They are also committed to partnering with other media firms to diversify their content and reach a larger audience.",
                  "revenue_model": "subscription",
                  "geographic_footprint": [
                    "United States"
                  ],
                  "key_customers": [],
                  "seasonal_patterns": false,
                  "prior_audit_findings": null,
                  "management_integrity_concerns": null,
                  "internal_control_maturity": "developing"
                },
                "branding": {
                  "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-26.svg",
                  "primary_color": "#334155",
                  "secondary_color": "#0F172A",
                  "font_family": "Inter",
                  "document_style": "modern"
                },
                "revenue_model": "subscription",
                "company_specific_risks": null,
                "vendors": [
                  {
                    "name": "Kordia Packaging",
                    "entity_type": "vendor",
                    "industry": "media",
                    "address": "202 Market St, Denver, CO",
                    "tags": [
                      "preferred",
                      "net30"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-24.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "banks": [
                  {
                    "name": "Hanover Bank",
                    "entity_type": "bank",
                    "industry": "Financials",
                    "address": "286 Main Ave, Evergreen, CO",
                    "tags": [
                      "primary"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-12.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ],
                "shipping_partners": [
                  {
                    "name": "Pioneer Freight",
                    "entity_type": "shipper",
                    "industry": "Logistics",
                    "address": "2685 Freight Rd, Denver, CO",
                    "tags": [
                      "ground",
                      "tracking"
                    ],
                    "metadata": {},
                    "branding": {
                      "logo_url": "https://logoipsum.com/wp-content/uploads/2020/07/logo-3.svg",
                      "primary_color": "#334155",
                      "secondary_color": "#0F172A",
                      "font_family": "Inter",
                      "document_style": "formal"
                    }
                  }
                ]
              }
            ],
            "companies": [
              {
                "company_name": "MediaSphere Inc.",
                "industry": "media",
                "documents": [
                  {
                    "document_type": "Disbursement Listing",
                    "source": "Internal",
                    "file_type": "CSV",
                    "required_fields": [
                      "Account_Number",
                      "Date_of_transaction",
                      "Transactional_Details",
                      "Transaction_Amount",
                      "Document Number",
                      "Transaction Description",
                      "Vendor Name",
                      "Vendor Number"
                    ],
                    "optional_fields": [],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Date_of_transaction": "2024-11-09",
                      "Vendor Name": "Kordia Packaging",
                      "Account_Number": "91854801",
                      "Requestor_Account_Number": "96852367",
                      "Transaction_Amount": "3304.00"
                    }
                  },
                  {
                    "document_type": "Expenses sub-ledger",
                    "source": "Internal",
                    "file_type": "CSV",
                    "required_fields": [
                      "GL_Account_Number",
                      "GL_Account_Name",
                      "GL_Account_Balance",
                      "Supplier_Name",
                      "Goods_or_Services_Description",
                      "Transaction_Amount",
                      "Date_of_Transaction",
                      "Transaction_Number",
                      "Due_Date_Payables"
                    ],
                    "optional_fields": [
                      "Invoice #",
                      "Invoice Date",
                      "Amount CU",
                      "Currency Unit",
                      "Amount (Functional)",
                      "Amount (USD)"
                    ],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Date_of_Transaction": "2024-10-24",
                      "Supplier_Name": "Kordia Packaging",
                      "Transaction_Amount": "11702.00"
                    }
                  },
                  {
                    "document_type": "Invoice (Goods)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Item_Quantity",
                      "Item_Price",
                      "Total_Amount_Due",
                      "Purchase_Order_Number",
                      "Delivery_/_Completion_Date",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number_/_Work_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Date_of_Invoice": "2024-07-16",
                      "Supplier_Name": "Kordia Packaging",
                      "Total_Amount_Due": "8170.00",
                      "Item_Price": "583.00",
                      "Item_Quantity": "190",
                      "Purchase_Order_Number": "PO-19384",
                      "Invoice_Number": "INV-180184"
                    }
                  },
                  {
                    "document_type": "Wire Transfer",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Transaction_Type_(or_Category)",
                      "Amount_(or_Total)",
                      "Requestor",
                      "Recipient",
                      "Wire_Date",
                      "Transaction_(or_Reference)_Number",
                      "Requestor_Account_Number",
                      "Recipient_Account_Number",
                      "Currency"
                    ],
                    "optional_fields": [
                      "Confirmation_Number",
                      "Requestor_Routing_Number",
                      "Requestor_Bank_Name",
                      "Recipient_Routing_Number",
                      "Recipient_Bank_Name",
                      "Memo_Reference"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Wire_Date": "2024-12-25",
                      "Account_Number": "74762721",
                      "Requestor_Account_Number": "29590695",
                      "Recipient_Account_Number": "44398506",
                      "Transaction_(or_Reference)_Number": "WT-6892057"
                    }
                  },
                  {
                    "document_type": "Shipping Document (Sending)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Shipping_Document_Number",
                      "Shipping_Doc_date",
                      "Customer_name",
                      "Customer_Address",
                      "Purchase_Order_Number",
                      "Item_Quantity",
                      "Product_Description",
                      "Supplier_Name",
                      "Supplier_Address",
                      "Date_Shipped",
                      "Shipping_carrier",
                      "Shipping_method",
                      "Tracking_number"
                    ],
                    "optional_fields": [
                      "Customer_Number",
                      "Supplier_Number",
                      "Product_Code",
                      "Item_Price",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Line_item_amount",
                      "Date_Delivered",
                      "Shipper's_name_and_address",
                      "Consignee's_name_and_address",
                      "Bill_of_lading_number",
                      "Packaging_details",
                      "Insurance_details",
                      "Customs_information",
                      "Proof_of_delivery",
                      "Received_Date",
                      "Shipping_or_Delivery_Terms"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Supplier_Name": "Kordia Packaging",
                      "Item_Quantity": "105",
                      "Purchase_Order_Number": "PO-28132"
                    }
                  },
                  {
                    "document_type": "Shipping Document (Receiving)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Shipping_Document_Number",
                      "Shipping_Doc_date",
                      "Customer_name",
                      "Customer_Address",
                      "Purchase_Order_Number",
                      "Item_Quantity",
                      "Product_Description",
                      "Supplier_Name",
                      "Supplier_Address",
                      "Date_Shipped",
                      "Shipping_carrier",
                      "Shipping_method",
                      "Tracking_number"
                    ],
                    "optional_fields": [
                      "Customer_Number",
                      "Supplier_Number",
                      "Product_Code",
                      "Item_Price",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Line_item_amount",
                      "Date_Delivered",
                      "Shipper's_name_and_address",
                      "Consignee's_name_and_address",
                      "Bill_of_lading_number",
                      "Packaging_details",
                      "Insurance_details",
                      "Customs_information",
                      "Proof_of_delivery",
                      "Received_Date",
                      "Shipping_or_Delivery_Terms"
                    ],
                    "linking_fields": [
                      "Invoice Number",
                      "PO Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Supplier_Name": "Kordia Packaging",
                      "Item_Quantity": "81",
                      "Purchase_Order_Number": "PO-46040"
                    }
                  },
                  {
                    "document_type": "Order Document (Sales and Purchases)",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Purchase_Order_Number",
                      "Purchase_Order_Date",
                      "Supplier_Name",
                      "Customer_Name",
                      "Item_Quantity",
                      "Product_Description",
                      "Unit_of_measurement",
                      "Currency_Unit",
                      "Item_Price",
                      "Total_Purchase_Order_Value",
                      "Delivery_Date"
                    ],
                    "optional_fields": [
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Payment_Terms",
                      "Terms_and_Conditions",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Supplier_Name": "Kordia Packaging",
                      "Item_Price": "2735.00",
                      "Item_Quantity": "18",
                      "Purchase_Order_Number": "PO-18253"
                    }
                  },
                  {
                    "document_type": "Bank Statement",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Account_Number",
                      "Statement_Period",
                      "Opening_or_Beginning_or_Previous_Balance",
                      "Closing_or_Ending_Balance",
                      "Deposit_or_Credit_Totals",
                      "Withdrawal_or_Debit_Totals",
                      "Transactional_Details",
                      "Date_of_transaction",
                      "Transaction_Number",
                      "Balance",
                      "Bank_name"
                    ],
                    "optional_fields": [
                      "Deposit_or_Credit_Amount",
                      "Withdrawals_or_Debit_Amounts",
                      "Fees_Charged",
                      "Interest_Earned",
                      "Interest_Paid",
                      "Account_Alerts",
                      "Account_Closure_details",
                      "Account_type"
                    ],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Date_of_transaction": "2024-03-02",
                      "Bank_name": "Hanover Bank",
                      "Account_Number": "16783747",
                      "Requestor_Account_Number": "98335255"
                    }
                  },
                  {
                    "document_type": "Invoices (for Services)",
                    "source": "External",
                    "file_type": "PDF",
                    "required_fields": [
                      "Invoice_Number",
                      "Date_of_Invoice",
                      "Supplier_Name",
                      "Product_Description",
                      "Service_Date",
                      "Total_Amount_Due",
                      "Currency_Unit"
                    ],
                    "optional_fields": [
                      "Payment_Due_Date",
                      "Supplier_Number",
                      "Supplier_Address",
                      "Customer_Name",
                      "Customer_Account_Number",
                      "Customer_Address",
                      "Product_Code",
                      "Payment_Terms",
                      "Tax_Details",
                      "Line_Item_Amount",
                      "Tax",
                      "Freight_Charges",
                      "Discount",
                      "Shipping_or_Delivery_Terms",
                      "Sales_Order_Number",
                      "Unit_of_measurement",
                      "Selling_costs",
                      "Transfer_of_rights_indication",
                      "Customer_Number",
                      "Signature"
                    ],
                    "linking_fields": [
                      "Invoice Number"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {
                      "Currency_Unit": "USD",
                      "Currency": "USD",
                      "Date_of_Invoice": "2024-10-30",
                      "Supplier_Name": "Kordia Packaging",
                      "Total_Amount_Due": "17985.00",
                      "Invoice_Number": "INV-716504"
                    }
                  },
                  {
                    "document_type": "Purchase Contract Snippet",
                    "source": "Internal",
                    "file_type": "PDF",
                    "required_fields": [
                      "Amount",
                      "Service_dates",
                      "Transaction_id"
                    ],
                    "optional_fields": [],
                    "linking_fields": [
                      "Vendor",
                      "Amount",
                      "Date"
                    ],
                    "hints": {
                      "preferred_vendors": [
                        "Kordia Packaging"
                      ],
                      "primary_bank": "Hanover Bank",
                      "shipping_partners": [
                        "Pioneer Freight"
                      ],
                      "industry": "media",
                      "region": "United States"
                    },
                    "edge_case_hooks": [],
                    "prefill": {}
                  }
                ]
              }
            ],
            "warnings": [],
            "webhookUrl": "https://n8n.simthetic.ai/webhook/simthetic",
            "executionMode": "production"
          },
          "webhookUrl": "https://n8n.simthetic.ai/webhook/simthetic",
          "executionMode": "production"
        }
      }
    ],
    "AI Agent5": [
      {
        "json": {
          "output": "{\n  \"simulationProject\": \"MediaSphere Procure-to-Pay Test Errors Injection\",\n  \"processedRuns\": [\n    {\n      \"simulationId\": \"RUN-318edc78-e880-465f-bcf6-c5fb31cd809c-01\",\n      \"analysis\": {\n        \"documentTypes\": [\n          \"Disbursement Listing\",\n          \"Expenses sub-ledger\",\n          \"Invoice (Goods)\",\n          \"Wire Transfer\",\n          \"Shipping Document (Sending)\",\n          \"Shipping Document (Receiving)\",\n          \"Order Document (Sales and Purchases)\",\n          \"Bank Statement\",\n          \"Invoices (for Services)\",\n          \"Purchase Contract Snippet\"\n        ],\n        \"relationships\": [\n          {\n            \"type\": \"PO-Invoice Match\",\n            \"fields\": [\n              \"Invoice (Goods).Purchase_Order_Number\",\n              \"Order Document (Sales and Purchases).Purchase_Order_Number\"\n            ],\n            \"description\": \"Links goods invoice to its purchase order for value and vendor checks.\"\n          },\n          {\n            \"type\": \"Wire-Payment Reconciliation\",\n            \"fields\": [\n              \"Wire Transfer.Transaction_(or_Reference)_Number\",\n              \"Disbursement Listing.Document Number\"\n            ],\n            \"description\": \"Wire reference must tie to disbursement and invoice.\"\n          },\n          {\n            \"type\": \"Bank Statement Reconciliation\",\n            \"fields\": [\n              \"Bank Statement.Transaction_Number\",\n              \"Wire Transfer.Transaction_(or_Reference)_Number\"\n            ],\n            \"description\": \"Wire transfer reference in bank statement for payment traceability.\"\n          }\n        ],\n        \"errorStrategy\": \"For each document type, simulate all error types listed in the test plan via field mutation, data omission, duplication, value modification, or vague/contradictory language per real-world fraud/compliance error phenomena. One representative error from each category is injected into the dataset at record or field level to maximize coverage without increasing data cardinality.\",\n        \"totalErrorsToInject\": 63\n      },\n      \"processedDocuments\": {\n        \"Disbursement Listing\": [\n          {\n            \"docId\": \"DISB-20240629\",\n            \"docType\": \"Disbursement Listing\",\n            \"data\": [\n              {\n                \"Account_Number\": \"91854801\",\n                \"Date_of_transaction\": \"2024-07-17\",\n                \"Transactional_Details\": \"Payment for INV-20240629-GDS\",\n                \"Transaction_Amount\": \"110770.00\",\n                \"Document Number\": \"\",\n                \"Transaction Description\": \"Paid GPK with incomplete PO\",\n                \"Vendor Name\": \"Kordia Pkg.\",\n                \"Vendor Number\": \"KPKG-01\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"CSV\"\n              },\n              {\n                \"Account_Number\": \"91854801\",\n                \"Date_of_transaction\": \"2024-10-30\",\n                \"Transactional_Details\": \"\",\n                \"Transaction_Amount\": \"17985.00\",\n                \"Document Number\": \"INV-20240629-SRV\",\n                \"Transaction Description\": \"Services payment per PO-20240629\",\n                \"Vendor Name\": \"Kordia Packaging\",\n                \"Vendor Number\": \"KPKG-01\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"CSV\"\n              },\n              {\n                \"Account_Number\": \"91854801\",\n                \"Date_of_transaction\": \"2024-07-17\",\n                \"Transactional_Details\": \"Returned payment for INV-20240629-GDS\",\n                \"Transaction_Amount\": \"110770.00\",\n                \"Document Number\": \"INV-20240629-GDS\",\n                \"Transaction Description\": \"Goods payment refund\",\n                \"Vendor Name\": \"Kordia Packaging\",\n                \"Vendor Number\": \"KPKG-01\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"CSV\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Timing/Cutoff Error: Recurring expense paid late---payment for INV-20240629-GDS recorded on 2024-07-17 instead of 2024-07-16.\",\n              \"Mismatch: Payment to GPK with no PO linkage (Document Number blank).\",\n              \"Vendor anomaly: Vendor name slightly altered---'Kordia Pkg.' instead of full.\",\n              \"Suspicious pattern: Two payments to same vendor for goods on the same day (possible split).\",\n              \"Documentation anomaly: One disbursement has blank Transactional_Details.\",\n              \"Systemic process gap: Goods payment noted as incomplete PO (Transaction Description).\",\n              \"External discrepancy: Matching debit & credit for same vendor/amount (refund).\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_transaction\": \"2024-07-16\",\n                \"Vendor Name\": \"Kordia Packaging\",\n                \"Document Number\": \"INV-20240629-GDS\",\n                \"Transactional_Details\": \"Payment for INV-20240629-SRV\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_transaction\",\n                  \"type\": \"Timing/Cutoff Error\",\n                  \"originalValue\": \"2024-07-16\",\n                  \"errorValue\": \"2024-07-17\",\n                  \"reason\": \"Simulate late recurring payment, pushing expense out of period.\"\n                },\n                {\n                  \"field\": \"Document Number\",\n                  \"type\": \"Mismatch between linked documents\",\n                  \"originalValue\": \"INV-20240629-GDS\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Simulate missing PO/invoice link in disbursement.\"\n                },\n                {\n                  \"field\": \"Vendor Name\",\n                  \"type\": \"Vendor irregularities\",\n                  \"originalValue\": \"Kordia Packaging\",\n                  \"errorValue\": \"Kordia Pkg.\",\n                  \"reason\": \"Unapproved name variant for recurring vendor.\"\n                },\n                {\n                  \"field\": \"Transactional_Details\",\n                  \"type\": \"Description / Documentation Anomalies\",\n                  \"originalValue\": \"Payment for INV-20240629-SRV\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Simulate vague/missing payment description.\"\n                },\n                {\n                  \"field\": \"Document Number\",\n                  \"type\": \"Systemic Process Gaps\",\n                  \"originalValue\": \"INV-20240629-GDS\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"No formal PO reference.\"\n                },\n                {\n                  \"field\": \"Transaction Description\",\n                  \"type\": \"Systemic Process Gaps\",\n                  \"originalValue\": \"Goods payment per PO-20240629\",\n                  \"errorValue\": \"Paid GPK with incomplete PO\",\n                  \"reason\": \"Indicates payment outside three-way match.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Expenses sub-ledger\": [\n          {\n            \"docId\": \"GL-EXP-20240629\",\n            \"docType\": \"Expenses sub-ledger\",\n            \"data\": [\n              {\n                \"GL_Account_Number\": \"5120\",\n                \"GL_Account_Name\": \"Equipment Purchases\",\n                \"GL_Account_Balance\": \"110770.00\",\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Goods_or_Services_Description\": \"Broadcast Camera Kit\",\n                \"Transaction_Amount\": \"110770.00\",\n                \"Date_of_Transaction\": \"2024-08-03\",\n                \"Transaction_Number\": \"EXP-20240629-GDS\",\n                \"Due_Date_Payables\": \"2024-07-30\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"CSV\"\n              },\n              {\n                \"GL_Account_Number\": \"5205\",\n                \"GL_Account_Name\": \"Professional Services\",\n                \"GL_Account_Balance\": \"17985.00\",\n                \"Supplier_Name\": \"Kordia Jones\",\n                \"Goods_or_Services_Description\": \"Consulting Projects (Media Equipment Setup)\",\n                \"Transaction_Amount\": \"10000.00\",\n                \"Date_of_Transaction\": \"2024-10-30\",\n                \"Transaction_Number\": \"EXP-20240629-SRV\",\n                \"Due_Date_Payables\": \"\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"CSV\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Timing/Cutoff Error: Equipment invoice recorded on 2024-08-03, but invoice dated 2024-07-16 (after cutoff).\",\n              \"Mismatch: Duplicate services entry (Transaction Number reused) with different amount ($10000.00 instead of $17985.00).\",\n              \"Vendor irregularity: Supplier_Name 'Kordia Jones' matches internal staff (simulated conflict of interest).\",\n              \"Suspicious: Exact round-dollar invoice ($10000.00) for services.\",\n              \"Description/documentation: Goods_or_Services_Description references 'Consulting Projects (Media Equipment Setup)' not matching GL Account.\",\n              \"Systemic gap: Services entry missing Due_Date_Payables (potentially no PO).\",\n              \"External discrepancy: 'Consulting Projects...' on ledger but paid invoice/memo lists different service (contradiction).\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_Transaction\": \"2024-07-16\",\n                \"Transaction_Amount\": \"17985.00\",\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Goods_or_Services_Description\": \"Digital Content Production Consulting\",\n                \"Due_Date_Payables\": \"2024-11-15\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_Transaction\",\n                  \"type\": \"Timing/Cutoff Error\",\n                  \"originalValue\": \"2024-07-16\",\n                  \"errorValue\": \"2024-08-03\",\n                  \"reason\": \"Pushes expense into next period after invoice date.\"\n                },\n                {\n                  \"field\": \"Transaction_Number\",\n                  \"type\": \"Mismatch between linked documents\",\n                  \"originalValue\": \"EXP-20240629-SRV\",\n                  \"errorValue\": \"EXP-20240629-SRV\",\n                  \"reason\": \"Duplicate entry by ID, different amount.\"\n                },\n                {\n                  \"field\": \"Transaction_Amount\",\n                  \"type\": \"Mismatch between linked documents / Suspicious\",\n                  \"originalValue\": \"17985.00\",\n                  \"errorValue\": \"10000.00\",\n                  \"reason\": \"Round-dollar and mismatch duplication.\"\n                },\n                {\n                  \"field\": \"Supplier_Name\",\n                  \"type\": \"Vendor irregularities\",\n                  \"originalValue\": \"Kordia Packaging\",\n                  \"errorValue\": \"Kordia Jones\",\n                  \"reason\": \"Simulates internal employee as vendor.\"\n                },\n                {\n                  \"field\": \"Goods_or_Services_Description\",\n                  \"type\": \"Description / Documentation Anomalies\",\n                  \"originalValue\": \"Digital Content Production Consulting\",\n                  \"errorValue\": \"Consulting Projects (Media Equipment Setup)\",\n                  \"reason\": \"Category and description mismatch.\"\n                },\n                {\n                  \"field\": \"Due_Date_Payables\",\n                  \"type\": \"Systemic Process Gap\",\n                  \"originalValue\": \"2024-11-15\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"PO reference implied missing.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Invoice (Goods)\": [\n          {\n            \"docId\": \"INV-20240629-GDS\",\n            \"docType\": \"Invoice (Goods)\",\n            \"data\": [\n              {\n                \"Invoice_Number\": \"INV-20240629-GDS\",\n                \"Date_of_Invoice\": \"2024-06-28\",\n                \"Supplier_Name\": \"Kordia Pakg.\",\n                \"Product_Description\": \"Broadcast Camera Kit\",\n                \"Item_Quantity\": \"190\",\n                \"Item_Price\": \"583.00\",\n                \"Total_Amount_Due\": \"120000.00\",\n                \"Purchase_Order_Number\": \"PO-20240629\",\n                \"Delivery_/_Completion_Date\": \"2024-07-10\",\n                \"Currency_Unit\": \"USD\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Timing/Cutoff: Backdated invoice (Date_of_Invoice: 2024-06-28, prior to delivery and PO).\",\n              \"Linked Mismatch: Total_Amount_Due $120,000.00 exceeds PO total.\",\n              \"Vendor Anomaly: Supplier_Name 'Kordia Pakg.' (name subtly altered from master).\",\n              \"Suspicious: Item/Quantity/Amounts nearly identical to prior invoice.\",\n              \"Calculation anomaly: Total_Amount_Due $120,000.00 does not match (190 x 583.00).\",\n              \"Process gap: Customer contact via 'personal.email@gmail.com' in memo (simulated, not exposed).\",\n              \"External: Product_Description 'Broadcast Camera Kit' does not match the attached PO product notes.\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Date_of_Invoice\": \"2024-07-16\",\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Total_Amount_Due\": \"110770.00\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_Invoice\",\n                  \"type\": \"Timing/Cutoff Error\",\n                  \"originalValue\": \"2024-07-16\",\n                  \"errorValue\": \"2024-06-28\",\n                  \"reason\": \"Shifts recognition period by predating invoice.\"\n                },\n                {\n                  \"field\": \"Supplier_Name\",\n                  \"type\": \"Vendor irregularities\",\n                  \"originalValue\": \"Kordia Packaging\",\n                  \"errorValue\": \"Kordia Pakg.\",\n                  \"reason\": \"Subtly altered vendor name.\"\n                },\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Mismatch / Calculation\",\n                  \"originalValue\": \"110770.00\",\n                  \"errorValue\": \"120000.00\",\n                  \"reason\": \"Invoice exceeds PO, calculation invalid.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Wire Transfer\": [\n          {\n            \"docId\": \"WIRE-20240629\",\n            \"docType\": \"Wire Transfer\",\n            \"data\": [\n              {\n                \"Transaction_Type_(or_Category)\": \"Goods Payment\",\n                \"Amount_(or_Total)\": \"120000.00\",\n                \"Requestor\": \"MediaSphere Inc.\",\n                \"Recipient\": \"Nemo LLC\",\n                \"Wire_Date\": \"2024-07-25\",\n                \"Transaction_(or_Reference)_Number\": \"WT-20240629-GDS\",\n                \"Requestor_Account_Number\": \"29590695\",\n                \"Recipient_Account_Number\": \"44398506\",\n                \"Currency\": \"USD\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Transaction_Type_(or_Category)\": \"Services Payment\",\n                \"Amount_(or_Total)\": \"17985.00\",\n                \"Requestor\": \"MediaSphere Inc.\",\n                \"Recipient\": \"Nemo LLC\",\n                \"Wire_Date\": \"2024-10-30\",\n                \"Transaction_(or_Reference)_Number\": \"WT-20240629-SRV\",\n                \"Requestor_Account_Number\": \"29590695\",\n                \"Recipient_Account_Number\": \"44398506\",\n                \"Currency\": \"USD\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Transaction_Type_(or_Category)\": \"Goods Payment\",\n                \"Amount_(or_Total)\": \"120000.00\",\n                \"Requestor\": \"MediaSphere Inc.\",\n                \"Recipient\": \"Nemo LLC\",\n                \"Wire_Date\": \"2024-07-25\",\n                \"Transaction_(or_Reference)_Number\": \"WT-20240629-GDS\",\n                \"Requestor_Account_Number\": \"29590695\",\n                \"Recipient_Account_Number\": \"44398506\",\n                \"Currency\": \"USD\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Late payment: Goods wire processed on 2024-07-25 (well after normal cycle).\",\n              \"Linked mismatch: Amount transferred ($120,000) greater than corresponding invoice.\",\n              \"Vendor: Recipient is 'Nemo LLC' (shell, no internet presence).\",\n              \"Suspicious: Two wires to same vendor, same day (duplicated).\",\n              \"Documentation: Requestor email in submission metadata is 'fakename@emailcom' (fake contact, not company address).\",\n              \"Systemic gap: First wire submitted manually by 'External_User01', not in AP authorized list.\",\n              \"External discrepancy: Credit in for $120,000 (matching outgoing wire) appears later in statement (simulated).\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Amount_(or_Total)\": \"110770.00\",\n                \"Recipient\": \"Kordia Packaging\",\n                \"Wire_Date\": \"2024-07-16\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Wire_Date\",\n                  \"type\": \"Timing/Cutoff Error\",\n                  \"originalValue\": \"2024-07-16\",\n                  \"errorValue\": \"2024-07-25\",\n                  \"reason\": \"Pushes payment past expected cycle to recurring vendor.\"\n                },\n                {\n                  \"field\": \"Amount_(or_Total)\",\n                  \"type\": \"Mismatch between linked documents\",\n                  \"originalValue\": \"110770.00\",\n                  \"errorValue\": \"120000.00\",\n                  \"reason\": \"Transmitted more than invoice/PO, overpayment.\"\n                },\n                {\n                  \"field\": \"Recipient\",\n                  \"type\": \"Vendor irregularities\",\n                  \"originalValue\": \"Kordia Packaging\",\n                  \"errorValue\": \"Nemo LLC\",\n                  \"reason\": \"Shell company for goods/services.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Shipping Document (Sending)\": [\n          {\n            \"docId\": \"SHIP-SEND-20240629\",\n            \"docType\": \"Shipping Document (Sending)\",\n            \"data\": [\n              {\n                \"Shipping_Document_Number\": \"SHIP-SEND-20240629\",\n                \"Shipping_Doc_date\": \"2024-07-09\",\n                \"Customer_name\": \"MediaSphere Inc.\",\n                \"Customer_Address\": \"202 Market St, Denver, CO\",\n                \"Purchase_Order_Number\": \"\",\n                \"Item_Quantity\": \"50\",\n                \"Product_Description\": \"Electronic Equipment - Misc.\",\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Supplier_Address\": \"202 Market St, Denver, CO\",\n                \"Date_Shipped\": \"2024-07-09\",\n                \"Shipping_carrier\": \"Pioneer Freight\",\n                \"Shipping_method\": \"ground\",\n                \"Tracking_number\": \"TRACK-20240629-SND-01\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Timing/Cutoff: Shipping of only 50 units of goods occurs on 2024-07-09, but invoice is for 190/PO for 190.\",\n              \"Item mismatch: Product_Description contains unspecific 'Electronic Equipment - Misc.' not found on PO/invoice.\",\n              \"Vendor: Split shipment is for 50 units, rest apparently separate (split invoice just under approval).\",\n              \"Suspicious frequency: 4th weekly shipment this month; expected yearly.\",\n              \"Vague description: No real product details provided.\",\n              \"Process gap: Purchase_Order_Number field blank (verbal/unsupported PO).\",\n              \"External: Memo in invoice lists broadcast kit, here just says 'Electronic Equipment - Misc.'\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Purchase_Order_Number\": \"PO-20240629\",\n                \"Item_Quantity\": \"190\",\n                \"Product_Description\": \"Broadcast Camera Kit\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Number\",\n                  \"type\": \"Systemic Process Gap\",\n                  \"originalValue\": \"PO-20240629\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Shipment missing PO linkage, suggests verbal/unsupported PO.\"\n                },\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description / Documentation Anomalies\",\n                  \"originalValue\": \"Broadcast Camera Kit\",\n                  \"errorValue\": \"Electronic Equipment - Misc.\",\n                  \"reason\": \"Vague and non-descriptive.\"\n                },\n                {\n                  \"field\": \"Item_Quantity\",\n                  \"type\": \"Vendor irregularities (split invoice)\",\n                  \"originalValue\": \"190\",\n                  \"errorValue\": \"50\",\n                  \"reason\": \"Simulated split shipment under approval threshold.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Shipping Document (Receiving)\": [\n          {\n            \"docId\": \"SHIP-RECV-20240629\",\n            \"docType\": \"Shipping Document (Receiving)\",\n            \"data\": [\n              {\n                \"Shipping_Document_Number\": \"SHIP-RECV-20240629\",\n                \"Shipping_Doc_date\": \"2024-07-10\",\n                \"Customer_name\": \"MediaSphere Inc.\",\n                \"Customer_Address\": \"202 Market St, Denver, CO\",\n                \"Purchase_Order_Number\": \"PO-20240629\",\n                \"Item_Quantity\": \"185\",\n                \"Product_Description\": \"Camera Accessories\",\n                \"Supplier_Name\": \"Kordia Packging\",\n                \"Supplier_Address\": \"202 Market St, Denver, CO\",\n                \"Date_Shipped\": \"2024-07-09\",\n                \"Shipping_carrier\": \"Pioneer Freight\",\n                \"Shipping_method\": \"ground\",\n                \"Tracking_number\": \"TRACK-20240629-RCV-01\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Timing/Cutoff: Goods received before invoice, invoice recorded in later period (unrecorded liability).\",\n              \"Item mismatch: Accessories received not on invoice/PO item list.\",\n              \"Vendor: Name typo---'Kordia Packging' instead of 'Kordia Packaging.'\",\n              \"Suspicious frequency: Item_Quantity is 185, not matching invoice (190) or shipping (50), suggests odd partial deliveries.\",\n              \"Documentation: Product_Description 'Camera Accessories' instead of original description.\",\n              \"Systemic process gap: PO linkage present but product count/description do not align (suggests breakdown).\",\n              \"External: Memo in invoice lists 'kit,' receipt shows 'accessories.'\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Item_Quantity\": \"190\",\n                \"Product_Description\": \"Broadcast Camera Kit\",\n                \"Supplier_Name\": \"Kordia Packaging\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Item_Quantity\",\n                  \"type\": \"Suspicious amounts or frequencies\",\n                  \"originalValue\": \"190\",\n                  \"errorValue\": \"185\",\n                  \"reason\": \"Odd frequency and shipment sizes.\"\n                },\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description / Documentation Anomalies\",\n                  \"originalValue\": \"Broadcast Camera Kit\",\n                  \"errorValue\": \"Camera Accessories\",\n                  \"reason\": \"Description does not match GL, PO, or invoice.\"\n                },\n                {\n                  \"field\": \"Supplier_Name\",\n                  \"type\": \"Vendor irregularities\",\n                  \"originalValue\": \"Kordia Packaging\",\n                  \"errorValue\": \"Kordia Packging\",\n                  \"reason\": \"Minor spelling error in vendor name.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Order Document (Sales and Purchases)\": [\n          {\n            \"docId\": \"PO-20240629\",\n            \"docType\": \"Order Document (Sales and Purchases)\",\n            \"data\": [\n              {\n                \"Purchase_Order_Number\": \"PO-20240629\",\n                \"Purchase_Order_Date\": \"2024-06-25\",\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Customer_Name\": \"MediaSphere Inc.\",\n                \"Item_Quantity\": \"2\",\n                \"Product_Description\": \"Video Services (Consulting)\",\n                \"Unit_of_measurement\": \"service\",\n                \"Currency_Unit\": \"USD\",\n                \"Item_Price\": \"10000.00\",\n                \"Total_Purchase_Order_Value\": \"10000.00\",\n                \"Delivery_Date\": \"2024-07-10\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Purchase_Order_Number\": \"PO-20240629\",\n                \"Purchase_Order_Date\": \"2024-07-02\",\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Customer_Name\": \"MediaSphere Inc.\",\n                \"Item_Quantity\": \"190\",\n                \"Product_Description\": \"Broadcast Camera Kit\",\n                \"Unit_of_measurement\": \"units\",\n                \"Currency_Unit\": \"USD\",\n                \"Item_Price\": \"583.00\",\n                \"Total_Purchase_Order_Value\": \"110770.00\",\n                \"Delivery_Date\": \"2024-07-10\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Timing/Cutoff: PO date for consulting backdated to 2024-06-25, predating relevant invoice.\",\n              \"Linked mismatch: Consulting PO value set as $10,000.00, but invoice is for $17,985 (amount mismatch).\",\n              \"Vendor: Two separate POs (split invoice under approval threshold).\",\n              \"Suspicious: Consulting PO amount is round ($10,000).\",\n              \"Documentation: 'Video Services (Consulting)' is not GL category for either product/service.\",\n              \"Systemic gap: First record's PO is referenced as verbal only, with no attachment.\",\n              \"External: Product_Description for 'services' mismatches invoice Service Description.\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Purchase_Order_Date\": \"2024-06-29\",\n                \"Item_Quantity\": \"1\",\n                \"Product_Description\": \"Digital Content Production Consulting\",\n                \"Total_Purchase_Order_Value\": \"17985.00\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Purchase_Order_Date\",\n                  \"type\": \"Backdated PO\",\n                  \"originalValue\": \"2024-06-29\",\n                  \"errorValue\": \"2024-06-25\",\n                  \"reason\": \"Predates actual invoice/service period.\"\n                },\n                {\n                  \"field\": \"Total_Purchase_Order_Value\",\n                  \"type\": \"Amount mismatch\",\n                  \"originalValue\": \"17985.00\",\n                  \"errorValue\": \"10000.00\",\n                  \"reason\": \"PO value lower than invoiced.\"\n                },\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description mismatch\",\n                  \"originalValue\": \"Digital Content Production Consulting\",\n                  \"errorValue\": \"Video Services (Consulting)\",\n                  \"reason\": \"GL/PO description differs from invoice.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Bank Statement\": [\n          {\n            \"docId\": \"BANK-20240629\",\n            \"docType\": \"Bank Statement\",\n            \"data\": [\n              {\n                \"Account_Number\": \"16783747\",\n                \"Statement_Period\": \"2024-07-01 to 2024-07-31\",\n                \"Opening_or_Beginning_or_Previous_Balance\": \"500000.00\",\n                \"Closing_or_Ending_Balance\": \"389230.00\",\n                \"Deposit_or_Credit_Totals\": \"120000.00\",\n                \"Withdrawal_or_Debit_Totals\": \"120000.00\",\n                \"Transactional_Details\": \"\",\n                \"Date_of_transaction\": \"2024-07-25\",\n                \"Transaction_Number\": \"WT-20240629-GDS\",\n                \"Balance\": \"389230.00\",\n                \"Bank_name\": \"Hanover Bank\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Account_Number\": \"16783747\",\n                \"Statement_Period\": \"2024-10-01 to 2024-10-31\",\n                \"Opening_or_Beginning_or_Previous_Balance\": \"389230.00\",\n                \"Closing_or_Ending_Balance\": \"371245.00\",\n                \"Deposit_or_Credit_Totals\": \"17985.00\",\n                \"Withdrawal_or_Debit_Totals\": \"17985.00\",\n                \"Transactional_Details\": \"Services payout for AC 23422\",\n                \"Date_of_transaction\": \"2024-10-30\",\n                \"Transaction_Number\": \"WT-20240629-SRV\",\n                \"Balance\": \"371245.00\",\n                \"Bank_name\": \"Hanover Bank\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Account_Number\": \"16783747\",\n                \"Statement_Period\": \"2024-07-01 to 2024-07-31\",\n                \"Opening_or_Beginning_or_Previous_Balance\": \"389230.00\",\n                \"Closing_or_Ending_Balance\": \"509230.00\",\n                \"Deposit_or_Credit_Totals\": \"120000.00\",\n                \"Withdrawal_or_Debit_Totals\": \"0.00\",\n                \"Transactional_Details\": \"Returned funds: Nemo LLC\",\n                \"Date_of_transaction\": \"2024-07-27\",\n                \"Transaction_Number\": \"WT-20240629-GDS\",\n                \"Balance\": \"509230.00\",\n                \"Bank_name\": \"Hanover Bank\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Cutoff error: Payment debited but no invoice recorded for large $120,000 (bank record for goods, invoice error in downstream system).\",\n              \"Linked mismatch: Withdrawal/deposit on 2024-07-25 is $120,000.00, but invoice (should) is $110,770, mismatch.\",\n              \"Vendor: Payee 'Nemo LLC' appears as counterparty, little history.\",\n              \"Suspicious: Two payments on 2024-07-25; both to Nemo LLC.\",\n              \"Documentation: First entry has blank Transactional_Details.\",\n              \"Process gap: Transaction processed by 'jsmith@email.com,' not in authorized payers.\",\n              \"External: Deposit in matches withdrawal value, identical counterparty (round-trip).\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Withdrawal_or_Debit_Totals\": \"110770.00\",\n                \"Deposit_or_Credit_Totals\": \"0.00\",\n                \"Transactional_Details\": \"Payment for Invoice INV-20240629-GDS\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Withdrawal_or_Debit_Totals\",\n                  \"type\": \"Mismatch between linked documents\",\n                  \"originalValue\": \"110770.00\",\n                  \"errorValue\": \"120000.00\",\n                  \"reason\": \"Amount does not match invoice/GL.\"\n                },\n                {\n                  \"field\": \"Deposit_or_Credit_Totals\",\n                  \"type\": \"External Discrepancy\",\n                  \"originalValue\": \"0.00\",\n                  \"errorValue\": \"120000.00\",\n                  \"reason\": \"Returned payment after wire transfer.\"\n                },\n                {\n                  \"field\": \"Transactional_Details\",\n                  \"type\": \"Description/Documentation\",\n                  \"originalValue\": \"Payment for Invoice INV-20240629-GDS\",\n                  \"errorValue\": \"\",\n                  \"reason\": \"Blank narrative, difficult to trace.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Invoices (for Services)\": [\n          {\n            \"docId\": \"INV-20240629-SRV\",\n            \"docType\": \"Invoices (for Services)\",\n            \"data\": [\n              {\n                \"Invoice_Number\": \"INV-20240629-SRV\",\n                \"Date_of_Invoice\": \"2024-11-20\",\n                \"Supplier_Name\": \"Nemo LLC\",\n                \"Product_Description\": \"Consulting Project - Special Project\",\n                \"Service_Date\": \"2024-08-30\",\n                \"Total_Amount_Due\": \"10000.00\",\n                \"Currency_Unit\": \"USD\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Invoice_Number\": \"INV-20240629-SRV\",\n                \"Date_of_Invoice\": \"2024-10-30\",\n                \"Supplier_Name\": \"Nemo LLC\",\n                \"Product_Description\": \"Consulting Project - Special Project\",\n                \"Service_Date\": \"2024-10-30\",\n                \"Total_Amount_Due\": \"17985.00\",\n                \"Currency_Unit\": \"USD\",\n                \"Source\": \"External\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Late invoice: Service_Date (2024-08-30), but Date_of_Invoice (2024-11-20).\",\n              \"Mismatch: Duplicate Invoice_Number 'INV-20240629-SRV' with different amounts.\",\n              \"Vendor: Supplier_Name 'Nemo LLC' (shell company, does not match prior vendor master).\",\n              \"Suspicious: Two invoices, same Invoice_Number, used in different months.\",\n              \"Documentation: Product_Description contains keyword 'Special Project' (suspicious, generic).\",\n              \"Systemic: First invoice lacks PO reference completely.\",\n              \"External: Product_Description is 'Consulting...', memo on payment record is 'Services payout for AC 23422'.\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Supplier_Name\": \"Kordia Packaging\",\n                \"Product_Description\": \"Digital Content Production Consulting\",\n                \"Service_Date\": \"2024-10-30\",\n                \"Date_of_Invoice\": \"2024-10-30\",\n                \"Total_Amount_Due\": \"17985.00\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Date_of_Invoice\",\n                  \"type\": \"Timing/Cutoff errors\",\n                  \"originalValue\": \"2024-10-30\",\n                  \"errorValue\": \"2024-11-20\",\n                  \"reason\": \"Late invoice relative to service period.\"\n                },\n                {\n                  \"field\": \"Supplier_Name\",\n                  \"type\": \"Vendor irregularities\",\n                  \"originalValue\": \"Kordia Packaging\",\n                  \"errorValue\": \"Nemo LLC\",\n                  \"reason\": \"Matches external shell company, not master.\"\n                },\n                {\n                  \"field\": \"Product_Description\",\n                  \"type\": \"Description/Documentation\",\n                  \"originalValue\": \"Digital Content Production Consulting\",\n                  \"errorValue\": \"Consulting Project - Special Project\",\n                  \"reason\": \"Suspicious keyword/phrase.\"\n                },\n                {\n                  \"field\": \"Total_Amount_Due\",\n                  \"type\": \"Suspicious amount and duplicate\",\n                  \"originalValue\": \"17985.00\",\n                  \"errorValue\": \"10000.00\",\n                  \"reason\": \"Round-dollar invoice, reused Invoice_Number, mismatch.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ],\n        \"Purchase Contract Snippet\": [\n          {\n            \"docId\": \"CONTRACT-20240629\",\n            \"docType\": \"Purchase Contract Snippet\",\n            \"data\": [\n              {\n                \"Amount\": \"10000.00\",\n                \"Service_dates\": \"2024-07-10 to 2024-07-15\",\n                \"Transaction_id\": \"CONTRACT-20240629-GDS\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Amount\": \"17985.00\",\n                \"Service_dates\": \"2024-10-30\",\n                \"Transaction_id\": \"CONTRACT-20240629-SRV\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"PDF\"\n              },\n              {\n                \"Amount\": \"5000.00\",\n                \"Service_dates\": \"\",\n                \"Transaction_id\": \"CONTRACT-20240629-SPLIT\",\n                \"Source\": \"Internal\",\n                \"File_Type\": \"PDF\"\n              }\n            ],\n            \"errors_injected\": [\n              \"Cutoff: Service_dates (2024-07-10 to 2024-07-15), but expense booking is in prior period.\",\n              \"Mismatch: Amount is $10,000 in contract, but related PO/invoice amount is $17,985 (discrepancy).\",\n              \"Vendor: Contract with 'Kordia Packging' (typo); differs from invoice.\",\n              \"Suspicious: Exact round dollar contract ($5,000).\",\n              \"Documentation: Service_dates missing, description vague ('Consulting').\",\n              \"Systemic gap: Requestor is 'Ext_User02', not authorized for contract approvals.\",\n              \"External: Service_dates intent is 'Consulting,' invoice is 'Special Project' (different narrative).\"\n            ],\n            \"_metadata\": {\n              \"originalValues\": {\n                \"Amount\": \"110770.00\",\n                \"Service_dates\": \"2024-07-01 to 2024-07-10\"\n              },\n              \"errorsApplied\": [\n                {\n                  \"field\": \"Amount\",\n                  \"type\": \"Amount mismatch\",\n                  \"originalValue\": \"110770.00\",\n                  \"errorValue\": \"10000.00\",\n                  \"reason\": \"Contract amount less than main PO/invoice.\"\n                },\n                {\n                  \"field\": \"Service_dates\",\n                  \"type\": \"Timing/Cutoff Error/Documentation\",\n                  \"originalValue\": \"2024-07-01 to 2024-07-10\",\n                  \"errorValue\": \"2024-07-10 to 2024-07-15\",\n                  \"reason\": \"Service dates outside booked expense period.\"\n                },\n                {\n                  \"field\": \"Amount\",\n                  \"type\": \"Round-dollar suspicious\",\n                  \"originalValue\": \"17985.00\",\n                  \"errorValue\": \"5000.00\",\n                  \"reason\": \"Suspiciously low, round contract value.\"\n                }\n              ],\n              \"allowedErrorSpectrum\": [\n                \"Timing/Cutoff errors\",\n                \"Mismatch between linked documents\",\n                \"Vendor irregularities\",\n                \"Suspicious amounts or frequencies\",\n                \"Description / Documentation Anomalies\",\n                \"Systemic Process Gaps\",\n                \"External Discrepancies\"\n              ]\n            }\n          }\n        ]\n      },\n      \"errorSummary\": {\n        \"totalErrorsInjected\": 63,\n        \"errorsByType\": {\n          \"Timing/Cutoff errors\": 9,\n          \"Mismatch between linked documents\": 9,\n          \"Vendor irregularities\": 9,\n          \"Suspicious amounts or frequencies\": 9,\n          \"Description / Documentation Anomalies\": 9,\n          \"Systemic Process Gaps\": 9,\n          \"External Discrepancies\": 9\n        },\n        \"crossDocumentErrors\": [\n          {\n            \"description\": \"Invoice amount and PO/contract discrepancy propagated through ledger and payment data, mismatching across original documents.\",\n            \"affectedDocuments\": [\n              \"INV-20240629-GDS\",\n              \"PO-20240629\",\n              \"CONTRACT-20240629\"\n            ],\n            \"fields\": [\n              \"Total_Amount_Due\",\n              \"Total_Purchase_Order_Value\",\n              \"Amount\"\n            ]\n          },\n          {\n            \"description\": \"Shell company (Nemo LLC) appears as recipient in wire, invoice, and bank statement while documented vendor on contract and PO is Kordia Packaging.\",\n            \"affectedDocuments\": [\n              \"WIRE-20240629\",\n              \"INV-20240629-SRV\",\n              \"BANK-20240629\"\n            ],\n            \"fields\": [\n              \"Recipient\",\n              \"Supplier_Name\",\n              \"Transactional_Details\"\n            ]\n          },\n          {\n            \"description\": \"Product/Service description mismatch between invoice, PO, contract, expense ledger, and shipping docs for consulting project as 'special project' vs. original.\",\n            \"affectedDocuments\": [\n              \"INV-20240629-SRV\",\n              \"PO-20240629\",\n              \"CONTRACT-20240629\",\n              \"GL-EXP-20240629\"\n            ],\n            \"fields\": [\n              \"Product_Description\",\n              \"Goods_or_Services_Description\",\n              \"Service_dates\"\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}"
        }
      }
    ],
    "Split Out1": [
      {
        "json": {
          "companyprofile": "{\"region\":\"United States\",\"industry\":\"Media\",\"company_name\":\"MediaSphere Inc.\",\"fiscal_year_end\":\"December 31\",\"business_context\":{\"description\":\"MediaSphere Inc. is a leading digital media company focusing on providing high-quality digital content, including news, entertainment, and educational materials. They leverage cutting-edge technology to deliver a personalized and immersive content experience to their subscribers. They are also committed to partnering with other media firms to diversify their content and reach a larger audience.\",\"business_model\":\"MediaSphere Inc. operates on a subscription-based model, generating the majority of its revenue from monthly and annual subscriptions to its online digital content. It offers a variety of news, entertainment, and educative content through its platform. Apart from subscriptions, the company also earns revenue from advertising and partnership with other media companies.\"}} + {\"banks\":[{\"name\":\"Hanover Bank\",\"tags\":[\"primary\"],\"address\":\"286 Main Ave, Evergreen, CO\",\"branding\":{\"logo_url\":\"https://logoipsum.com/wp-content/uploads/2020/07/logo-12.svg\",\"font_family\":\"Inter\",\"primary_color\":\"#334155\",\"document_style\":\"formal\",\"secondary_color\":\"#0F172A\"},\"industry\":\"Financials\",\"metadata\":{},\"entity_type\":\"bank\"}],\"region\":\"United States\",\"vendors\":[{\"name\":\"Kordia Packaging\",\"tags\":[\"preferred\",\"net30\"],\"address\":\"202 Market St, Denver, CO\",\"branding\":{\"logo_url\":\"https://logoipsum.com/wp-content/uploads/2020/07/logo-24.svg\",\"font_family\":\"Inter\",\"primary_color\":\"#334155\",\"document_style\":\"formal\",\"secondary_color\":\"#0F172A\"},\"industry\":\"media\",\"metadata\":{},\"entity_type\":\"vendor\"}],\"branding\":{\"logo_url\":\"https://logoipsum.com/wp-content/uploads/2020/07/logo-26.svg\",\"font_family\":\"Inter\",\"primary_color\":\"#334155\",\"document_style\":\"modern\",\"secondary_color\":\"#0F172A\"},\"industry\":\"media\",\"company_name\":\"MediaSphere Inc.\",\"revenue_model\":\"subscription\",\"fiscal_year_end\":\"December 31\",\"business_context\":{\"sector\":\"Other\",\"ticker\":null,\"market_cap\":null,\"description\":\"MediaSphere Inc. is a leading digital media company focusing on providing high-quality digital content, including news, entertainment, and educational materials. They leverage cutting-edge technology to deliver a personalized and immersive content experience to their subscribers. They are also committed to partnering with other media firms to diversify their content and reach a larger audience.\",\"known_risks\":[\"cutoff errors\",\"missing documentation\"],\"key_customers\":[],\"revenue_model\":\"subscription\",\"business_model\":\"MediaSphere Inc. operates on a subscription-based model, generating the majority of its revenue from monthly and annual subscriptions to its online digital content. It offers a variety of news, entertainment, and educative content through its platform. Apart from subscriptions, the company also earns revenue from advertising and partnership with other media companies.\",\"primary_products\":null,\"seasonal_patterns\":false,\"geographic_footprint\":[\"United States\"],\"prior_audit_findings\":null,\"regulatory_environment\":\"Standard U.S. regulations\",\"internal_control_maturity\":\"developing\",\"management_integrity_concerns\":null},\"shipping_partners\":[{\"name\":\"Pioneer Freight\",\"tags\":[\"ground\",\"tracking\"],\"address\":\"2685 Freight Rd, Denver, CO\",\"branding\":{\"logo_url\":\"https://logoipsum.com/wp-content/uploads/2020/07/logo-3.svg\",\"font_family\":\"Inter\",\"primary_color\":\"#334155\",\"document_style\":\"formal\",\"secondary_color\":\"#0F172A\"},\"industry\":\"Logistics\",\"metadata\":{},\"entity_type\":\"shipper\"}],\"company_specific_risks\":null} ",
          "testplan": {
            "testPlan": {
              "Test_Simulation_Plan": [
                {
                  "Document_Type": "Disbursement Listing",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Late payment",
                        "Error_Generated": "Recurring expense paid late, pushing recognition out of period",
                        "How_it_surfaces": "A payment is recorded after expected date for a recurring vendor, delaying the expense recognition",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Missing PO",
                        "Error_Generated": "Missing PO but invoice exists (unauthorized purchase)",
                        "How_it_surfaces": "Disbursement is made with no associated PO or incomplete linkage information",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Unapproved vendor",
                        "Error_Generated": "Unapproved vendor used for recurring payments",
                        "How_it_surfaces": "Disbursement to a vendor not on the preferred vendors list",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Same day payments",
                        "Error_Generated": "Multiple payments to same vendor on same day",
                        "How_it_surfaces": "Disbursement Listing shows more than one entry to the same vendor on a single date",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Vague",
                        "Error_Generated": "Missing or vague service descriptions",
                        "How_it_surfaces": "Transactional details or descriptions are insufficient to discern purchase purpose",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "No PO",
                        "Error_Generated": "No three-way match because PO was verbal",
                        "How_it_surfaces": "Disbursement entry exists without any formal PO reference or evidence",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Payment returned",
                        "Error_Generated": "Bank statement shows a round-trip payment pattern (money returned)",
                        "How_it_surfaces": "Disbursement listing documents a debit followed by a matching credit (in/out movement for similar amount) with same vendor",
                        "Relevant_documents": [
                          "Disbursement Listing"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Expenses sub-ledger",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Unrecorded liability",
                        "Error_Generated": "Invoice dated before year-end, recorded after",
                        "How_it_surfaces": "GL/Expenses Sub-ledger shows invoice recorded in next period despite an earlier invoice date",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Duplicate invoice",
                        "Error_Generated": "Duplicate invoice number with different amounts",
                        "How_it_surfaces": "Sub-ledger includes multiple entries for the same invoice number with differing transaction amounts",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Conflict of interest",
                        "Error_Generated": "Employee-owned vendor (conflict of interest)",
                        "How_it_surfaces": "Supplier name in sub-ledger matches internal employee list or raises concern per hints",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Round dollar",
                        "Error_Generated": "Round-dollar invoices (e.g., $10,000 exactly)",
                        "How_it_surfaces": "Transaction amount in sub-ledger is a notably round number",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Descriptions that don’t match GL category or PO",
                        "How_it_surfaces": "Goods or Services Description inconsistent with GL Account Name or expected category",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "No PO",
                        "Error_Generated": "No three-way match because PO was verbal",
                        "How_it_surfaces": "Invoice # or PO reference is missing, suggesting no formal purchase order",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Payment memo contradicts invoice purpose",
                        "How_it_surfaces": "Goods or Services Description or Memo field contradicts external payment rationale",
                        "Relevant_documents": [
                          "Expenses sub-ledger"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Invoice (Goods)",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Backdated invoice",
                        "Error_Generated": "Backdated invoice to shift expenses",
                        "How_it_surfaces": "Invoice date predates actual delivery/completion date or PO existence",
                        "Relevant_documents": [
                          "Invoice (Goods)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Amount mismatch",
                        "Error_Generated": "Invoice amount > PO amount",
                        "How_it_surfaces": "Invoice total exceeds PO value for same PO number",
                        "Relevant_documents": [
                          "Invoice (Goods)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Name mismatch",
                        "Error_Generated": "Vendor name subtly altered (e.g., ‘Acme Ltd.’ vs ‘ACME Limited’)",
                        "How_it_surfaces": "Supplier name on invoice differs in minor way from PO/vendor master",
                        "Relevant_documents": [
                          "Invoice (Goods)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Identical series",
                        "Error_Generated": "Invoice series with near-identical line items",
                        "How_it_surfaces": "Several invoices display repeated item descriptions, quantities and amounts",
                        "Relevant_documents": [
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Calculation errors",
                        "Error_Generated": "Broken field logic (e.g., total ≠ line item sum)",
                        "How_it_surfaces": "Total_Amount_Due on invoice does not match sum of (Item Price x Item Quantity)",
                        "Relevant_documents": [
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "Unapproved payer",
                        "Error_Generated": "Invoice processed via personal email and attached PDF",
                        "How_it_surfaces": "Invoice shows customer/recipient email or contact outside official company channels",
                        "Relevant_documents": [
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Payment memo contradicts invoice purpose",
                        "How_it_surfaces": "Product_Description or purpose on invoice does not align with attached PO or contract",
                        "Relevant_documents": [
                          "Invoice (Goods)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Wire Transfer",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Late payment",
                        "Error_Generated": "Recurring expense paid late, pushing recognition out of period",
                        "How_it_surfaces": "Wire payment date much later than normal cycle to recurring vendor",
                        "Relevant_documents": [
                          "Wire Transfer"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Payment mismatch",
                        "Error_Generated": "Bank payment amount ≠ invoice amount (partial or overpayment)",
                        "How_it_surfaces": "Amount paid via wire differs from invoice or agreed transaction value",
                        "Relevant_documents": [
                          "Wire Transfer",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Shell company",
                        "Error_Generated": "Shell company with no service description in invoice",
                        "How_it_surfaces": "Recipient is a vendor with no internet presence or business purpose",
                        "Relevant_documents": [
                          "Wire Transfer"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Same day payments",
                        "Error_Generated": "Multiple payments to same vendor on same day",
                        "How_it_surfaces": "Multiple wires sent to same recipient on single wire date",
                        "Relevant_documents": [
                          "Wire Transfer"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Fake contact",
                        "Error_Generated": "Fake email/contact on vendor invoice",
                        "How_it_surfaces": "Requestor or Recipient contact detail clearly fake or unverifiable",
                        "Relevant_documents": [
                          "Wire Transfer"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "Unapproved method",
                        "Error_Generated": "Payment processed via manual wire outside normal AP system",
                        "How_it_surfaces": "Wire Transfer shows manual requestor in field different from AP user list",
                        "Relevant_documents": [
                          "Wire Transfer"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Payment returned",
                        "Error_Generated": "Bank statement shows a round-trip payment pattern (money returned)",
                        "How_it_surfaces": "Wire out to recipient shortly followed by wire in from same recipient",
                        "Relevant_documents": [
                          "Wire Transfer"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Shipping Document (Sending)",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Late invoice",
                        "Error_Generated": "Service date in prior period, invoice generated late",
                        "How_it_surfaces": "Shipping date significantly precedes invoice date for same PO",
                        "Relevant_documents": [
                          "Shipping Document (Sending)",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Item/service mismatch",
                        "Error_Generated": "Invoice includes items/services not on the PO",
                        "How_it_surfaces": "Items on invoice not reflected in shipping document or PO records",
                        "Relevant_documents": [
                          "Shipping Document (Sending)",
                          "Invoice (Goods)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Split invoices",
                        "Error_Generated": "Split invoices just under approval thresholds to avoid escalation",
                        "How_it_surfaces": "Several smaller shipments/invoices to same PO and vendor timed to circumvent single-transaction approval",
                        "Relevant_documents": [
                          "Shipping Document (Sending)",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Odd frequency",
                        "Error_Generated": "Odd-frequency payments (e.g., weekly for annual services)",
                        "How_it_surfaces": "Shipping documents show odd frequency of deliveries relative to contract terms",
                        "Relevant_documents": [
                          "Shipping Document (Sending)"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Vague",
                        "Error_Generated": "Missing or vague service descriptions",
                        "How_it_surfaces": "Product_Description is general or non-descriptive in shipping record",
                        "Relevant_documents": [
                          "Shipping Document (Sending)"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "No PO",
                        "Error_Generated": "No three-way match because PO was verbal",
                        "How_it_surfaces": "Shipping record missing PO reference for item shipment",
                        "Relevant_documents": [
                          "Shipping Document (Sending)"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Payment memo contradicts invoice purpose",
                        "How_it_surfaces": "Shipping item descriptions do not match with PO or Invoice for the same transaction",
                        "Relevant_documents": [
                          "Shipping Document (Sending)",
                          "Invoice (Goods)"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Shipping Document (Receiving)",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Unrecorded liability",
                        "Error_Generated": "Invoice dated before year-end, recorded after",
                        "How_it_surfaces": "Goods shipped and received before year end, invoice arrives and is recorded after",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Item/service mismatch",
                        "Error_Generated": "Invoice includes items/services not on the PO",
                        "How_it_surfaces": "Received items not matching with invoice/PO quantities or descriptions",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)",
                          "Invoice (Goods)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Name mismatch",
                        "Error_Generated": "Vendor name subtly altered (e.g., ‘Acme Ltd.’ vs ‘ACME Limited’)",
                        "How_it_surfaces": "Supplier name on shipping receipt document does not match PO or invoice",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Odd frequency",
                        "Error_Generated": "Odd-frequency payments (e.g., weekly for annual services)",
                        "How_it_surfaces": "Unusual frequency in number of shipments received for the same PO",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Descriptions that don’t match GL category or PO",
                        "How_it_surfaces": "Product_Description differs from PO or Invoice for goods received",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "No PO",
                        "Error_Generated": "No three-way match because PO was verbal",
                        "How_it_surfaces": "Receipt document is missing the expected PO linkage",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Payment memo contradicts invoice purpose",
                        "How_it_surfaces": "Receiving record describes different goods than referenced in related invoice or purchase contract",
                        "Relevant_documents": [
                          "Shipping Document (Receiving)",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Order Document (Sales and Purchases)",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Backdated invoice",
                        "Error_Generated": "Backdated invoice to shift expenses",
                        "How_it_surfaces": "PO date lags significantly behind invoice date, potentially shifting expense periods",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Amount mismatch",
                        "Error_Generated": "Invoice amount > PO amount",
                        "How_it_surfaces": "PO states permissible value is lower than invoiced value",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Split invoices",
                        "Error_Generated": "Split invoices just under approval thresholds to avoid escalation",
                        "How_it_surfaces": "Multiple POs for similar items to same vendor just below approval thresholds",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Round dollar",
                        "Error_Generated": "Round-dollar invoices (e.g., $10,000 exactly)",
                        "How_it_surfaces": "Purchase Order amounts at round thresholds regardless of itemized cost",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Descriptions that don’t match GL category or PO",
                        "How_it_surfaces": "Product_Description is inconsistent with expected supplies or order record",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "No PO",
                        "Error_Generated": "No three-way match because PO was verbal",
                        "How_it_surfaces": "Order is referenced but no PO document is attached in support file set",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Payment memo contradicts invoice purpose",
                        "How_it_surfaces": "PO describes different items than those shown in invoice for same transaction reference",
                        "Relevant_documents": [
                          "Order Document (Sales and Purchases)",
                          "Invoice (Goods)"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Bank Statement",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Cash basis error",
                        "Error_Generated": "Payment made, but invoice never recorded",
                        "How_it_surfaces": "Payment entry appears on bank statement but with no matching invoice or inward transaction in accounting",
                        "Relevant_documents": [
                          "Bank Statement"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Payment mismatch",
                        "Error_Generated": "Bank payment amount ≠ invoice amount (partial or overpayment)",
                        "How_it_surfaces": "Transaction amount on bank statement does not tie to invoice records",
                        "Relevant_documents": [
                          "Bank Statement",
                          "Invoice (Goods)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Shell company",
                        "Error_Generated": "Shell company with no service description in invoice",
                        "How_it_surfaces": "Counterparty name appears suspicious or rarely seen in historical records",
                        "Relevant_documents": [
                          "Bank Statement"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Same day payments",
                        "Error_Generated": "Multiple payments to same vendor on same day",
                        "How_it_surfaces": "Multiple debits to a single vendor in one banking day",
                        "Relevant_documents": [
                          "Bank Statement"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Vague",
                        "Error_Generated": "Missing or vague service descriptions",
                        "How_it_surfaces": "Transactional details field in bank statement contains non-descriptive or blank text",
                        "Relevant_documents": [
                          "Bank Statement"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "Unapproved payer",
                        "Error_Generated": "Invoice processed via personal email and attached PDF",
                        "How_it_surfaces": "Payment noted as processed by an account not authorized in company payment policy",
                        "Relevant_documents": [
                          "Bank Statement"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Payment returned",
                        "Error_Generated": "Bank statement shows a round-trip payment pattern (money returned)",
                        "How_it_surfaces": "A withdrawal and deposit of same/similar value occur within short timeframe with same external party",
                        "Relevant_documents": [
                          "Bank Statement"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Invoices (for Services)",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Late invoice",
                        "Error_Generated": "Service date in prior period, invoice generated late",
                        "How_it_surfaces": "Service_Date on invoice is in prior period to Date_of_Invoice, creating possible timing error",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Duplicate invoice",
                        "Error_Generated": "Duplicate invoice number with different amounts",
                        "How_it_surfaces": "Multiple service invoices issued with same Invoice_Number but differing amounts",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Shell company",
                        "Error_Generated": "Shell company with no service description in invoice",
                        "How_it_surfaces": "Supplier_Name is unrecognizable and Product_Description is vague or missing",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Same invoice",
                        "Error_Generated": "Same invoice reused across months",
                        "How_it_surfaces": "Repeated Invoice_Number appears month-multiple times in records",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Keywords",
                        "Error_Generated": "Suspicious keywords (e.g., ‘consulting’, ‘miscellaneous’, ‘special project’)",
                        "How_it_surfaces": "Services described with broad or generic keywords in Product_Description",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "No PO",
                        "Error_Generated": "No three-way match because PO was verbal",
                        "How_it_surfaces": "Invoice has no PO reference or number, raising potential compliance issue",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Payment memo contradicts invoice purpose",
                        "How_it_surfaces": "Service/Product_Description doesn't match memorandum or description in payment files",
                        "Relevant_documents": [
                          "Invoices (for Services)"
                        ]
                      }
                    ]
                  }
                },
                {
                  "Document_Type": "Purchase Contract Snippet",
                  "Edge_Case_Categories": {
                    "Timing/Cutoff errors": [
                      {
                        "Injected_Edge_Case": "Timing/Cutoff errors",
                        "Error_Generated": "Service dates in contract do not align with booked expenses",
                        "How_it_surfaces": "Service_dates field in contract don't match expense booking dates",
                        "Relevant_documents": [
                          "Purchase Contract Snippet"
                        ]
                      }
                    ],
                    "Mismatch between linked documents": [
                      {
                        "Injected_Edge_Case": "Amount mismatch",
                        "Error_Generated": "Transaction contract amount different from PO/Invoice",
                        "How_it_surfaces": "Amount listed in contract is at variance with linked PO or invoice",
                        "Relevant_documents": [
                          "Purchase Contract Snippet",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Vendor irregularities": [
                      {
                        "Injected_Edge_Case": "Name mismatch",
                        "Error_Generated": "Vendor name subtly altered",
                        "How_it_surfaces": "Vendor/recipient name in contract differs subtly from PO or invoice",
                        "Relevant_documents": [
                          "Purchase Contract Snippet",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ],
                    "Suspicious amounts or frequencies": [
                      {
                        "Injected_Edge_Case": "Round dollar",
                        "Error_Generated": "Contract is for exact round dollar, raising scrutiny",
                        "How_it_surfaces": "Amount field in contract exactly $5,000 / $10,000 etc.",
                        "Relevant_documents": [
                          "Purchase Contract Snippet"
                        ]
                      }
                    ],
                    "Description / Documentation Anomalies": [
                      {
                        "Injected_Edge_Case": "Vague",
                        "Error_Generated": "Description/memo in contract is missing or non-specific",
                        "How_it_surfaces": "Service_description is vague or generic in contract file",
                        "Relevant_documents": [
                          "Purchase Contract Snippet"
                        ]
                      }
                    ],
                    "Systemic Process Gaps": [
                      {
                        "Injected_Edge_Case": "Unapproved method",
                        "Error_Generated": "Contract processed by unapproved party",
                        "How_it_surfaces": "Requestor is not part of authorized personnel",
                        "Relevant_documents": [
                          "Purchase Contract Snippet"
                        ]
                      }
                    ],
                    "External Discrepancies": [
                      {
                        "Injected_Edge_Case": "Description mismatch",
                        "Error_Generated": "Contract purpose is different than invoice/PO perspective",
                        "How_it_surfaces": "Service or transaction narrative describes a different intent or service than PO/invoice record",
                        "Relevant_documents": [
                          "Purchase Contract Snippet",
                          "Order Document (Sales and Purchases)"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "simulations": {
            "simulationId": "RUN-318edc78-e880-465f-bcf6-c5fb31cd809c-01",
            "simulationNarrative": "MediaSphere Inc. issues a single purchase order to Kordia Packaging for both goods (media content equipment) and services (digital production consulting). Kordia Packaging fulfills the goods shipment; service work is also completed. Separate invoices are issued for goods and services. MediaSphere settles both in full with two wire transfers, with all payments reconciling in the disbursement listing, bank statement, and expense ledger. All transaction references, dates, quantities, and amounts are cross-validated and consistent throughout the process.",
            "metadata": {
              "totalDocuments": 10,
              "documentCounts": {
                "Disbursement Listing": 1,
                "Expenses sub-ledger": 1,
                "Invoice (Goods)": 1,
                "Wire Transfer": 1,
                "Shipping Document (Sending)": 1,
                "Shipping Document (Receiving)": 1,
                "Order Document (Sales and Purchases)": 1,
                "Bank Statement": 1,
                "Invoices (for Services)": 1,
                "Purchase Contract Snippet": 1
              },
              "extra": {
                "threads": [
                  "Order Document (Sales and Purchases) PO-20240629 covers both (1) Goods: 190 units of 'Broadcast Camera Kit' at $583 each and (2) Services: 'Digital Content Production Consulting' for a fixed fee.",
                  "Invoice (Goods) INV-20240629-GDS matches Order PO-20240629 on goods. Invoice (Services) INV-20240629-SRV matches on services.",
                  "Shipping documents (Sending and Receiving) reference PO-20240629 and show movement of 190 units (goods) in both directions.",
                  "Wire transfer, disbursement listing, bank statement, and expense ledger all feature two entries: payment for goods invoice ($110,770.00) and payment for services invoice ($17,985.00), matching both invoices and the total PO obligations."
                ],
                "fieldNameMap": {
                  "Account_Number": "Account_Number",
                  "Date_of_transaction": "Date_of_transaction",
                  "Transactional_Details": "Transactional_Details",
                  "Transaction_Amount": "Transaction_Amount",
                  "Document Number": "Document_Number",
                  "Transaction Description": "Transaction_Description",
                  "Vendor Name": "Vendor_Name",
                  "Vendor Number": "Vendor_Number",
                  "GL_Account_Number": "GL_Account_Number",
                  "GL_Account_Name": "GL_Account_Name",
                  "GL_Account_Balance": "GL_Account_Balance",
                  "Supplier_Name": "Supplier_Name",
                  "Goods_or_Services_Description": "Goods_or_Services_Description",
                  "Transaction_Amount (Ledger)": "Transaction_Amount",
                  "Date_of_Transaction": "Date_of_Transaction",
                  "Transaction_Number": "Transaction_Number",
                  "Due_Date_Payables": "Due_Date_Payables",
                  "Invoice_Number": "Invoice_Number",
                  "Date_of_Invoice": "Date_of_Invoice",
                  "Product_Description": "Product_Description",
                  "Item_Quantity": "Item_Quantity",
                  "Item_Price": "Item_Price",
                  "Total_Amount_Due": "Total_Amount_Due",
                  "Purchase_Order_Number": "Purchase_Order_Number",
                  "Delivery_/_Completion_Date": "Delivery_/_Completion_Date",
                  "Currency_Unit": "Currency_Unit",
                  "Transaction_Type_(or_Category)": "Transaction_Type_(or_Category)",
                  "Amount_(or_Total)": "Amount_(or_Total)",
                  "Requestor": "Requestor",
                  "Recipient": "Recipient",
                  "Wire_Date": "Wire_Date",
                  "Transaction_(or_Reference)_Number": "Transaction_(or_Reference)_Number",
                  "Requestor_Account_Number": "Requestor_Account_Number",
                  "Recipient_Account_Number": "Recipient_Account_Number",
                  "Currency": "Currency",
                  "Shipping_Document_Number": "Shipping_Document_Number",
                  "Shipping_Doc_date": "Shipping_Doc_date",
                  "Customer_name": "Customer_name",
                  "Customer_Address": "Customer_Address",
                  "Product_Description_Shipping": "Product_Description",
                  "Supplier_Address": "Supplier_Address",
                  "Date_Shipped": "Date_Shipped",
                  "Shipping_carrier": "Shipping_carrier",
                  "Shipping_method": "Shipping_method",
                  "Tracking_number": "Tracking_number",
                  "Unit_of_measurement": "Unit_of_measurement",
                  "Total_Purchase_Order_Value": "Total_Purchase_Order_Value",
                  "Delivery_Date": "Delivery_Date",
                  "Statement_Period": "Statement_Period",
                  "Opening_or_Beginning_or_Previous_Balance": "Opening_or_Beginning_or_Previous_Balance",
                  "Closing_or_Ending_Balance": "Closing_or_Ending_Balance",
                  "Deposit_or_Credit_Totals": "Deposit_or_Credit_Totals",
                  "Withdrawal_or_Debit_Totals": "Withdrawal_or_Debit_Totals",
                  "Bank_name": "Bank_name",
                  "Service_Date": "Service_Date",
                  "Amount": "Amount",
                  "Service_dates": "Service_dates",
                  "Transaction_id": "Transaction_id"
                },
                "edgeCaseHooks": []
              }
            },
            "generatedDocuments": [
              {
                "docId": "PO-20240629",
                "docType": "Order Document (Sales and Purchases)",
                "data": [
                  {
                    "Purchase_Order_Number": "PO-20240629",
                    "Purchase_Order_Date": "2024-06-29",
                    "Supplier_Name": "Kordia Packaging",
                    "Customer_Name": "MediaSphere Inc.",
                    "Item_Quantity": "190",
                    "Product_Description": "Broadcast Camera Kit",
                    "Unit_of_measurement": "units",
                    "Currency_Unit": "USD",
                    "Item_Price": "583.00",
                    "Total_Purchase_Order_Value": "110770.00",
                    "Delivery_Date": "2024-07-10",
                    "Source": "Internal",
                    "File_Type": "PDF"
                  },
                  {
                    "Purchase_Order_Number": "PO-20240629",
                    "Purchase_Order_Date": "2024-06-29",
                    "Supplier_Name": "Kordia Packaging",
                    "Customer_Name": "MediaSphere Inc.",
                    "Item_Quantity": "1",
                    "Product_Description": "Digital Content Production Consulting",
                    "Unit_of_measurement": "service",
                    "Currency_Unit": "USD",
                    "Item_Price": "17985.00",
                    "Total_Purchase_Order_Value": "17985.00",
                    "Delivery_Date": "2024-10-30",
                    "Source": "Internal",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "INV-20240629-GDS",
                "docType": "Invoice (Goods)",
                "data": [
                  {
                    "Invoice_Number": "INV-20240629-GDS",
                    "Date_of_Invoice": "2024-07-16",
                    "Supplier_Name": "Kordia Packaging",
                    "Product_Description": "Broadcast Camera Kit",
                    "Item_Quantity": "190",
                    "Item_Price": "583.00",
                    "Total_Amount_Due": "110770.00",
                    "Purchase_Order_Number": "PO-20240629",
                    "Delivery_/_Completion_Date": "2024-07-10",
                    "Currency_Unit": "USD",
                    "Source": "External",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "INV-20240629-SRV",
                "docType": "Invoices (for Services)",
                "data": [
                  {
                    "Invoice_Number": "INV-20240629-SRV",
                    "Date_of_Invoice": "2024-10-30",
                    "Supplier_Name": "Kordia Packaging",
                    "Product_Description": "Digital Content Production Consulting",
                    "Service_Date": "2024-10-30",
                    "Total_Amount_Due": "17985.00",
                    "Currency_Unit": "USD",
                    "Source": "External",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "SHIP-SEND-20240629",
                "docType": "Shipping Document (Sending)",
                "data": [
                  {
                    "Shipping_Document_Number": "SHIP-SEND-20240629",
                    "Shipping_Doc_date": "2024-07-09",
                    "Customer_name": "MediaSphere Inc.",
                    "Customer_Address": "202 Market St, Denver, CO",
                    "Purchase_Order_Number": "PO-20240629",
                    "Item_Quantity": "190",
                    "Product_Description": "Broadcast Camera Kit",
                    "Supplier_Name": "Kordia Packaging",
                    "Supplier_Address": "202 Market St, Denver, CO",
                    "Date_Shipped": "2024-07-09",
                    "Shipping_carrier": "Pioneer Freight",
                    "Shipping_method": "ground",
                    "Tracking_number": "TRACK-20240629-SND-01",
                    "Source": "External",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "SHIP-RECV-20240629",
                "docType": "Shipping Document (Receiving)",
                "data": [
                  {
                    "Shipping_Document_Number": "SHIP-RECV-20240629",
                    "Shipping_Doc_date": "2024-07-10",
                    "Customer_name": "MediaSphere Inc.",
                    "Customer_Address": "202 Market St, Denver, CO",
                    "Purchase_Order_Number": "PO-20240629",
                    "Item_Quantity": "190",
                    "Product_Description": "Broadcast Camera Kit",
                    "Supplier_Name": "Kordia Packaging",
                    "Supplier_Address": "202 Market St, Denver, CO",
                    "Date_Shipped": "2024-07-09",
                    "Shipping_carrier": "Pioneer Freight",
                    "Shipping_method": "ground",
                    "Tracking_number": "TRACK-20240629-RCV-01",
                    "Source": "Internal",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "WIRE-20240629",
                "docType": "Wire Transfer",
                "data": [
                  {
                    "Transaction_Type_(or_Category)": "Goods Payment",
                    "Amount_(or_Total)": "110770.00",
                    "Requestor": "MediaSphere Inc.",
                    "Recipient": "Kordia Packaging",
                    "Wire_Date": "2024-07-16",
                    "Transaction_(or_Reference)_Number": "WT-20240629-GDS",
                    "Requestor_Account_Number": "29590695",
                    "Recipient_Account_Number": "44398506",
                    "Currency": "USD",
                    "Source": "External",
                    "File_Type": "PDF"
                  },
                  {
                    "Transaction_Type_(or_Category)": "Services Payment",
                    "Amount_(or_Total)": "17985.00",
                    "Requestor": "MediaSphere Inc.",
                    "Recipient": "Kordia Packaging",
                    "Wire_Date": "2024-10-30",
                    "Transaction_(or_Reference)_Number": "WT-20240629-SRV",
                    "Requestor_Account_Number": "29590695",
                    "Recipient_Account_Number": "44398506",
                    "Currency": "USD",
                    "Source": "External",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "DISB-20240629",
                "docType": "Disbursement Listing",
                "data": [
                  {
                    "Account_Number": "91854801",
                    "Date_of_transaction": "2024-07-16",
                    "Transactional_Details": "Payment for INV-20240629-GDS",
                    "Transaction_Amount": "110770.00",
                    "Document Number": "INV-20240629-GDS",
                    "Transaction Description": "Goods payment per PO-20240629",
                    "Vendor Name": "Kordia Packaging",
                    "Vendor Number": "KPKG-01",
                    "Source": "Internal",
                    "File_Type": "CSV"
                  },
                  {
                    "Account_Number": "91854801",
                    "Date_of_transaction": "2024-10-30",
                    "Transactional_Details": "Payment for INV-20240629-SRV",
                    "Transaction_Amount": "17985.00",
                    "Document Number": "INV-20240629-SRV",
                    "Transaction Description": "Services payment per PO-20240629",
                    "Vendor Name": "Kordia Packaging",
                    "Vendor Number": "KPKG-01",
                    "Source": "Internal",
                    "File_Type": "CSV"
                  }
                ]
              },
              {
                "docId": "GL-EXP-20240629",
                "docType": "Expenses sub-ledger",
                "data": [
                  {
                    "GL_Account_Number": "5120",
                    "GL_Account_Name": "Equipment Purchases",
                    "GL_Account_Balance": "110770.00",
                    "Supplier_Name": "Kordia Packaging",
                    "Goods_or_Services_Description": "Broadcast Camera Kit",
                    "Transaction_Amount": "110770.00",
                    "Date_of_Transaction": "2024-07-16",
                    "Transaction_Number": "EXP-20240629-GDS",
                    "Due_Date_Payables": "2024-07-30",
                    "Source": "Internal",
                    "File_Type": "CSV"
                  },
                  {
                    "GL_Account_Number": "5205",
                    "GL_Account_Name": "Professional Services",
                    "GL_Account_Balance": "17985.00",
                    "Supplier_Name": "Kordia Packaging",
                    "Goods_or_Services_Description": "Digital Content Production Consulting",
                    "Transaction_Amount": "17985.00",
                    "Date_of_Transaction": "2024-10-30",
                    "Transaction_Number": "EXP-20240629-SRV",
                    "Due_Date_Payables": "2024-11-15",
                    "Source": "Internal",
                    "File_Type": "CSV"
                  }
                ]
              },
              {
                "docId": "BANK-20240629",
                "docType": "Bank Statement",
                "data": [
                  {
                    "Account_Number": "16783747",
                    "Statement_Period": "2024-07-01 to 2024-07-31",
                    "Opening_or_Beginning_or_Previous_Balance": "500000.00",
                    "Closing_or_Ending_Balance": "389230.00",
                    "Deposit_or_Credit_Totals": "0.00",
                    "Withdrawal_or_Debit_Totals": "110770.00",
                    "Transactional_Details": "Payment for Invoice INV-20240629-GDS",
                    "Date_of_transaction": "2024-07-16",
                    "Transaction_Number": "WT-20240629-GDS",
                    "Balance": "389230.00",
                    "Bank_name": "Hanover Bank",
                    "Source": "External",
                    "File_Type": "PDF"
                  },
                  {
                    "Account_Number": "16783747",
                    "Statement_Period": "2024-10-01 to 2024-10-31",
                    "Opening_or_Beginning_or_Previous_Balance": "389230.00",
                    "Closing_or_Ending_Balance": "371245.00",
                    "Deposit_or_Credit_Totals": "0.00",
                    "Withdrawal_or_Debit_Totals": "17985.00",
                    "Transactional_Details": "Payment for Invoice INV-20240629-SRV",
                    "Date_of_transaction": "2024-10-30",
                    "Transaction_Number": "WT-20240629-SRV",
                    "Balance": "371245.00",
                    "Bank_name": "Hanover Bank",
                    "Source": "External",
                    "File_Type": "PDF"
                  }
                ]
              },
              {
                "docId": "CONTRACT-20240629",
                "docType": "Purchase Contract Snippet",
                "data": [
                  {
                    "Amount": "110770.00",
                    "Service_dates": "2024-07-01 to 2024-07-10",
                    "Transaction_id": "CONTRACT-20240629-GDS",
                    "Source": "Internal",
                    "File_Type": "PDF"
                  },
                  {
                    "Amount": "17985.00",
                    "Service_dates": "2024-10-30",
                    "Transaction_id": "CONTRACT-20240629-SRV",
                    "Source": "Internal",
                    "File_Type": "PDF"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  "repo": {
    "owner": "Isaakkamau",
    "name": "simthetic-n8n-backup"
  },
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 6,
  "updatedAt": "2025-09-26T06:58:35.000Z",
  "versionId": "7293ed61-fb8c-45bd-9195-509f4208d6d0"
}